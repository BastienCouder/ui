{
  "name": "hover-card",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-hover-card"
  ],
  "files": [
    {
      "path": "ui/react/hover-card.tsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface HoverCardProps {\n  children: React.ReactNode | string;\n  content?: React.ReactNode;\n  align?: \"start\" | \"center\" | \"end\";\n  sideOffset?: number;\n  className?: string;\n  open?: any;\n  onOpenChange?: any;\n}\n\nconst HoverCard: React.FC<HoverCardProps> = ({\n  children,\n  content,\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}) => {\n  const wrappedChildren =\n    typeof children === \"string\" || typeof children === \"number\" ? (\n      <>{children}</>\n    ) : (\n      children\n    );\n\n  return (\n    <HoverCardPrimitive.Root {...props}>\n      {content ? (\n        <>\n          <HoverCardPrimitive.Trigger asChild>\n            {wrappedChildren}\n          </HoverCardPrimitive.Trigger>\n          <HoverCardPrimitive.Content\n            align={align}\n            sideOffset={sideOffset}\n            className={cn(\n              \"z-50 w-64 rounded-md border bg-bg p-4 text-fg shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n              className,\n            )}\n          >\n            {content}\n          </HoverCardPrimitive.Content>\n        </>\n      ) : (\n        wrappedChildren\n      )}\n    </HoverCardPrimitive.Root>\n  );\n};\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger;\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-bg p-4 text-fg shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName;\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent };\n",
      "type": "registry:ui",
      "target": "components/ui/hover-card.tsx"
    }
  ]
}