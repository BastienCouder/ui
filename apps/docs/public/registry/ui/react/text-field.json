{
  "name": "text-field",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/text-field.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport * as React from \"react\";\r\nimport { tv, type VariantProps } from \"tailwind-variants\";\r\nimport { Loader, HelpCircle } from \"@/lib/icons\";\r\nimport { Tooltip } from \"@/registry/ui/react/tooltip\";\r\n\r\nconst inputStyles = tv({\r\n  base: \"w-full max-w-96 rounded-md text-sm ring-offset-background transition-colors focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\r\n  variants: {\r\n    variant: {\r\n      default:\r\n        \"bg-background hover:bg-input-background-hover focus:bg-input-background-active text-input-foreground border border-input-border\",\r\n      primary:\r\n        \"bg-primary hover:bg-primary-hover focus:bg-primary-active text-primary-foreground border border-primary-border\",\r\n      secondary:\r\n        \"bg-secondary hover:bg-secondary-hover focus:bg-secondary-active text-secondary-foreground border border-secondary-border\",\r\n      outline:\r\n        \"bg-transparent border border-input-border hover:bg-input-background-hover focus:bg-input-background-active text-input-foreground\",\r\n      quiet: \"bg-transparent text-input-foreground\",\r\n    },\r\n    inputSize: {\r\n      sm: \"h-8 text-sm px-2\",\r\n      md: \"h-10 text-base px-4\",\r\n      lg: \"h-12 text-lg px-4\",\r\n    },\r\n    shape: {\r\n      rectangle: \"rounded-md\",\r\n      square: \"rounded-none\",\r\n      circle: \"rounded-full\",\r\n    },\r\n    invalid: {\r\n      true: \"border-destructive bg-background text-destructive-foreground focus-visible:ring-destructive\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n    inputSize: \"md\",\r\n    shape: \"rectangle\",\r\n  },\r\n});\r\n\r\ntype TextFieldProps = Omit<InputProps, \"children\" | \"prefix\" | \"suffix\"> &\r\n  VariantProps<typeof inputStyles> & {\r\n    label?: string;\r\n    description?: string;\r\n    prefix?: React.ReactNode;\r\n    suffix?: React.ReactNode;\r\n    isInvalid?: boolean;\r\n    errorMessage?: string;\r\n    isLoading?: boolean;\r\n    loaderPosition?: \"prefix\" | \"suffix\";\r\n    placeholder?: string;\r\n    contextualHelp?: React.ReactNode;\r\n    inputSize?: \"sm\" | \"md\" | \"lg\";\r\n  };\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\r\n  (\r\n    {\r\n      label,\r\n      description,\r\n      className,\r\n      type = \"text\",\r\n      prefix,\r\n      suffix,\r\n      isInvalid,\r\n      errorMessage,\r\n      contextualHelp,\r\n      inputSize,\r\n      shape,\r\n      isLoading,\r\n      loaderPosition = \"prefix\",\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const renderPrefix =\r\n      isLoading && loaderPosition === \"prefix\" ? (\r\n        <Loader className=\"mr-2 animate-rotate\" />\r\n      ) : (\r\n        prefix\r\n      );\r\n\r\n    const renderSuffix =\r\n      isLoading && loaderPosition === \"suffix\" ? (\r\n        <Loader className=\"ml-2\" />\r\n      ) : (\r\n        suffix\r\n      );\r\n\r\n    return (\r\n      <div className={cn(\"w-full max-w-96\", className)}>\r\n        {label ||\r\n          (contextualHelp && (\r\n            <label className=\"text-sm font-medium flex items-center gap-1 mb-1\">\r\n              {label}\r\n              {contextualHelp && (\r\n                <Tooltip content={contextualHelp} offset={5}>\r\n                  <HelpCircle className=\"h-4 w-4\" />\r\n                </Tooltip>\r\n              )}\r\n            </label>\r\n          ))}\r\n        <div className=\"relative flex items-center gap-x-2\">\r\n          {renderPrefix && (\r\n            <span className=\"absolute left-3 inset-y-0 flex items-center z-40 text-gray-400 w-5\">\r\n              {renderPrefix}\r\n            </span>\r\n          )}\r\n          <input\r\n            type={type}\r\n            className={cn(\r\n              inputStyles({ invalid: isInvalid, inputSize, shape }),\r\n              className,\r\n              {\r\n                \"pl-11\": renderPrefix,\r\n                \"pr-10\": renderSuffix,\r\n              },\r\n            )}\r\n            ref={ref}\r\n            {...props}\r\n          />\r\n          {renderSuffix && (\r\n            <span className=\"absolute right-3 inset-y-0 flex z-20 items-center text-gray-400 w-5\">\r\n              {renderSuffix}\r\n            </span>\r\n          )}\r\n        </div>\r\n        {isInvalid && errorMessage && (\r\n          <p className=\"text-xs text-destructive mt-1\">{errorMessage}</p>\r\n        )}\r\n        {!isInvalid && description && (\r\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\r\n        )}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nTextField.displayName = \"TextField\";\r\n\r\nexport type { TextFieldProps };\r\nexport { TextField };\r\n",
      "type": "registry:ui",
      "target": "components/ui/text-field.tsx"
    }
  ]
}