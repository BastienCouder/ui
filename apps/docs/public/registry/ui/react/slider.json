{
  "name": "slider",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/slider.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface SliderProps\r\n  extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\r\n  showSteps?: \"none\" | \"half\" | \"full\";\r\n  formatLabel?: (value: number) => string;\r\n  formatLabelSide?: string;\r\n}\r\n\r\nconst Slider = React.forwardRef<\r\n  React.ElementRef<typeof SliderPrimitive.Root>,\r\n  SliderProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      showSteps = \"none\",\r\n      formatLabel,\r\n      formatLabelSide = \"top\",\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const {\r\n      min = 0,\r\n      max = 100,\r\n      step = 1,\r\n      orientation = \"horizontal\",\r\n      value,\r\n      defaultValue,\r\n      onValueChange,\r\n    } = props;\r\n    const [hoveredThumbIndex, setHoveredThumbIndex] =\r\n      React.useState<boolean>(false);\r\n    const numberOfSteps = Math.floor((max - min) / step);\r\n    const stepLines = Array.from(\r\n      { length: numberOfSteps },\r\n      (_, index) => index * step + min,\r\n    );\r\n\r\n    const initialValue = Array.isArray(value)\r\n      ? value\r\n      : Array.isArray(defaultValue)\r\n        ? defaultValue\r\n        : [min, max];\r\n    const [localValues, setLocalValues] =\r\n      React.useState<number[]>(initialValue);\r\n\r\n    React.useEffect(() => {\r\n      if (!isEqual(value, localValues))\r\n        setLocalValues(\r\n          Array.isArray(value)\r\n            ? value\r\n            : Array.isArray(defaultValue)\r\n              ? defaultValue\r\n              : [min, max],\r\n        );\r\n    }, [min, max, value]);\r\n\r\n    const handleValueChange = (newValues: number[]) => {\r\n      setLocalValues(newValues);\r\n      if (onValueChange) onValueChange(newValues);\r\n    };\r\n\r\n    function isEqual(\r\n      array1: number[] | undefined,\r\n      array2: number[] | undefined,\r\n    ) {\r\n      array1 = array1 ?? [];\r\n      array2 = array2 ?? [];\r\n\r\n      if (array1.length !== array2.length) return false;\r\n\r\n      for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] !== array2[i]) return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return (\r\n      <SliderPrimitive.Root\r\n        ref={ref}\r\n        className={cn(\r\n          \"relative flex cursor-pointer touch-none select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n          orientation === \"horizontal\"\r\n            ? \"w-full items-center\"\r\n            : \"h-full justify-center\",\r\n          className,\r\n        )}\r\n        min={min}\r\n        max={max}\r\n        step={step}\r\n        value={localValues}\r\n        onValueChange={(value) => handleValueChange(value)}\r\n        {...props}\r\n        onFocus={() => setHoveredThumbIndex(true)}\r\n        onBlur={() => setHoveredThumbIndex(false)}\r\n      >\r\n        <SliderPrimitive.Track\r\n          className={cn(\r\n            \"bg-neutral/70 relative grow overflow-hidden rounded-full\",\r\n            orientation === \"horizontal\" ? \"h-1.5 w-full\" : \"h-full w-1.5\",\r\n          )}\r\n        >\r\n          <SliderPrimitive.Range\r\n            className={cn(\r\n              \"bg-primary absolute\",\r\n              orientation === \"horizontal\" ? \"h-full\" : \"w-full\",\r\n            )}\r\n          />\r\n          {showSteps !== undefined &&\r\n            showSteps !== \"none\" &&\r\n            stepLines.map((value, index) => {\r\n              if (value === min || value === max) return null;\r\n\r\n              const positionPercentage = ((value - min) / (max - min)) * 100;\r\n              const adjustedPosition = 50 + (positionPercentage - 50) * 0.96;\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={cn(\r\n                    {\r\n                      \"w-0.5 h-2\": orientation !== \"vertical\",\r\n                      \"w-2 h-0.5\": orientation === \"vertical\",\r\n                    },\r\n                    \"bg-fg absolute\",\r\n                    {\r\n                      \"left-1\":\r\n                        orientation === \"vertical\" && showSteps === \"half\",\r\n                      \"top-1\":\r\n                        orientation !== \"vertical\" && showSteps === \"half\",\r\n                      \"left-0\":\r\n                        orientation === \"vertical\" && showSteps === \"full\",\r\n                      \"top-0\":\r\n                        orientation !== \"vertical\" && showSteps === \"full\",\r\n                      \"-translate-x-1/2\": orientation !== \"vertical\",\r\n                      \"-translate-y-1/2\": orientation === \"vertical\",\r\n                    },\r\n                  )}\r\n                  style={{\r\n                    [orientation === \"vertical\" ? \"bottom\" : \"left\"]:\r\n                      `${adjustedPosition}%`,\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n        </SliderPrimitive.Track>\r\n        {localValues.map((numberStep, index) => (\r\n          <SliderPrimitive.Thumb\r\n            key={index}\r\n            className={cn(\r\n              \"border-primary bg-bg focus-visible:ring-ring block size-4 rounded-full border shadow transition-colors focus-visible:outline-none focus-visible:ring-1\",\r\n            )}\r\n          >\r\n            {hoveredThumbIndex && formatLabel && (\r\n              <div\r\n                className={cn(\r\n                  {\r\n                    \"bottom-8 left-1/2 -translate-x-1/2\":\r\n                      formatLabelSide === \"top\",\r\n                  },\r\n                  {\r\n                    \"top-8 left-1/2 -translate-x-1/2\":\r\n                      formatLabelSide === \"bottom\",\r\n                  },\r\n                  { \"right-8 -translate-y-1/4\": formatLabelSide === \"left\" },\r\n                  { \"left-8 -translate-y-1/4\": formatLabelSide === \"right\" },\r\n                  \"bg-popover text-popover-foreground absolute z-30 w-max items-center justify-items-center rounded-md border px-2 py-1 text-center shadow-sm\",\r\n                )}\r\n              >\r\n                {formatLabel(numberStep)}\r\n              </div>\r\n            )}\r\n          </SliderPrimitive.Thumb>\r\n        ))}\r\n      </SliderPrimitive.Root>\r\n    );\r\n  },\r\n);\r\n\r\nSlider.displayName = SliderPrimitive.Root.displayName;\r\n\r\nexport { Slider };\r\n",
      "type": "registry:ui",
      "target": "components/ui/slider.tsx"
    }
  ]
}