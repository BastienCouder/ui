{
  "name": "multi-select",
  "dependencies": [
    "@radix-ui/react-icons",
    "@radix-ui/react-popover",
    "@radix-ui/react-primitive",
    "@radix-ui/react-use-controllable-state"
  ],
  "files": [
    {
      "name": "multi-select.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\r\nimport type { Primitive } from \"@radix-ui/react-primitive\";\r\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\r\nimport { Check, ChevronsUpDown } from \"lucide-react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator,\r\n} from \"@/registry/ui/react/command\";\r\n\r\nexport interface MultiSelectOptionItem {\r\n  value: string;\r\n  label?: React.ReactNode;\r\n}\r\n\r\ninterface MultiSelectContextValue {\r\n  value: string[];\r\n\r\n  open: boolean;\r\n\r\n  onSelect: (value: string, item: MultiSelectOptionItem) => void;\r\n\r\n  onDeselect: (value: string, item: MultiSelectOptionItem) => void;\r\n\r\n  onSearch?: (keyword?: string | undefined) => void;\r\n\r\n  filter?: boolean | ((keyword: string, current: string) => boolean);\r\n\r\n  disabled?: boolean;\r\n\r\n  maxCount?: number;\r\n\r\n  itemCache: Map<string, MultiSelectOptionItem>;\r\n}\r\n\r\nconst MultiSelectContext = React.createContext<\r\n  MultiSelectContextValue | undefined\r\n>(undefined);\r\n\r\nfunction useMultiSelect() {\r\n  const context = React.useContext(MultiSelectContext);\r\n\r\n  if (!context)\r\n    throw new Error(\"useMultiSelect must be used within MultiSelectProvider\");\r\n\r\n  return context;\r\n}\r\n\r\ntype MultiSelectProps = React.ComponentPropsWithoutRef<\r\n  typeof PopoverPrimitive.Root\r\n> & {\r\n  value?: string[];\r\n  onValueChange?: (value: string[], items: MultiSelectOptionItem[]) => void;\r\n  onSelect?: (value: string, item: MultiSelectOptionItem) => void;\r\n  onDeselect?: (value: string, item: MultiSelectOptionItem) => void;\r\n  defaultValue?: string[];\r\n  onSearch?: (keyword?: string | undefined) => void;\r\n  filter?: boolean | ((keyword: string, current: string) => boolean);\r\n  disabled?: boolean;\r\n  maxCount?: number;\r\n};\r\n\r\nconst MultiSelect: React.FC<MultiSelectProps> = ({\r\n  value: valueProp,\r\n  onValueChange: onValueChangeProp,\r\n  onDeselect: onDeselectProp,\r\n  onSelect: onSelectProp,\r\n  defaultValue,\r\n  open: openProp,\r\n  onOpenChange,\r\n  defaultOpen,\r\n  onSearch,\r\n  filter,\r\n  disabled,\r\n  maxCount,\r\n  ...popoverProps\r\n}) => {\r\n  const itemCache = React.useRef(\r\n    new Map<string, MultiSelectOptionItem>(),\r\n  ).current;\r\n\r\n  const handleValueChange = React.useCallback(\r\n    (state: string[]) => {\r\n      if (onValueChangeProp) {\r\n        const items = state.map((value) => itemCache.get(value)!);\r\n\r\n        onValueChangeProp(state, items);\r\n      }\r\n    },\r\n    [onValueChangeProp],\r\n  );\r\n\r\n  const [value, setValue] = useControllableState({\r\n    prop: valueProp,\r\n    defaultProp: defaultValue,\r\n    onChange: handleValueChange,\r\n  });\r\n\r\n  const [open, setOpen] = useControllableState({\r\n    prop: openProp,\r\n    defaultProp: defaultOpen,\r\n    onChange: onOpenChange,\r\n  });\r\n\r\n  const handleSelect = React.useCallback(\r\n    (value: string, item: MultiSelectOptionItem) => {\r\n      setValue((prev) => {\r\n        if (prev?.includes(value)) return prev;\r\n\r\n        onSelectProp?.(value, item);\r\n\r\n        return prev ? [...prev, value] : [value];\r\n      });\r\n    },\r\n    [onSelectProp, setValue],\r\n  );\r\n\r\n  const handleDeselect = React.useCallback(\r\n    (value: string, item: MultiSelectOptionItem) => {\r\n      setValue((prev) => {\r\n        if (!prev || !prev.includes(value)) return prev;\r\n\r\n        onDeselectProp?.(value, item);\r\n\r\n        return prev.filter((v) => v !== value);\r\n      });\r\n    },\r\n    [onDeselectProp, setValue],\r\n  );\r\n\r\n  const contextValue = React.useMemo(() => {\r\n    return {\r\n      value: value || [],\r\n      open: open || false,\r\n      onSearch,\r\n      filter,\r\n      disabled,\r\n      maxCount,\r\n      onSelect: handleSelect,\r\n      onDeselect: handleDeselect,\r\n      itemCache,\r\n    };\r\n  }, [\r\n    value,\r\n    open,\r\n    onSearch,\r\n    filter,\r\n    disabled,\r\n    maxCount,\r\n    handleSelect,\r\n    handleDeselect,\r\n  ]);\r\n\r\n  return (\r\n    <MultiSelectContext.Provider value={contextValue}>\r\n      <PopoverPrimitive.Root\r\n        {...popoverProps}\r\n        open={open}\r\n        onOpenChange={setOpen}\r\n      />\r\n    </MultiSelectContext.Provider>\r\n  );\r\n};\r\n\r\nMultiSelect.displayName = \"MultiSelect\";\r\n\r\ntype MultiSelectTriggerElement = React.ElementRef<typeof Primitive.div>;\r\n\r\ninterface MultiSelectTriggerProps\r\n  extends React.ComponentPropsWithoutRef<typeof Primitive.div> {}\r\n\r\nfunction PreventClick(e: React.MouseEvent | React.TouchEvent) {\r\n  e.preventDefault();\r\n  e.stopPropagation();\r\n}\r\n\r\nconst MultiSelectTrigger = React.forwardRef<\r\n  MultiSelectTriggerElement,\r\n  MultiSelectTriggerProps\r\n>(({ className, children, ...props }, forwardedRef) => {\r\n  const { disabled } = useMultiSelect();\r\n\r\n  return (\r\n    <PopoverPrimitive.Trigger ref={forwardedRef as any} asChild>\r\n      <div\r\n        aria-disabled={disabled}\r\n        data-disabled={disabled}\r\n        {...props}\r\n        className={cn(\r\n          \"border-input ring-offset-background focus:ring-ring flex w-full h-full min-h-10 items-center justify-between whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm shadow-sm focus:outline-none focus:ring-1 [&>span]:line-clamp-1\",\r\n          disabled ? \"cursor-not-allowed opacity-50\" : \"cursor-text\",\r\n          className,\r\n        )}\r\n        onClick={disabled ? PreventClick : props.onClick}\r\n        onTouchStart={disabled ? PreventClick : props.onTouchStart}\r\n      >\r\n        {children}\r\n        <ChevronsUpDown aria-hidden className=\"size-4 shrink-0 opacity-50\" />\r\n      </div>\r\n    </PopoverPrimitive.Trigger>\r\n  );\r\n});\r\n\r\nMultiSelectTrigger.displayName = \"MultiSelectTrigger\";\r\n\r\ninterface MultiSelectValueProps\r\n  extends React.ComponentPropsWithoutRef<typeof Primitive.div> {\r\n  placeholder?: string;\r\n  maxDisplay?: number;\r\n  maxItemLength?: number;\r\n}\r\n\r\nconst MultiSelectValue = React.forwardRef<\r\n  React.ElementRef<typeof Primitive.div>,\r\n  MultiSelectValueProps\r\n>(\r\n  (\r\n    { className, placeholder, maxDisplay, maxItemLength, ...props },\r\n    forwardRef,\r\n  ) => {\r\n    const { value, itemCache, onDeselect } = useMultiSelect();\r\n    const [firstRendered, setFirstRendered] = React.useState(false);\r\n\r\n    const renderRemain =\r\n      maxDisplay && value.length > maxDisplay ? value.length - maxDisplay : 0;\r\n    const renderItems = renderRemain ? value.slice(0, maxDisplay) : value;\r\n\r\n    React.useLayoutEffect(() => {\r\n      setFirstRendered(true);\r\n    }, []);\r\n\r\n    if (!value.length || !firstRendered) {\r\n      return (\r\n        <span className=\"text-muted-foreground pointer-events-none\">\r\n          {placeholder}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <></>\r\n      /*\r\n         <TooltipProvider delayDuration={300}>\r\n            <div\r\n               className={cn(\r\n                  'flex flex-1 flex-wrap items-center gap-1.5 overflow-x-hidden',\r\n                  className,\r\n               )}\r\n               {...props}\r\n               ref={forwardRef}\r\n            >\r\n               {renderItems.map((value) => {\r\n                  const item = itemCache.get(value)\r\n\r\n                  const content = item?.label || value\r\n\r\n                  const child\r\n              = maxItemLength\r\n              && typeof content === 'string'\r\n              && content.length > maxItemLength\r\n                 ? `${content.slice(0, maxItemLength)}...`\r\n                 : content\r\n\r\n                  const el = (\r\n                     <Badge\r\n                        variant=\"outline\"\r\n                        key={value}\r\n                        className=\"group/multi-select-badge cursor-pointer rounded-full pr-1.5\"\r\n                        onClick={(e) => {\r\n                           e.preventDefault()\r\n                           e.stopPropagation()\r\n                           onDeselect(value, item!)\r\n                        }}\r\n                     >\r\n                        <span>{child}</span>\r\n                        <X className=\"text-muted-foreground group-hover/multi-select-badge:text-foreground ml-1 size-3\" />\r\n                     </Badge>\r\n                  )\r\n\r\n                  if (child !== content) {\r\n                     return (\r\n                        <Tooltip key={value}>\r\n                           <TooltipTrigger className=\"inline-flex\">{el}</TooltipTrigger>\r\n                           <TooltipContent\r\n                              side=\"bottom\"\r\n                              align=\"start\"\r\n                              className=\"z-[51]\"\r\n                           >\r\n                              {content}\r\n                           </TooltipContent>\r\n                        </Tooltip>\r\n                     )\r\n                  }\r\n\r\n                  return el\r\n               })}\r\n               {renderRemain\r\n                  ? (\r\n                        <span className=\"text-muted-foreground py-.5 text-xs leading-4\">\r\n                           +\r\n                           {renderRemain}\r\n                        </span>\r\n                     )\r\n                  : null}\r\n            </div>\r\n         </TooltipProvider>\r\n         */\r\n    );\r\n  },\r\n);\r\n\r\nconst MultiSelectSearch = React.forwardRef<\r\n  React.ElementRef<typeof CommandInput>,\r\n  React.ComponentPropsWithoutRef<typeof CommandInput>\r\n>((props, ref) => {\r\n  const { onSearch } = useMultiSelect();\r\n\r\n  return <CommandInput ref={ref} {...props} onValueChange={onSearch} />;\r\n});\r\n\r\nMultiSelectSearch.displayName = \"MultiSelectSearch\";\r\n\r\nconst MultiSelectList = React.forwardRef<\r\n  React.ElementRef<typeof CommandList>,\r\n  React.ComponentPropsWithoutRef<typeof CommandList>\r\n>(({ className, ...props }, ref) => {\r\n  return (\r\n    <CommandList\r\n      ref={ref}\r\n      className={cn(\"max-h-[unset] px-0 py-1\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\n\r\nMultiSelectList.displayName = \"MultiSelectList\";\r\n\r\ninterface MultiSelectContentProps\r\n  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> {}\r\n\r\nconst MultiSelectContent = React.forwardRef<\r\n  React.ElementRef<typeof PopoverPrimitive.Content>,\r\n  MultiSelectContentProps\r\n>(({ className, children, ...props }, ref) => {\r\n  const context = useMultiSelect();\r\n\r\n  const fragmentRef = React.useRef<DocumentFragment>();\r\n\r\n  if (!fragmentRef.current && typeof window !== \"undefined\")\r\n    fragmentRef.current = document.createDocumentFragment();\r\n\r\n  if (!context.open) {\r\n    return fragmentRef.current\r\n      ? createPortal(<Command>{children}</Command>, fragmentRef.current)\r\n      : null;\r\n  }\r\n\r\n  return (\r\n    <PopoverPrimitive.Portal forceMount>\r\n      <PopoverPrimitive.Content\r\n        ref={ref}\r\n        align=\"start\"\r\n        sideOffset={4}\r\n        collisionPadding={10}\r\n        className={cn(\r\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-full rounded-md border p-0 shadow-md outline-none\",\r\n        )}\r\n        style={\r\n          {\r\n            \"--radix-select-content-transform-origin\":\r\n              \"var(--radix-popper-transform-origin)\",\r\n            \"--radix-select-content-available-width\":\r\n              \"var(--radix-popper-available-width)\",\r\n            \"--radix-select-content-available-height\":\r\n              \"var(--radix-popper-available-height)\",\r\n            \"--radix-select-trigger-width\": \"var(--radix-popper-anchor-width)\",\r\n            \"--radix-select-trigger-height\":\r\n              \"var(--radix-popper-anchor-height)\",\r\n          } as any\r\n        }\r\n        {...props}\r\n      >\r\n        <Command\r\n          className={cn(\r\n            \"max-h-96 w-full min-w-[var(--radix-select-trigger-width)] px-1\",\r\n            className,\r\n          )}\r\n          shouldFilter={!context.onSearch}\r\n        >\r\n          {children}\r\n        </Command>\r\n      </PopoverPrimitive.Content>\r\n    </PopoverPrimitive.Portal>\r\n  );\r\n});\r\n\r\ntype MultiSelectItemProps = React.ComponentPropsWithoutRef<typeof CommandItem> &\r\n  Partial<MultiSelectOptionItem> & {\r\n    onSelect?: (value: string, item: MultiSelectOptionItem) => void;\r\n    onDeselect?: (value: string, item: MultiSelectOptionItem) => void;\r\n  };\r\n\r\nconst MultiSelectItem = React.forwardRef<\r\n  React.ElementRef<typeof CommandItem>,\r\n  MultiSelectItemProps\r\n>(\r\n  (\r\n    {\r\n      value,\r\n      onSelect: onSelectProp,\r\n      onDeselect: onDeselectProp,\r\n      children,\r\n      label,\r\n      disabled: disabledProp,\r\n      className,\r\n      ...props\r\n    },\r\n    forwardedRef,\r\n  ) => {\r\n    const {\r\n      value: contextValue,\r\n      maxCount,\r\n      onSelect,\r\n      onDeselect,\r\n      itemCache,\r\n    } = useMultiSelect();\r\n\r\n    const item = React.useMemo(() => {\r\n      return value\r\n        ? {\r\n            value,\r\n            label:\r\n              label || (typeof children === \"string\" ? children : undefined),\r\n          }\r\n        : undefined;\r\n    }, [value, label, children]);\r\n\r\n    const selected = Boolean(value && contextValue.includes(value));\r\n\r\n    React.useEffect(() => {\r\n      if (value) itemCache.set(value, item!);\r\n    }, [selected, value, item]);\r\n\r\n    const disabled = Boolean(\r\n      disabledProp ||\r\n        (!selected && maxCount && contextValue.length >= maxCount),\r\n    );\r\n\r\n    const handleClick = () => {\r\n      if (selected) {\r\n        onDeselectProp?.(value!, item!);\r\n        onDeselect(value!, item!);\r\n      } else {\r\n        itemCache.set(value!, item!);\r\n        onSelectProp?.(value!, item!);\r\n        onSelect(value!, item!);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <CommandItem\r\n        {...props}\r\n        value={value}\r\n        className={cn(\r\n          disabled && \"text-muted-foreground cursor-not-allowed\",\r\n          className,\r\n        )}\r\n        disabled={disabled}\r\n        onSelect={!disabled && value ? handleClick : undefined}\r\n        ref={forwardedRef}\r\n      >\r\n        <span className=\"mr-2 truncate\">{children || label || value}</span>\r\n        {selected ? <Check className=\"ml-auto size-4 shrink-0\" /> : null}\r\n      </CommandItem>\r\n    );\r\n  },\r\n);\r\n\r\nconst MultiSelectGroup = React.forwardRef<\r\n  React.ElementRef<typeof CommandGroup>,\r\n  React.ComponentPropsWithoutRef<typeof CommandGroup>\r\n>((props, forwardRef) => {\r\n  return <CommandGroup {...props} ref={forwardRef} />;\r\n});\r\n\r\nMultiSelectGroup.displayName = \"MultiSelectGroup\";\r\n\r\nconst MultiSelectSeparator = React.forwardRef<\r\n  React.ElementRef<typeof CommandSeparator>,\r\n  React.ComponentPropsWithoutRef<typeof CommandSeparator>\r\n>((props, forwardRef) => {\r\n  return <CommandSeparator {...props} ref={forwardRef} />;\r\n});\r\n\r\nMultiSelectSeparator.displayName = \"MultiSelectSeparator\";\r\n\r\nconst MultiSelectEmpty = React.forwardRef<\r\n  React.ElementRef<typeof CommandEmpty>,\r\n  React.ComponentPropsWithoutRef<typeof CommandEmpty>\r\n>(({ children = \"No Content\", ...props }, forwardRef) => {\r\n  return (\r\n    <CommandEmpty {...props} ref={forwardRef}>\r\n      {children}\r\n    </CommandEmpty>\r\n  );\r\n});\r\n\r\nMultiSelectEmpty.displayName = \"MultiSelectEmpty\";\r\n\r\nexport interface MultiSelectOptionSeparator {\r\n  type: \"separator\";\r\n}\r\n\r\nexport interface MultiSelectOptionGroup {\r\n  heading?: React.ReactNode;\r\n  value?: string;\r\n  children: MultiSelectOption[];\r\n}\r\n\r\nexport type MultiSelectOption =\r\n  | Pick<\r\n      MultiSelectItemProps,\r\n      \"value\" | \"label\" | \"disabled\" | \"onSelect\" | \"onDeselect\"\r\n    >\r\n  | MultiSelectOptionSeparator\r\n  | MultiSelectOptionGroup;\r\n\r\nfunction renderMultiSelectOptions(list: MultiSelectOption[]) {\r\n  return list.map((option, index) => {\r\n    if (\"type\" in option) {\r\n      if (option.type === \"separator\")\r\n        return <MultiSelectSeparator key={index} />;\r\n\r\n      return null;\r\n    }\r\n\r\n    if (\"children\" in option) {\r\n      return (\r\n        <MultiSelectGroup\r\n          key={option.value || index}\r\n          value={option.value}\r\n          heading={option.heading}\r\n        >\r\n          {renderMultiSelectOptions(option.children)}\r\n        </MultiSelectGroup>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <MultiSelectItem key={option.value} {...option}>\r\n        {option.label}\r\n      </MultiSelectItem>\r\n    );\r\n  });\r\n}\r\n\r\nexport {\r\n  MultiSelect,\r\n  MultiSelectTrigger,\r\n  MultiSelectValue,\r\n  MultiSelectSearch,\r\n  MultiSelectContent,\r\n  MultiSelectList,\r\n  MultiSelectItem,\r\n  MultiSelectGroup,\r\n  MultiSelectSeparator,\r\n  MultiSelectEmpty,\r\n  renderMultiSelectOptions,\r\n};\r\n"
    }
  ],
  "type": "components:ui"
}