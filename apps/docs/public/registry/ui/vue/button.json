{
  "name": "button",
  "files": [
    {
      "name": "button.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { defineProps, withDefaults, computed, type VNode } from 'vue'\r\nimport type { HTMLAttributes, FunctionalComponent } from 'vue'\r\nimport { type PrimitiveProps } from 'radix-vue'\r\nimport { cn } from '@/lib/utils'\r\nimport { tv, type VariantProps } from 'tailwind-variants'\r\nimport { LoaderIcon } from \"@/lib/icons\"\r\n\r\nconst buttonStyles = tv(\r\n  {\r\n    base: \"inline-flex gap-2 cursor-pointer items-center justify-center whitespace-nowrap rounded-md leading-normal text-sm shrink-0 font-medium ring-offset-background transition-colors disabled:cursor-default disabled:bg-bg-disabled disabled:text-fg-disabled\",\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-neutral hover:bg-neutral-hover active:bg-neutral-active text-neutral-fg\",\r\n        primary: \"bg-primary hover:bg-primary-hover active:bg-primary-active text-primary-fg\",\r\n        secondary: \"bg-secondary hover:bg-secondary-hover active:bg-secondary-active text-secondary-fg\",\r\n        quiet: \"bg-transparent hover:bg-neutral/10 active:bg-neutral/20 text-fg\",\r\n        outline: \"border border-border bg-transparent hover:bg-neutral/10 active:bg-neutral/20 text-fg disabled:border-disabled disabled:bg-transparent\",\r\n        success: \"bg-success hover:bg-success-hover active:bg-success-active text-success-fg\",\r\n        warning: \"bg-warning hover:bg-warning-hover active:bg-warning-active text-warning-fg\",\r\n        danger: \"bg-danger hover:bg-danger-hover active:bg-danger-active text-danger-fg\",\r\n      },\r\n      size: {\r\n        sm: \"h-8 px-3 [&_svg]:w-4 [&_svg]:h-4\",\r\n        md: \"h-9 px-4 [&_svg]:w-4 [&_svg]:h-4\",\r\n        lg: \"h-10 px-5 [&_svg]:w-5 [&_svg]:h-5\",\r\n      },\r\n      shape: {\r\n        rectangle: \"\",\r\n        square: \"\",\r\n        circle: \"rounded-full\",\r\n      },\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        size: \"sm\",\r\n        shape: [\"square\", \"circle\"],\r\n        className: \"w-8 px-0\",\r\n      },\r\n      {\r\n        size: \"md\",\r\n        shape: [\"square\", \"circle\"],\r\n        className: \"w-9 px-0\",\r\n      },\r\n      {\r\n        size: \"lg\",\r\n        shape: [\"square\", \"circle\"],\r\n        className: \"w-10 px-0\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    responsiveVariants: [\"sm\", \"lg\"],\r\n  }\r\n)\r\n\r\ntype ButtonStyles = VariantProps<typeof buttonStyles>\r\n\r\ninterface Props extends PrimitiveProps {\r\n  variant?: ButtonStyles['variant']\r\n  size?: ButtonStyles['size']\r\n  shape?: ButtonStyles['shape']\r\n  isLoading?: boolean\r\n  prefix?: VNode | FunctionalComponent | string\r\n  suffix?: VNode | FunctionalComponent | string\r\n  class?: HTMLAttributes['class']\r\n  isDisabled?: boolean\r\n  href?: string\r\n  target?: '_blank' | '_self' | '_parent' | '_top' | string\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  as: 'button',\r\n  variant: 'default',\r\n  size: 'md',\r\n  shape: 'rectangle',\r\n  isDisabled: false,\r\n})\r\n\r\nconst classes = computed(() => \r\n  cn(buttonStyles({ variant: props.variant, size: props.size, shape: props.shape }), props.class)\r\n)\r\n\r\nconst showLoader = computed(() => props.isLoading)\r\n</script>\r\n\r\n<template>\r\n  <component\r\n    :is=\"props.href ? 'a' : 'button'\"\r\n    :href=\"props.href || undefined\"\r\n    :target=\"props.target\"\r\n    :class=\"classes\"\r\n    :disabled=\"props.isDisabled\"\r\n  >\r\n    <span v-if=\"showLoader\">\r\n      <LoaderIcon aria-label=\"loading\" class=\"animate-spin\" />\r\n    </span>\r\n    <span v-else-if=\"props.prefix\">\r\n      <component :is=\"typeof props.prefix === 'string' ? 'span' : props.prefix\">\r\n        {{ typeof props.prefix === 'string' ? props.prefix : '' }}\r\n      </component>\r\n    </span>\r\n    <slot />\r\n    <span v-if=\"props.suffix\">\r\n      <component :is=\"typeof props.suffix === 'string' ? 'span' : props.suffix\">\r\n        {{ typeof props.suffix === 'string' ? props.suffix : '' }}\r\n      </component>\r\n    </span>\r\n  </component>\r\n</template>\r\n"
    }
  ],
  "type": "components:ui"
}