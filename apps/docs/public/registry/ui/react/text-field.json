{
  "name": "text-field",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/text-field.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\n\nconst inputStyles = tv({\n  base: \"w-full max-w-96 rounded-md text-sm ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n  variants: {\n    variant: {\n      default:\n        \"bg-bg hover:bg-input-background-hover focus:bg-input-background-active text-input-foreground border border-input-border\",\n      primary:\n        \"bg-primary hover:bg-primary-hover focus:bg-primary-active text-primary-foreground border border-primary-border\",\n      secondary:\n        \"bg-secondary hover:bg-secondary-hover focus:bg-secondary-active text-secondary-foreground border border-secondary-border\",\n      outline:\n        \"bg-transparent border border-input-border hover:bg-input-background-hover focus:bg-input-background-active text-input-foreground\",\n      quiet: \"bg-transparent text-input-foreground\",\n    },\n    inputSize: {\n      sm: \"h-8 text-sm  px-2\",\n      md: \"h-10 text-base px-4\",\n      lg: \"h-12 text-lg  px-4\",\n    },\n    shape: {\n      rectangle: \"rounded-md\",\n      square: \"rounded-none\",\n      circle: \"rounded-full\",\n    },\n    invalid: {\n      true: \"border-danger bg-danger-background text-danger-foreground focus-visible:ring-danger\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    inputSize: \"md\",\n    shape: \"rectangle\",\n  },\n});\n\ntype TextFieldProps = Omit<InputProps, \"children\"> &\n  VariantProps<typeof inputStyles> & {\n    label?: string;\n    description?: string;\n    prefix?: React.ReactNode;\n    suffix?: React.ReactNode;\n    isInvalid?: boolean;\n    errorMessage?: string;\n    isLoading?: boolean;\n    loaderPosition?: \"prefix\" | \"suffix\";\n    placeholder?: string;\n    contextualHelp?: React.ReactNode;\n    inputSize?: \"sm\" | \"md\" | \"lg\";\n  };\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  (\n    {\n      label,\n      description,\n      className,\n      type,\n      prefix,\n      suffix,\n      isInvalid,\n      errorMessage,\n      contextualHelp,\n      inputSize,\n      shape,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <>\n        {label && (\n          <label className=\"text-sm font-medium text-gray-700 flex items-center gap-1\">\n            {label}\n            {contextualHelp && <span className=\"ml-2\">{contextualHelp}</span>}\n          </label>\n        )}\n        {prefix && (\n          <span className=\"absolute left-3 inset-y-0 flex items-center z-40 text-gray-400\">\n            {prefix}\n          </span>\n        )}\n        <input\n          type={type}\n          className={cn(\n            inputStyles({ invalid: isInvalid, inputSize, shape }),\n            className,\n          )}\n          ref={ref}\n          {...props}\n        />\n        {suffix && (\n          <span className=\"relative right-3 inset-y-0 flex z-20 items-center  text-gray-400\">\n            {suffix}\n          </span>\n        )}\n        {isInvalid && errorMessage && (\n          <p className=\"text-xs text-danger mt-1\">{errorMessage}</p>\n        )}\n        {!isInvalid && description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n      </>\n    );\n  },\n);\nTextField.displayName = \"TextField\";\n\nexport type { TextFieldProps };\nexport { TextField };\n",
      "type": "registry:ui",
      "target": "components/ui/text-field.tsx"
    }
  ]
}