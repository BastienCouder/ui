
// This file is autogenerated by scripts/build-preview-imports.ts
// Do not edit this file directly.
import React from "react";

export const previews = {
  "demos/components/core/angular/buttons/button/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/default")),
    code: [{"title":"default.ts","code":"import { Component } from \"@angular/core\";\nimport { HlmButtonModule } from \"@/lib/components/core/default/angular/button/hlm-button.module\";\n\n@Component({\n  selector: \"button-preview\",\n  standalone: true,\n  imports: [HlmButtonModule],\n  template: `<Button hlmBtn>Button</Button>`,\n})\nexport class ButtonPreviewComponent {}\n"}]
  },
  "demos/components/core/react/buttons/button/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/default")),
    code: [{"title":"default.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\n\nexport default function ButtonDemo() {\n  return <Button>Button</Button>;\n}\n"}]
  },
  "demos/components/core/react/buttons/button/variants": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/variants")),
    code: [{"title":"variants.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\n\nconst variants = [\n  \"default\",\n  \"primary\",\n  \"secondary\",\n  \"outline\",\n  \"quiet\",\n  \"success\",\n  \"warning\",\n  \"danger\",\n] as const;\n\nexport default function ButtonDemo() {\n  return (\n    <div className=\"grid grid-cols-4 gap-2\">\n      {variants.map((variant) => (\n        <Button key={variant} variant={variant}>\n          {variant}\n        </Button>\n      ))}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/button/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/sizes")),
    code: [{"title":"sizes.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\n\nexport default function ButtonDemo() {\n  return (\n    <div className=\"flex w-full items-center justify-center gap-4\">\n      <Button size=\"sm\">Button</Button>\n      <Button size=\"md\">Button</Button>\n      <Button size=\"lg\">Button</Button>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/button/shapes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/shapes")),
    code: [{"title":"shapes.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { UploadIcon } from \"@/lib/icons\";\n\nexport default function ButtonDemo() {\n  return (\n    <div className=\"flex items-center justify-center gap-4\">\n      <Button size=\"sm\" shape=\"square\" aria-label=\"upload\">\n        <UploadIcon />\n      </Button>\n      <Button size=\"md\" shape=\"square\" aria-label=\"upload\">\n        <UploadIcon />\n      </Button>\n      <Button size=\"lg\" shape=\"square\" aria-label=\"upload\">\n        <UploadIcon />\n      </Button>\n      <Button size=\"sm\" shape=\"circle\" aria-label=\"upload\">\n        <UploadIcon />\n      </Button>\n      <Button size=\"md\" shape=\"circle\" aria-label=\"upload\">\n        <UploadIcon />\n      </Button>\n      <Button size=\"lg\" shape=\"circle\" aria-label=\"upload\">\n        <UploadIcon />\n      </Button>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/button/prefix-and-suffix": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/prefix-and-suffix")),
    code: [{"title":"prefix-and-suffix.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { UploadIcon } from \"@/lib/icons\";\n\nexport default function ButtonDemo() {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Button prefix={<UploadIcon />}>Upload</Button>\n      <Button suffix={<UploadIcon />}>Upload</Button>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/button/loading": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/loading")),
    code: [{"title":"loading.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\n\nexport default function ButtonDemo() {\n  return (\n    <div className=\"flex w-full items-center justify-center gap-2\">\n      <Button size=\"sm\" isLoading>\n        Button\n      </Button>\n      <Button size=\"md\" isLoading>\n        Button\n      </Button>\n      <Button size=\"lg\" isLoading>\n        Button\n      </Button>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/button/disabled": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/disabled")),
    code: [{"title":"disabled.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\n\nexport default function ButtonDemo() {\n  return <Button isDisabled>Button</Button>;\n}\n"}]
  },
  "demos/components/core/react/buttons/button/link-button": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/link-button")),
    code: [{"title":"link-button.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { LogInIcon } from \"@/lib/icons\";\n\nexport default function ButtonDemo() {\n  return (\n    <Button href=\"/login\" prefix={<LogInIcon />} target=\"_blank\">\n      Login\n    </Button>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/star-rating/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/star-rating/default")),
    code: [{"title":"default.tsx","code":"\"use client\";\n\nimport React from \"react\"\nimport { StarRating } from \"@/lib/components/core/default/react/buttons/star-rating\"\n\nexport default function StarRatingDemo() {\n    return <StarRating defaultValue={3} />\n}\n"}]
  },
  "demos/components/core/react/buttons/star-rating/color": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/star-rating/color")),
    code: [{"title":"color.tsx","code":"\"use client\";\n\nimport React from \"react\"\nimport { StarRating } from \"@/lib/components/core/default/react/buttons/star-rating\"\n\nexport default function StarRatingDemo() {\n    return <StarRating defaultValue={3} iconProps={{ className: 'fill-red-500 stroke-red-500' }} />\n}\n"}]
  },
  "demos/components/core/react/buttons/star-rating/icon": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/star-rating/icon")),
    code: [{"title":"icon.tsx","code":"\"use client\";\n\nimport React from \"react\"\nimport { StarRating } from \"@/lib/components/core/default/react/buttons/star-rating\"\nimport { Heart } from \"lucide-react\"\n\nexport default function StarRatingDemo() {\n    return <StarRating defaultValue={3} icon={Heart} />\n}\n"}]
  },
  "demos/components/core/react/buttons/toggle/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/toggle/default")),
    code: [{"title":"default.tsx","code":"import { Toggle } from \"@/lib/components/core/default/react/buttons/toggle\";\nimport { PinIcon } from \"@/lib/icons\";\n\nexport default function ToggleDemo() {\n  return <Toggle><PinIcon /></Toggle>;\n}\n"}]
  },
  "demos/components/core/react/buttons/toggle/variants": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/toggle/variants")),
    code: [{"title":"variants.tsx","code":"import { Toggle } from \"@/lib/components/core/default/react/buttons/toggle\";\nimport { PinIcon } from \"@/lib/icons\";\n\nconst variants = [\n    \"outline\",\n    \"quiet\",\n    \"accent\"\n] as const;\n\n\nexport default function ToggleDemo() {\n    return (\n        <div className=\"flex space-x-4\">\n            {variants.map((variant) => (\n                <Toggle key={variant} variant={variant}>\n                    <PinIcon />\n                </Toggle>))}\n        </div>\n    )\n}"}]
  },
  "demos/components/core/react/buttons/toggle/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/toggle/sizes")),
    code: [{"title":"sizes.tsx","code":"import { Toggle } from \"@/lib/components/core/default/react/buttons/toggle\";\nimport { PinIcon } from \"@/lib/icons\";\n\nexport default function ToggleDemo() {\n  return (\n    <div className=\"flex w-full items-center justify-center gap-4\">\n      <Toggle size=\"sm\"><PinIcon /></Toggle>\n      <Toggle size=\"md\"><PinIcon /></Toggle>\n      <Toggle size=\"lg\"><PinIcon /></Toggle>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/toggle/shapes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/toggle/shapes")),
    code: [{"title":"shapes.tsx","code":"import { Toggle } from \"@/lib/components/core/default/react/buttons/toggle\";\nimport { PinIcon } from \"@/lib/icons\";\n\nexport default function ToggleDemo() {\n  return (\n    <div className=\"flex w-full items-center justify-center gap-4\">\n      <Toggle shape=\"square\"><PinIcon /></Toggle>\n      <Toggle shape=\"circle\"><PinIcon /></Toggle>\n      <Toggle shape=\"rectangle\"><PinIcon /></Toggle>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/buttons/toggle/disabled": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/toggle/disabled")),
    code: [{"title":"disabled.tsx","code":"import { Toggle } from \"@/lib/components/core/default/react/buttons/toggle\";\nimport { PinIcon } from \"@/lib/icons\";\n\nexport default function ToggleDemo() {\n    return <Toggle isDisabled><PinIcon /></Toggle>;\n}\n"}]
  },
  "demos/components/core/react/buttons/toggle/uncontrolled": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/toggle/uncontrolled")),
    code: [{"title":"uncontrolled.tsx","code":"import { Toggle } from \"@/lib/components/core/default/react/buttons/toggle\";\nimport { PinIcon } from \"@/lib/icons\";\n\nexport default function ToggleDemo() {\n    return <Toggle defaultSelected><PinIcon /></Toggle>;\n}\n"}]
  },
  "demos/components/core/react/buttons/toggle/controlled": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/toggle/controlled")),
    code: [{"title":"controlled.tsx","code":"\"use client\";\n\nimport { Toggle } from \"@/lib/components/core/default/react/buttons/toggle\";\nimport { PinIcon } from \"@/lib/icons\";\nimport { useState } from \"react\";\n\nexport default function ToggleDemo() {\n  const [isSelected, setSelected] = useState(true);\n\n  return (\n    <Toggle isSelected={isSelected} onPressedChange={setSelected}>\n      <PinIcon className=\"rotate-45\" />\n    </Toggle>\n  );\n}\n\n"}]
  },
  "demos/components/core/react/data-display/avatar/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/avatar/default")),
    code: [{"title":"default.tsx","code":"import { Avatar } from \"@/lib/components/core/default/react/data-display/avatar\";\n\nexport default function AvatarDemo() {\n  return (\n    <Avatar\n      className=\"bg-white/70\"\n      src=\"/images/profile-default.png\"\n      alt=\"@bastiencouder\"\n      fallback=\"B\"\n    />\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/avatar/shape": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/avatar/shape")),
    code: [{"title":"shape.tsx","code":"import { Avatar } from \"@/lib/components/core/default/react/data-display/avatar\";\n\nexport default function AvatarDemo() {\n  return (\n    <div className=\"space-x-4\">\n      <Avatar\n        className=\"bg-white/70\"\n        src=\"/images/profile-default.png\"\n        alt=\"@bastiencouder\"\n        fallback=\"B\"\n        shape=\"square\"\n      />\n      <Avatar\n        className=\"bg-white/70\"\n        src=\"/images/profile-default.png\"\n        alt=\"@bastiencouder\"\n        fallback=\"B\"\n        shape=\"circle\"\n      />\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/avatar/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/avatar/sizes")),
    code: [{"title":"sizes.tsx","code":"import { Avatar } from \"@/lib/components/core/default/react/data-display/avatar\";\n\nexport default function AvatarDemo() {\n  return (\n    <div className=\"space-x-4\">\n      {([\"sm\", \"md\", \"lg\"] as const).map((size) => (\n        <Avatar\n          key={size}\n          size={size}\n          src=\"/images/profile-default.png\"\n          alt=\"@bastiencouder\"\n          fallback=\"B\"\n          className=\"bg-white/70\"\n        />\n      ))}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/avatar/composition": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/avatar/composition")),
    code: [{"title":"composition.tsx","code":"import React from \"react\";\nimport { UserIcon } from \"@/lib/icons\";\nimport {\n  AvatarFallback,\n  AvatarImage,\n  AvatarPlaceholder,\n  AvatarRoot,\n} from \"@/lib/components/core/default/react/data-display/avatar\";\n\nexport default function AvatarDemo() {\n  return (\n    <AvatarRoot className=\"bg-white/70\">\n      <AvatarImage src=\"/images/profile-default.png\" alt=\"@bastiencouder\" />\n      <AvatarFallback>B</AvatarFallback>\n      <AvatarPlaceholder>\n        <UserIcon className=\"size-5\" />\n      </AvatarPlaceholder>\n    </AvatarRoot>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/badge/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/badge/default")),
    code: [{"title":"default.tsx","code":"import { Badge } from \"@/lib/components/core/default/react/data-display/badge\";\n\nexport default function BadgeDemo() {\n  return <Badge>Badge</Badge>;\n}\n"}]
  },
  "demos/components/core/react/data-display/badge/variants": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/badge/variants")),
    code: [{"title":"variants.tsx","code":"import { Badge } from \"@/lib/components/core/default/react/data-display/badge\";\n\nexport default function BadgeDemo() {\n  return (\n    <div className=\"flex flex-col items-start gap-2\">\n      <Flex>\n        <Badge variant=\"neutral\">Neutral</Badge>\n        <Badge variant=\"outline\">Outline</Badge>\n        <Badge variant=\"primary\">Primary</Badge>\n      </Flex>\n      <Flex>\n        <Badge variant=\"success\">Success</Badge>\n        <Badge variant=\"danger\">Danger</Badge>\n        <Badge variant=\"warning\">Warning</Badge>\n        <Badge variant=\"accent\">Accent</Badge>\n      </Flex>\n    </div>\n  );\n}\n\nconst Flex = (props: React.HTMLAttributes<HTMLDivElement>) => (\n  <div {...props} className=\"flex items-center gap-2\" />\n);\n"}]
  },
  "demos/components/core/react/data-display/badge/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/badge/sizes")),
    code: [{"title":"sizes.tsx","code":"import { Badge } from \"@/lib/components/core/default/react/data-display/badge\";\n\nexport default function BadgeDemo() {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Badge variant=\"primary\" size=\"sm\">\n        Small\n      </Badge>\n      <Badge variant=\"primary\" size=\"md\">\n        Medium\n      </Badge>\n      <Badge variant=\"primary\" size=\"lg\">\n        Large\n      </Badge>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/badge/icon": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/badge/icon")),
    code: [{"title":"icon.tsx","code":"import { Badge } from \"@/lib/components/core/default/react/data-display/badge\";\nimport { ShieldIcon } from \"@/lib/icons\";\n\nexport default function BadgeDemo() {\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Badge icon={<ShieldIcon />} size=\"sm\">\n        Badge\n      </Badge>\n      <Badge icon={<ShieldIcon />} size=\"md\">\n        Badge\n      </Badge>\n      <Badge icon={<ShieldIcon />} size=\"lg\">\n        Badge\n      </Badge>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/card/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/card/default")),
    code: [{"title":"default.tsx","code":"\"use client\";\n\nimport { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/lib/components/core/default/react/data-display/card\";\nimport { cn } from \"@/lib/utils\";\nimport { BellRing, Check } from \"lucide-react\";\nimport { Switch } from \"react-aria-components\";\n\nconst notifications = [\n  {\n    title: \"Your call has been confirmed.\",\n    description: \"1 hour ago\",\n  },\n  {\n    title: \"You have a new message!\",\n    description: \"1 hour ago\",\n  },\n  {\n    title: \"Your subscription is expiring soon!\",\n    description: \"2 hours ago\",\n  },\n];\n\ntype CardProps = React.ComponentProps<typeof Card>;\n\nexport default function CardDemo({ className, ...props }: CardProps) {\n  return (\n    <Card className={cn(\"w-[380px]\", className)} {...props}>\n      <CardHeader>\n        <CardTitle>Notifications</CardTitle>\n        <CardDescription>You have 3 unread messages.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid gap-4\">\n        <div className=\" flex items-center space-x-4 rounded-md border p-4\">\n          <BellRing />\n          <div className=\"flex-1 space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">\n              Push Notifications\n            </p>\n            <p className=\"text-muted-foreground text-sm\">\n              Send notifications to device.\n            </p>\n          </div>\n          <Switch />\n        </div>\n        <div>\n          {notifications.map((notification, index) => (\n            <div\n              key={index}\n              className=\"mb-4 grid grid-cols-[25px_1fr] items-start pb-4 last:mb-0 last:pb-0\"\n            >\n              <span className=\"flex size-2 translate-y-1 rounded-full bg-sky-500\" />\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium leading-none\">\n                  {notification.title}\n                </p>\n                <p className=\"text-muted-foreground text-sm\">\n                  {notification.description}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\">\n          <Check className=\"mr-2 size-4\" /> Mark all as read\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/card/variants": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/card/variants")),
    code: [{"title":"variants.tsx","code":"import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/lib/components/core/default/react/data-display/card\";\n\nconst variants = [\n  \"default\",\n  \"outline\",\n  \"success\",\n  \"warning\",\n  \"danger\",\n] as const;\n\nexport default function Demo() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      {variants.map((variant) => (\n        <Card key={variant} variant={variant}>\n          <CardHeader>\n            <CardTitle>{variant}</CardTitle>\n          </CardHeader>\n        </Card>\n      ))}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/card/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/card/sizes")),
    code: [{"title":"sizes.tsx","code":"import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/lib/components/core/default/react/data-display/card\";\n\nconst sizes = [\"sm\", \"md\", \"lg\"] as const;\n\nexport default function Demo() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      {sizes.map((size) => (\n        <Card key={size} size={size}>\n          <CardHeader>\n            <CardTitle>{size}</CardTitle>\n          </CardHeader>\n        </Card>\n      ))}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/card/sections": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/card/sections")),
    code: [{"title":"sections.tsx","code":"import {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/lib/components/core/default/react/data-display/card\";\n\nconst sizes = [\"sm\", \"md\", \"lg\"] as const;\n\nexport default function Demo() {\n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      {sizes.map((size) => (\n        <Card key={size} size={size}>\n          <CardHeader>\n            <CardTitle>{size}</CardTitle>\n          </CardHeader>\n        </Card>\n      ))}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/divider/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/divider/default")),
    code: [{"title":"default.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { Divider } from \"@/lib/components/core/default/react/data-display/divider\";\n\nexport default function DividerDemo() {\n  return (\n    <div className=\"w-full mx-4\">\n      <Divider className=\"gap-4\">\n        <Button>Default</Button>\n      </Divider>\n    </div>\n  );\n}"}]
  },
  "demos/components/core/react/data-display/divider/orientation": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/divider/orientation")),
    code: [{"title":"orientation.tsx","code":"import { Divider } from \"@/lib/components/core/default/react/data-display/divider\";\n\nexport default function DividerDemo() {\n  return (\n    <div className=\"w-full mx-4\">\n      <Divider orientation=\"vertical\" className=\"gap-4 min-h-[200px]\">\n        Vertical\n      </Divider>\n      <Divider orientation=\"horizontal\" className=\"gap-4\">\n        Horizontal\n      </Divider>\n    </div>\n  );\n}"}]
  },
  "demos/components/core/react/data-display/divider/position": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/divider/position")),
    code: [{"title":"position.tsx","code":"import { Divider } from \"@/lib/components/core/default/react/data-display/divider\";\n\nexport default function DividerDemo() {\n  return (\n    <div className=\"w-full mx-4\">\n      <Divider className=\"gap-4\">Gap 4</Divider>\n      <Divider position=\"after\">After</Divider>\n      <Divider position=\"before\">Before</Divider>\n    </div>\n  );\n}"}]
  },
  "demos/components/core/react/data-display/separator/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/separator/default")),
    code: [{"title":"default.tsx","code":"import { Separator } from \"@/lib/components/core/default/react/data-display/separator\";\n\nexport default function SeparatorDemo() {\n  return (\n    <div className=\"space-y-2 rounded-md border p-4\">\n      <div>\n        <h3 className=\"font-bold\">UI</h3>\n        <p className=\"text-sm text-muted-fg\">\n          Tools for building high-quality, accessible UI.\n        </p>\n      </div>\n      <Separator className=\"my-4\" />\n      <div className=\"flex h-5 items-center space-x-4 text-sm\">\n        <div>Docs</div>\n        <Separator orientation=\"vertical\" />\n        <div>Components</div>\n        <Separator orientation=\"vertical\" />\n        <div>Hooks</div>\n        <Separator orientation=\"vertical\" />\n        <div>Themes</div>\n      </div>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/separator/orientation": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/separator/orientation")),
    code: [{"title":"orientation.tsx","code":"import { Separator } from \"@/lib/components/core/default/react/data-display/separator\";\n\nexport default function SeparatorDemo() {\n  return (\n    <div className=\"flex items-center gap-10\">\n      <div className=\"flex h-5 items-center gap-2 text-sm\">\n        <div>Components</div>\n        <Separator orientation=\"vertical\" />\n        <div>Hooks</div>\n      </div>\n      <div className=\"flex flex-col items-center gap-2 text-sm\">\n        <div>Components</div>\n        <Separator orientation=\"horizontal\" />\n        <div>Hooks</div>\n      </div>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/data-display/table/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/table/default")),
    code: [{"title":"default.tsx","code":"\"use client\";\n\nimport { Table, TableBody, TableHeader ,TableCaption, TableCell, TableFooter, TableHead, TableRow } from \"@/lib/components/core/default/react/data-display/table\"\n\nconst invoices = [\n  {\n    invoice: \"INV001\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$250.00\",\n    paymentMethod: \"Credit Card\",\n  },\n  {\n    invoice: \"INV002\",\n    paymentStatus: \"Pending\",\n    totalAmount: \"$150.00\",\n    paymentMethod: \"PayPal\",\n  },\n  {\n    invoice: \"INV003\",\n    paymentStatus: \"Unpaid\",\n    totalAmount: \"$350.00\",\n    paymentMethod: \"Bank Transfer\",\n  },\n  {\n    invoice: \"INV004\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$450.00\",\n    paymentMethod: \"Credit Card\",\n  },\n  {\n    invoice: \"INV005\",\n    paymentStatus: \"Paid\",\n    totalAmount: \"$550.00\",\n    paymentMethod: \"PayPal\",\n  },\n  {\n    invoice: \"INV006\",\n    paymentStatus: \"Pending\",\n    totalAmount: \"$200.00\",\n    paymentMethod: \"Bank Transfer\",\n  },\n  {\n    invoice: \"INV007\",\n    paymentStatus: \"Unpaid\",\n    totalAmount: \"$300.00\",\n    paymentMethod: \"Credit Card\",\n  },\n]\n\nexport default function TableDemo() {\n  return (\n    <Table>\n      <TableCaption>A list of your recent invoices.</TableCaption>\n      <TableHeader>\n        <TableRow>\n          <TableHead className=\"w-[100px]\">Invoice</TableHead>\n          <TableHead>Status</TableHead>\n          <TableHead>Method</TableHead>\n          <TableHead className=\"text-right\">Amount</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {invoices.map((invoice) => (\n          <TableRow key={invoice.invoice}>\n            <TableCell className=\"font-medium\">{invoice.invoice}</TableCell>\n            <TableCell>{invoice.paymentStatus}</TableCell>\n            <TableCell>{invoice.paymentMethod}</TableCell>\n            <TableCell className=\"text-right\">{invoice.totalAmount}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell colSpan={3}>Total</TableCell>\n          <TableCell className=\"text-right\">$2,500.00</TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  )\n}\n"}]
  },
  "demos/components/core/react/data-display/table/data-table": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/data-display/table/data-table")),
    code: [{"title":"data-table.tsx","code":"\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\nimport { Checkbox } from \"@/lib/components/core/default/react/input/checkbox\"\nimport { Button } from \"@/lib/components/core/default/react/buttons/button\"\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/lib/components/core/default/react/navigation/dropdown-menu\"\nimport { TextField } from \"@/lib/components/core/default/react/input/text-field\"\nimport { Table, TableCell, TableHead, TableRow } from \"@/lib/components/core/default/react/data-display/table\"\nimport { TableBody, TableHeader } from \"@/lib/components/core/default/table\"\n\nconst data: Payment[] = [\n  {\n    id: \"m5gr84i9\",\n    amount: 316,\n    status: \"success\",\n    email: \"ken99@yahoo.com\",\n  },\n  {\n    id: \"3u1reuv4\",\n    amount: 242,\n    status: \"success\",\n    email: \"Abe45@gmail.com\",\n  },\n  {\n    id: \"derv1ws0\",\n    amount: 837,\n    status: \"processing\",\n    email: \"Monserrat44@gmail.com\",\n  },\n  {\n    id: \"5kma53ae\",\n    amount: 874,\n    status: \"success\",\n    email: \"Silas22@gmail.com\",\n  },\n  {\n    id: \"bhqecj4p\",\n    amount: 721,\n    status: \"failed\",\n    email: \"carmella@hotmail.com\",\n  },\n]\n\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => (\n      <div className=\"capitalize\">{row.getValue(\"status\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"quiet\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n    cell: ({ row }) => <div className=\"lowercase\">{row.getValue(\"email\")}</div>,\n  },\n  {\n    accessorKey: \"amount\",\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"amount\"))\n\n      // Format the amount as a dollar amount\n      const formatted = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount)\n\n      return <div className=\"text-right font-medium\">{formatted}</div>\n    },\n  },\n  {\n    id: \"actions\",\n    enableHiding: false,\n    cell: ({ row }) => {\n      const payment = row.original\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"quiet\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(payment.id)}\n            >\n              Copy payment ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View customer</DropdownMenuItem>\n            <DropdownMenuItem>View payment details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )\n    },\n  },\n]\n\nexport default function DataTableDemo() {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center py-4\">\n        <TextField\n          placeholder=\"Filter emails...\"\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter((column) => column.getCanHide())\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n"}]
  },
  "demos/components/core/react/draggable/resizable/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/draggable/resizable/default")),
    code: [{"title":"default.tsx","code":"\"use client\";\n\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from \"@/lib/components/core/default/react/draggable/resizable\";\n\n  export default function ResizableDemo() {\n    return (\n      <ResizablePanelGroup\n        direction=\"horizontal\"\n        className=\"max-w-md rounded-lg border\"\n      >\n        <ResizablePanel defaultSize={50}>\n          <div className=\"flex h-[200px] items-center justify-center p-6\">\n            <span className=\"font-semibold\">One</span>\n          </div>\n        </ResizablePanel>\n        <ResizableHandle />\n        <ResizablePanel defaultSize={50}>\n          <ResizablePanelGroup direction=\"vertical\">\n            <ResizablePanel defaultSize={25}>\n              <div className=\"flex h-full items-center justify-center p-6\">\n                <span className=\"font-semibold\">Two</span>\n              </div>\n            </ResizablePanel>\n            <ResizableHandle />\n            <ResizablePanel defaultSize={75}>\n              <div className=\"flex h-full items-center justify-center p-6\">\n                <span className=\"font-semibold\">Three</span>\n              </div>\n            </ResizablePanel>\n          </ResizablePanelGroup>\n        </ResizablePanel>\n      </ResizablePanelGroup>\n    )\n  }\n  "}]
  },
  "demos/components/core/react/draggable/resizable/direction": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/draggable/resizable/direction")),
    code: [{"title":"direction.tsx","code":"import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from \"@/lib/components/core/default/react/draggable/resizable\";\n\n  export default function ResizableDemo() {\n    return (\n      <ResizablePanelGroup\n        direction=\"vertical\"\n        className=\"min-h-[200px] max-w-md rounded-lg border\"\n      >\n        <ResizablePanel defaultSize={25}>\n          <div className=\"flex h-full items-center justify-center p-6\">\n            <span className=\"font-semibold\">Header</span>\n          </div>\n        </ResizablePanel>\n        <ResizableHandle />\n        <ResizablePanel defaultSize={75}>\n          <div className=\"flex h-full items-center justify-center p-6\">\n            <span className=\"font-semibold\">Content</span>\n          </div>\n        </ResizablePanel>\n      </ResizablePanelGroup>\n    )\n  }\n  "}]
  },
  "demos/components/core/react/draggable/resizable/handle": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/draggable/resizable/handle")),
    code: [{"title":"handle.tsx","code":"import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from \"@/lib/components/core/default/react/draggable/resizable\";\n\n  export default function ResizableDemo() {\n    return (\n      <ResizablePanelGroup\n        direction=\"horizontal\"\n        className=\"min-h-[200px] max-w-md rounded-lg border\"\n      >\n        <ResizablePanel defaultSize={25}>\n          <div className=\"flex h-full items-center justify-center p-6\">\n            <span className=\"font-semibold\">Sidebar</span>\n          </div>\n        </ResizablePanel>\n        <ResizableHandle withHandle />\n        <ResizablePanel defaultSize={75}>\n          <div className=\"flex h-full items-center justify-center p-6\">\n            <span className=\"font-semibold\">Content</span>\n          </div>\n        </ResizablePanel>\n      </ResizablePanelGroup>\n    )\n  }\n  "}]
  },
  "demos/components/core/react/feedback/skeleton/card": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/skeleton/card")),
    code: [{"title":"card.tsx","code":"import { Skeleton } from \"@/lib/components/core/default/react/feedback/skeleton\";\n\nexport default function SkeletonDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <Skeleton className=\"h-44 w-64\" />\n      <div className=\"flex items-center space-x-4\">\n        <Skeleton className=\"size-10 rounded-full\" />\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-4 w-44\" />\n          <Skeleton className=\"h-4 w-36\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/feedback/skeleton/children": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/skeleton/children")),
    code: [{"title":"children.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { Skeleton } from \"@/lib/components/core/default/react/feedback/skeleton\";\n\nexport default function SkeletonDemo() {\n  return (\n    <Skeleton>\n      <Button>Button</Button>\n    </Skeleton>\n  );\n}\n"}]
  },
  "demos/components/core/react/feedback/skeleton/show": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/skeleton/show")),
    code: [{"title":"show.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { Skeleton } from \"@/lib/components/core/default/react/feedback/skeleton\";\n\nexport default function SkeletonDemo() {\n  return (\n    <div className=\"flex flex-col items-center gap-4\">\n      <Skeleton>\n        <Button>Button</Button>\n      </Skeleton>\n      <Skeleton show={false}>\n        <Button>Button</Button>\n      </Skeleton>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/feedback/skeleton/api-simulation": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/skeleton/api-simulation")),
    code: [{"title":"api-simulation.tsx","code":"\"use client\";\n\nimport { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { Skeleton } from \"@/lib/components/core/default/react/feedback/skeleton\";\nimport React from \"react\";\n\nexport default function SkeletonDemo() {\n  const [status, setStatus] = React.useState<\n    \"idle\" | \"loading\" | \"error\" | \"success\"\n  >(\"idle\");\n  const apiCall = () => {\n    setStatus(\"loading\");\n    setTimeout(() => {\n      setStatus(\"success\");\n    }, 4000);\n  };\n  return (\n    <div className=\"flex flex-col items-center gap-4\">\n      <Button isLoading={status === \"loading\"} onClick={apiCall}>\n        Simulate API Call\n      </Button>\n      <Skeleton show={status === \"loading\"}>\n        <p>Some text loaded from API.</p>\n      </Skeleton>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/feedback/skeleton/fixed-size-children": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/skeleton/fixed-size-children")),
    code: [{"title":"fixed-size-children.tsx","code":"import { Button } from \"@/lib/components/core/default/react/buttons/button\";\nimport { Skeleton } from \"@/lib/components/core/default/react/feedback/skeleton\";\n\nexport default function SkeletonDemo() {\n  return (\n    <Skeleton className=\"size-20\">\n      <Button>Button</Button>\n    </Skeleton>\n  );\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/default")),
    code: [{"title":"default.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[50]}\n         max={100}\n         step={1}\n         className='w-3/5'\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/disabled": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/disabled")),
    code: [{"title":"disabled.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[50]}\n         max={100}\n         step={1}\n         className='w-3/5'\n         disabled\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/inverted": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/inverted")),
    code: [{"title":"inverted.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[50]}\n         max={100}\n         step={1}\n         className='w-3/5'\n         inverted\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/orientation": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/orientation")),
    code: [{"title":"orientation.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <div className=\"h-64\">\n         <Slider\n            defaultValue={[50]}\n            max={100}\n            step={1}\n            className='w-3/5'\n            orientation=\"vertical\"\n         />\n      </div>\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/range": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/range")),
    code: [{"title":"range.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[25, 75]}\n         max={100}\n         step={1}\n         className='w-3/5'\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/half-tick-marks": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/half-tick-marks")),
    code: [{"title":"half-tick-marks.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[2]}\n         max={5}\n         step={1}\n         className='w-3/5'\n         showSteps=\"half\"\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/full-tick-marks": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/full-tick-marks")),
    code: [{"title":"full-tick-marks.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[2]}\n         max={5}\n         step={1}\n         className='w-3/5'\n         showSteps=\"full\"\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/format-label": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/format-label")),
    code: [{"title":"format-label.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[2]}\n         max={100}\n         step={1}\n         className='w-3/5'\n         formatLabel={value => `${value} points`}\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/feedback/slider/format-label-side": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/feedback/slider/format-label-side")),
    code: [{"title":"format-label-side.tsx","code":"\"use client\";\n\nimport { Slider } from \"@/lib/components/core/default/react/feedback/slider\";\n\nexport default function SliderDemo() {\n   return (\n      <Slider\n         defaultValue={[2]}\n         max={100}\n         step={1}\n         className='w-3/5'\n         formatLabel={value => `${value} points`}\n         formatLabelSide=\"left\"\n      />\n   )\n}\n"}]
  },
  "demos/components/core/react/form/form/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/form/form/default")),
    code: [{"title":"default.tsx","code":"'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\n\nimport { Button } from '@/lib/components/core/default/react/buttons/button'\nimport {\n   Form,\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from '@/lib/components/core/default/react/form/form'\nimport { TextField } from '@/lib/components/core/default/react/input/text-field'\n// import { toast } from '~/components/ui/use-toast'\n\nconst FormSchema = z.object({\n   username: z.string().min(2, {\n      message: 'Username must be at least 2 characters.',\n   }),\n})\n\nexport default function FormDemo() {\n   const form = useForm<z.infer<typeof FormSchema>>({\n      resolver: zodResolver(FormSchema),\n      defaultValues: {\n         username: '',\n      },\n   })\n\n   function onSubmit(data: z.infer<typeof FormSchema>) {\n      /* toast({\n         title: 'You submitted the following values:',\n         description: (\n            <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\n               <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n            </pre>\n         ),\n      }) */\n   }\n\n   return (\n      <Form {...form}>\n         <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n            <FormField\n               control={form.control}\n               name=\"username\"\n               render={({ field }) => (\n                  <FormItem>\n                     <FormLabel>Username</FormLabel>\n                     <FormControl>\n                        <TextField placeholder=\"name...\" {...field} />\n                     </FormControl>\n                     <FormDescription>\n                        This is your public display name.\n                     </FormDescription>\n                     <FormMessage />\n                  </FormItem>\n               )}\n            />\n            <Button type=\"submit\" size=\"sm\">Submit</Button>\n         </form>\n      </Form>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/label/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/label/default")),
    code: [{"title":"default.tsx","code":"\"use client\";\n\nimport { Checkbox } from '@/lib/components/core/default/react/input/checkbox'\nimport { Label } from '@/lib/components/core/default/react/input/label'\n\nexport default function LabelDemo() {\n   return (\n      <div>\n         <div className=\"flex items-center space-x-2\">\n            <Checkbox id=\"terms\" />\n            <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n         </div>\n      </div>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/multi-select/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/multi-select/default")),
    code: [{"title":"default.tsx","code":"'use client'\n\nimport { MultiSelect, \n    MultiSelectContent, \n    MultiSelectGroup, \n    MultiSelectItem, \n    MultiSelectList, \n    MultiSelectTrigger, \n    MultiSelectValue } from \"@/lib/components/core/default/react/input/multi-select\"\n    \nexport default function MultiSelectDemo() {\n   return (\n      <MultiSelect>\n         <MultiSelectTrigger className=\"w-96\">\n            <MultiSelectValue placeholder=\"Select stack\" />\n         </MultiSelectTrigger>\n         <MultiSelectContent>\n            <MultiSelectList>\n               <MultiSelectGroup heading=\"React\">\n                  <MultiSelectItem value=\"react\">React</MultiSelectItem>\n                  <MultiSelectItem value=\"next\">Next.js</MultiSelectItem>\n                  <MultiSelectItem value=\"remix\">Remix</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Vue\">\n                  <MultiSelectItem value=\"vue\">Vue</MultiSelectItem>\n                  <MultiSelectItem value=\"nuxt\">Nuxt</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Others\">\n                  <MultiSelectItem value=\"angular\">Angular</MultiSelectItem>\n                  <MultiSelectItem value=\"svelte\">Svelte</MultiSelectItem>\n               </MultiSelectGroup>\n            </MultiSelectList>\n         </MultiSelectContent>\n      </MultiSelect>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/multi-select/with-filter": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/multi-select/with-filter")),
    code: [{"title":"with-filter.tsx","code":"'use client'\n\nimport { MultiSelect, MultiSelectContent, \nMultiSelectEmpty, MultiSelectGroup, MultiSelectItem, MultiSelectList, \nMultiSelectSearch, MultiSelectTrigger, MultiSelectValue } from \"@/lib/components/core/default/react/input/multi-select\"\n\nexport default function MultiSelectDemo() {\n   return (\n      <MultiSelect>\n         <MultiSelectTrigger className=\"w-96\">\n            <MultiSelectValue placeholder=\"Select stack\" />\n         </MultiSelectTrigger>\n         <MultiSelectContent>\n            <MultiSelectSearch placeholder=\"Input to search\" />\n            <MultiSelectList>\n               <MultiSelectGroup heading=\"React\">\n                  <MultiSelectItem value=\"react\">React</MultiSelectItem>\n                  <MultiSelectItem value=\"next\">Next.js</MultiSelectItem>\n                  <MultiSelectItem value=\"remix\">Remix</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Vue\">\n                  <MultiSelectItem value=\"vue\">Vue</MultiSelectItem>\n                  <MultiSelectItem value=\"nuxt\">Nuxt</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Others\">\n                  <MultiSelectItem value=\"angular\">Angular</MultiSelectItem>\n                  <MultiSelectItem value=\"svelte\">Svelte</MultiSelectItem>\n               </MultiSelectGroup>\n            </MultiSelectList>\n            <MultiSelectEmpty />\n         </MultiSelectContent>\n      </MultiSelect>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/multi-select/control-search": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/multi-select/control-search")),
    code: [{"title":"control-search.tsx","code":"'use client'\n\nimport { useRef, useState } from 'react'\nimport {\n   MultiSelect,\n   MultiSelectContent,\n   MultiSelectEmpty,\n   MultiSelectList,\n   type MultiSelectOption,\n   type MultiSelectOptionGroup,\n   MultiSelectSearch,\n   MultiSelectTrigger,\n   MultiSelectValue,\n   renderMultiSelectOptions,\n} from '@/lib/components/core/default/react/input/multi-select'\n\nconst ALL_ITEMS = [\n   { value: 'react', label: 'React', group: 'React' },\n   { value: 'next', label: 'Next.js', group: 'React' },\n   { value: 'remix', label: 'Remix', group: 'React' },\n   { value: 'vue', label: 'Vue', group: 'Vue' },\n   { value: 'nuxt', label: 'Nuxt.js', group: 'Vue' },\n   { value: 'angular', label: 'Angular', group: 'Others' },\n   { value: 'svelte', label: 'Svelte', group: 'Others' },\n]\n\nfunction group(options: Array<(typeof ALL_ITEMS)[number]>): MultiSelectOptionGroup[] {\n   return options.reduce((acc, item) => {\n      const group = acc.find(g => g.heading === item.group)\n      if (group)\n         group.children.push(item)\n      else\n         acc.push({ heading: item.group, children: [item] })\n\n      return acc\n   }, [] as MultiSelectOptionGroup[])\n}\n\nasync function search(keyword?: string) {\n   if (!keyword)\n      return group(ALL_ITEMS)\n   await new Promise(resolve => setTimeout(resolve, 500))\n   const lowerKeyword = keyword.toLowerCase()\n   const filtered = ALL_ITEMS.filter(item =>\n      item.label.toLowerCase().includes(lowerKeyword),\n   )\n   return group(filtered)\n}\n\nexport default function MultiSelectDemo() {\n   const [loading, setLoading] = useState(false)\n   const [options, setOptions] = useState<MultiSelectOption[]>(() =>\n      group(ALL_ITEMS),\n   )\n\n   const indexRef = useRef(0)\n\n   const handleSearch = async (keyword?: string) => {\n      const index = ++indexRef.current\n      setLoading(true)\n      const newOptions = await search(keyword)\n      if (indexRef.current === index) {\n         setOptions(newOptions)\n         setLoading(false)\n      }\n   }\n\n   return (\n      <MultiSelect onSearch={handleSearch}>\n         <MultiSelectTrigger className=\"w-96\">\n            <MultiSelectValue placeholder=\"Select stack\" />\n         </MultiSelectTrigger>\n         <MultiSelectContent>\n            <MultiSelectSearch />\n            <MultiSelectList>\n               {loading ? null : renderMultiSelectOptions(options)}\n               <MultiSelectEmpty>\n                  {loading ? 'Loading...' : 'No results found'}\n               </MultiSelectEmpty>\n            </MultiSelectList>\n         </MultiSelectContent>\n      </MultiSelect>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/multi-select/input-custom": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/multi-select/input-custom")),
    code: [{"title":"input-custom.tsx","code":"'use client'\n\nimport { useRef, useState } from 'react'\n\nimport {\n   MultiSelect,\n   MultiSelectContent,\n   MultiSelectEmpty,\n   MultiSelectList,\n   type MultiSelectOption,\n   type MultiSelectOptionGroup,\n   MultiSelectSearch,\n   MultiSelectTrigger,\n   MultiSelectValue,\n   renderMultiSelectOptions,\n} from '@/lib/components/core/default/react/input/multi-select'\n\nconst ALL_ITEMS = [\n   { value: 'react', label: 'React', group: 'React' },\n   { value: 'next', label: 'Next.js', group: 'React' },\n   { value: 'remix', label: 'Remix', group: 'React' },\n   { value: 'vue', label: 'Vue', group: 'Vue' },\n   { value: 'nuxt', label: 'Nuxt.js', group: 'Vue' },\n   { value: 'angular', label: 'Angular', group: 'Others' },\n   { value: 'svelte', label: 'Svelte', group: 'Others' },\n]\n\nfunction group(options: Array<(typeof ALL_ITEMS)[number]>): MultiSelectOptionGroup[] {\n   return options.reduce((acc, item) => {\n      const group = acc.find(g => g.heading === item.group)\n      if (group)\n         group.children.push(item)\n      else\n         acc.push({ heading: item.group, children: [item] })\n\n      return acc\n   }, [] as MultiSelectOptionGroup[])\n}\n\nasync function search(keyword?: string) {\n   if (!keyword)\n      return group(ALL_ITEMS)\n   const lowerKeyword = keyword.toLowerCase()\n   const filtered = ALL_ITEMS.filter(item =>\n      item.label.toLowerCase().includes(lowerKeyword),\n   )\n\n   if (!filtered.length) {\n      return [\n         {\n            label: keyword,\n            value: keyword,\n         },\n      ]\n   }\n\n   return group(filtered)\n}\n\nexport default function MultiSelectDemo() {\n   const [loading, setLoading] = useState(false)\n   const [options, setOptions] = useState<MultiSelectOption[]>(() =>\n      group(ALL_ITEMS),\n   )\n\n   const indexRef = useRef(0)\n\n   const handleSearch = async (keyword: string) => {\n      const index = ++indexRef.current\n      setLoading(true)\n      const newOptions = await search(keyword)\n      if (indexRef.current === index) {\n         setOptions(newOptions)\n         setLoading(false)\n      }\n   }\n\n   return (\n      <MultiSelect onSearch={keyword => handleSearch(keyword ?? '')}>\n         <MultiSelectTrigger className=\"w-96\">\n            <MultiSelectValue placeholder=\"Select stack\" />\n         </MultiSelectTrigger>\n         <MultiSelectContent>\n            <MultiSelectSearch placeholder=\"input any...\" />\n            <MultiSelectList>\n               {loading ? null : renderMultiSelectOptions(options)}\n               <MultiSelectEmpty>\n                  {loading ? 'Loading...' : 'No results found'}\n               </MultiSelectEmpty>\n            </MultiSelectList>\n         </MultiSelectContent>\n      </MultiSelect>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/multi-select/limit-count": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/multi-select/limit-count")),
    code: [{"title":"limit-count.tsx","code":"'use client'\n\nimport {\n   MultiSelect,\n   MultiSelectContent,\n   MultiSelectGroup,\n   MultiSelectItem,\n   MultiSelectList,\n   MultiSelectTrigger,\n   MultiSelectValue,\n} from '@/lib/components/core/default/react/input/multi-select'\n\nexport default function MultiSelectDemo() {\n   return (\n      <MultiSelect defaultValue={['react', 'next', 'remix']} maxCount={3}>\n         <MultiSelectTrigger className=\"w-96\">\n            <MultiSelectValue placeholder=\"Select stack\" />\n         </MultiSelectTrigger>\n         <MultiSelectContent>\n            <MultiSelectList>\n               <MultiSelectGroup heading=\"React\">\n                  <MultiSelectItem value=\"react\">React</MultiSelectItem>\n                  <MultiSelectItem value=\"next\">Next.js</MultiSelectItem>\n                  <MultiSelectItem value=\"remix\">Remix</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Vue\">\n                  <MultiSelectItem value=\"vue\">Vue</MultiSelectItem>\n                  <MultiSelectItem value=\"nuxt\">Nuxt</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Others\">\n                  <MultiSelectItem value=\"angular\">Angular</MultiSelectItem>\n                  <MultiSelectItem value=\"svelte\">Svelte</MultiSelectItem>\n               </MultiSelectGroup>\n            </MultiSelectList>\n         </MultiSelectContent>\n      </MultiSelect>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/multi-select/limit-item": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/multi-select/limit-item")),
    code: [{"title":"limit-item.tsx","code":"'use client'\n\nimport {\n   MultiSelect,\n   MultiSelectContent,\n   MultiSelectGroup,\n   MultiSelectItem,\n   MultiSelectList,\n   MultiSelectTrigger,\n   MultiSelectValue,\n} from '@/lib/components/core/default/react/input/multi-select'\n\nexport default function MultiSelectDemo() {\n   return (\n      <MultiSelect defaultValue={['long', 'react', 'angular', 'vue', 'remix']}>\n         <MultiSelectTrigger className=\"w-96\">\n            <MultiSelectValue\n               placeholder=\"Select stack\"\n               maxDisplay={3}\n               maxItemLength={5}\n            />\n         </MultiSelectTrigger>\n         <MultiSelectContent>\n            <MultiSelectList>\n               <MultiSelectGroup heading=\"React\">\n                  <MultiSelectItem value=\"react\">React</MultiSelectItem>\n                  <MultiSelectItem value=\"next\">Next.js</MultiSelectItem>\n                  <MultiSelectItem value=\"remix\">Remix</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Vue\">\n                  <MultiSelectItem value=\"vue\">Vue</MultiSelectItem>\n                  <MultiSelectItem value=\"nuxt\">Nuxt</MultiSelectItem>\n               </MultiSelectGroup>\n               <MultiSelectGroup heading=\"Others\">\n                  <MultiSelectItem value=\"angular\">Angular</MultiSelectItem>\n                  <MultiSelectItem value=\"svelte\">Svelte</MultiSelectItem>\n                  <MultiSelectItem value=\"long\">VeryVeryLongItem</MultiSelectItem>\n               </MultiSelectGroup>\n            </MultiSelectList>\n         </MultiSelectContent>\n      </MultiSelect>\n   )\n}\n"}]
  },
  "demos/components/core/react/input/multi-select/form": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/input/multi-select/form")),
    code: [{"title":"form.tsx","code":"'use client'\n\nimport { useRef, useState } from 'react'\nimport Link from 'next/link'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { useForm } from 'react-hook-form'\nimport { z } from 'zod'\n\nimport { Button } from '@/lib/components/core/default/react/buttons/button'\nimport {\n   Form,\n   FormControl,\n   FormDescription,\n   FormField,\n   FormItem,\n   FormLabel,\n   FormMessage,\n} from '@/lib/components/core/default/react/form/form'\nimport {\n   MultiSelect,\n   MultiSelectContent,\n   MultiSelectEmpty,\n   MultiSelectList,\n   type MultiSelectOption,\n   type MultiSelectOptionGroup,\n   MultiSelectSearch,\n   MultiSelectTrigger,\n   MultiSelectValue,\n   renderMultiSelectOptions,\n} from '@/lib/components/core/default/react/input/multi-select'\n// import { toast } from '~/components/ui/use-toast'\n\nconst ALL_ITEMS = [\n   { value: 'react', label: 'React', group: 'React' },\n   { value: 'next', label: 'Next.js', group: 'React' },\n   { value: 'remix', label: 'Remix', group: 'React' },\n   { value: 'vue', label: 'Vue', group: 'Vue' },\n   { value: 'nuxt', label: 'Nuxt.js', group: 'Vue' },\n   { value: 'angular', label: 'Angular', group: 'Others' },\n   { value: 'svelte', label: 'Svelte', group: 'Others' },\n]\n\nfunction group(options: Array<(typeof ALL_ITEMS)[number]>): MultiSelectOptionGroup[] {\n   return options.reduce((acc, item) => {\n      const group = acc.find(g => g.heading === item.group)\n      if (group)\n         group.children.push(item)\n      else\n         acc.push({ heading: item.group, children: [item] })\n\n      return acc\n   }, [] as MultiSelectOptionGroup[])\n}\n\nasync function search(keyword?: string) {\n   if (!keyword)\n      return group(ALL_ITEMS)\n   const lowerKeyword = keyword.toLowerCase()\n   const filtered = ALL_ITEMS.filter(item =>\n      item.label.toLowerCase().includes(lowerKeyword),\n   )\n\n   if (!filtered.length) {\n      return [\n         {\n            label: keyword,\n            value: keyword,\n         },\n      ]\n   }\n\n   return group(filtered)\n}\n\nconst FormSchema = z.object({\n   frameworks: z.array(z.string(), {\n      required_error: 'Please select at least one framework.',\n   }),\n})\n\nexport default function MultiSelectDemo() {\n   const form = useForm<z.infer<typeof FormSchema>>({\n      resolver: zodResolver(FormSchema),\n   })\n\n   const [loading, setLoading] = useState(false)\n   const [options, setOptions] = useState<MultiSelectOption[]>(() =>\n      group(ALL_ITEMS),\n   )\n\n   const indexRef = useRef(0)\n\n   const handleSearch = async (keyword: string) => {\n      const index = ++indexRef.current\n      setLoading(true)\n      const newOptions = await search(keyword)\n      if (indexRef.current === index) {\n         setOptions(newOptions)\n         setLoading(false)\n      }\n   }\n\n   const onSubmit = (data: z.infer<typeof FormSchema>) => {\n    /*  toast({\n         title: 'You submitted the following values:',\n         description: (\n            <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\n               <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n            </pre>\n         ),\n      }) */\n   }\n\n   return (\n      <Form {...form}>\n         <form onSubmit={form.handleSubmit(onSubmit)} className=\"w-2/3 space-y-6\">\n            <FormField\n               control={form.control}\n               name=\"frameworks\"\n               render={({ field }) => (\n                  <FormItem>\n                     <FormLabel>Frameworks</FormLabel>\n                     <MultiSelect\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        onSearch={keyword => handleSearch(keyword ?? '')}\n                     >\n                        <FormControl>\n                           <MultiSelectTrigger className=\"w-96\">\n                              <MultiSelectValue placeholder=\"Select frameworks\" />\n                           </MultiSelectTrigger>\n                        </FormControl>\n                        <MultiSelectContent>\n                           <MultiSelectSearch />\n                           <MultiSelectList>\n                              {loading ? null : renderMultiSelectOptions(options)}\n                              <MultiSelectEmpty>\n                                 {loading ? 'Loading...' : 'No results found'}\n                              </MultiSelectEmpty>\n                           </MultiSelectList>\n                        </MultiSelectContent>\n                     </MultiSelect>\n                     <FormDescription>\n                        You can manage frameworks in\n                        {' '}\n                        <Link href=\"/examples/forms\">framework settings</Link>\n                        .\n                     </FormDescription>\n                     <FormMessage />\n                  </FormItem>\n               )}\n            />\n            <Button type=\"submit\">Submit</Button>\n         </form>\n      </Form>\n   )\n}\n"}]
  },
  "demos/components/core/react/layout/aspect-ratio/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/layout/aspect-ratio/default")),
    code: [{"title":"default.tsx","code":"import { AspectRatio } from \"@/lib/components/core/default/react/layout/aspect-ratio\";\nimport Image from \"next/image\";\n\nexport default function AspectRatioDemo() {\n  return (\n    <AspectRatio ratio={16 / 9}>\n      <Image\n        src=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\n        alt=\"Photo by Drew Beamer\"\n        fill\n        className=\"rounded-md object-cover\"\n      />\n    </AspectRatio>\n  );\n}\n"}]
  },
  "demos/components/core/react/layout/aspect-ratio/as-child": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/layout/aspect-ratio/as-child")),
    code: [{"title":"as-child.tsx","code":"import { AspectRatio } from \"@/lib/components/core/default/react/layout/aspect-ratio\";\nimport Image from \"next/image\";\n\nexport default function AspectRatioDemo() {\n  return (\n    <AspectRatio ratio={16 / 9} asChild>\n      <Image\n        src=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\n        alt=\"Photo by Drew Beamer\"\n        fill\n        className=\"rounded-md object-cover\"\n      />\n    </AspectRatio>\n  );\n}\n"}]
  },
  "demos/components/core/react/layout/scroll-area/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/layout/scroll-area/default")),
    code: [{"title":"default.tsx","code":"import { ScrollArea } from \"@/lib/components/core/default/react/layout/scroll-area\";\nimport * as React from \"react\";\n\nexport default function ScrollAreaDemo() {\n  return (\n    <div className=\"rounded-md border p-6\">\n      <ScrollArea className=\"h-72 w-full max-w-sm\" type=\"always\">\n        <div className=\"space-y-4 p-4 pr-8\">\n          <h4 className=\"text-md font-bold\">\n            Principles of the typographic craft\n          </h4>\n          <p>\n            Three fundamental aspects of typography are legibility, readability,\n            and aesthetics. Although in a non-technical sense “legible” and\n            “readable” are often used synonymously, typographically they are\n            separate but related concepts.\n          </p>\n          <p>\n            Legibility describes how easily individual characters can be\n            distinguished from one another. It is described by Walter Tracy as\n            “the quality of being decipherable and recognisable”. For instance,\n            if a “b” and an “h”, or a “3” and an “8”, are difficult to\n            distinguish at small sizes, this is a problem of legibility.\n          </p>\n          <p>\n            Typographers are concerned with legibility insofar as it is their\n            job to select the correct font to use. Brush Script is an example of\n            a font containing many characters that might be difficult to\n            distinguish. The selection of cases influences the legibility of\n            typography because using only uppercase letters (all-caps) reduces\n            legibility.\n          </p>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/layout/scroll-area/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/layout/scroll-area/sizes")),
    code: [{"title":"sizes.tsx","code":"import { ScrollArea } from \"@/lib/components/core/default/react/layout/scroll-area\";\nimport * as React from \"react\";\n\nconst sizes = [\"sm\", \"md\", \"lg\"] as const;\n\nexport default function ScrollAreaDemo() {\n  return (\n    <div className=\"grid grid-cols-3 gap-10\">\n      {sizes.map((size) => (\n        <div key={size} className=\"rounded-md border p-3\">\n          <ScrollArea size={size} className=\"h-72\" type=\"always\">\n            <div className=\"space-y-4 p-4 pr-8\">\n              <h4 className=\"text-md font-bold\">\n                Principles of the typographic craft\n              </h4>\n              <p>\n                Three fundamental aspects of typography are legibility,\n                readability, and aesthetics. Although in a non-technical sense\n                “legible” and “readable” are often used synonymously,\n                typographically they are separate but related concepts.\n              </p>\n              <p>\n                Legibility describes how easily individual characters can be\n                distinguished from one another. It is described by Walter Tracy\n                as “the quality of being decipherable and recognisable”. For\n                instance, if a “b” and an “h”, or a “3” and an “8”, are\n                difficult to distinguish at small sizes, this is a problem of\n                legibility.\n              </p>\n              <p>\n                Typographers are concerned with legibility insofar as it is\n                their job to select the correct font to use. Brush Script is an\n                example of a font containing many characters that might be\n                difficult to distinguish. The selection of cases influences the\n                legibility of typography because using only uppercase letters\n                (all-caps) reduces legibility.\n              </p>\n            </div>\n          </ScrollArea>\n        </div>\n      ))}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/layout/scroll-area/variants": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/layout/scroll-area/variants")),
    code: [{"title":"variants.tsx","code":"import { ScrollArea } from \"@/lib/components/core/default/react/layout/scroll-area\";\nimport * as React from \"react\";\n\nconst variants = [\"default\", \"primary\", \"secondary\"] as const;\n\nexport default function ScrollAreaDemo() {\n  return (\n    <div className=\"grid grid-cols-3 gap-10\">\n      {variants.map((variant) => (\n        <div key={variant} className=\"rounded-md border p-3\">\n          <ScrollArea variant={variant} className=\"h-72\" type=\"always\">\n            <div className=\"space-y-4 p-4 pr-8\">\n              <h4 className=\"text-md font-bold\">\n                Principles of the typographic craft\n              </h4>\n              <p>\n                Three fundamental aspects of typography are legibility,\n                readability, and aesthetics. Although in a non-technical sense\n                “legible” and “readable” are often used synonymously,\n                typographically they are separate but related concepts.\n              </p>\n              <p>\n                Legibility describes how easily individual characters can be\n                distinguished from one another. It is described by Walter Tracy\n                as “the quality of being decipherable and recognisable”. For\n                instance, if a “b” and an “h”, or a “3” and an “8”, are\n                difficult to distinguish at small sizes, this is a problem of\n                legibility.\n              </p>\n              <p>\n                Typographers are concerned with legibility insofar as it is\n                their job to select the correct font to use. Brush Script is an\n                example of a font containing many characters that might be\n                difficult to distinguish. The selection of cases influences the\n                legibility of typography because using only uppercase letters\n                (all-caps) reduces legibility.\n              </p>\n            </div>\n          </ScrollArea>\n        </div>\n      ))}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/layout/scroll-area/scrollbars": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/layout/scroll-area/scrollbars")),
    code: [{"title":"scrollbars.tsx","code":"\"use client\";\n\nimport {\n  ScrollArea,\n  ScrollAreaProps,\n} from \"@/lib/components/core/default/react/layout/scroll-area\";\nimport * as React from \"react\";\n// import { Radio, RadioGroup } from \"@/lib/components/core/default/radio-group\";\n\nexport default function ScrollAreaDemo() {\n  const [scrollbars, setScrollbars] = React.useState(\"vertical\");\n  return (\n    <div className=\"flex items-center gap-10\">\n      <div className=\"rounded-md border p-6\">\n        <ScrollArea\n          scrollbars={scrollbars as ScrollAreaProps[\"scrollbars\"]}\n          className=\"h-44 w-full max-w-sm\"\n          type=\"always\"\n        >\n          <div className=\"flex w-[500px] items-start gap-4\">\n            <div className=\"space-y-4 p-4 pr-8\">\n              <h4 className=\"text-md font-bold\">\n                Principles of the typographic craft\n              </h4>\n              <p>\n                Three fundamental aspects of typography are legibility,\n                readability, and aesthetics. Although in a non-technical sense\n                “legible” and “readable” are often used synonymously,\n                typographically they are separate but related concepts.\n              </p>\n              <p>\n                Legibility describes how easily individual characters can be\n                distinguished from one another. It is described by Walter Tracy\n                as “the quality of being decipherable and recognisable”. For\n                instance, if a “b” and an “h”, or a “3” and an “8”, are\n                difficult to distinguish at small sizes, this is a problem of\n                legibility.\n              </p>\n              <p>\n                Typographers are concerned with legibility insofar as it is\n                their job to select the correct font to use. Brush Script is an\n                example of a font containing many characters that might be\n                difficult to distinguish. The selection of cases influences the\n                legibility of typography because using only uppercase letters\n                (all-caps) reduces legibility.\n              </p>\n            </div>\n            <div className=\"space-y-4 p-4 pr-8\">\n              <h4 className=\"text-md font-bold\">\n                Principles of the typographic craft\n              </h4>\n              <p>\n                Three fundamental aspects of typography are legibility,\n                readability, and aesthetics. Although in a non-technical sense\n                “legible” and “readable” are often used synonymously,\n                typographically they are separate but related concepts.\n              </p>\n              <p>\n                Legibility describes how easily individual characters can be\n                distinguished from one another. It is described by Walter Tracy\n                as “the quality of being decipherable and recognisable”. For\n                instance, if a “b” and an “h”, or a “3” and an “8”, are\n                difficult to distinguish at small sizes, this is a problem of\n                legibility.\n              </p>\n              <p>\n                Typographers are concerned with legibility insofar as it is\n                their job to select the correct font to use. Brush Script is an\n                example of a font containing many characters that might be\n                difficult to distinguish. The selection of cases influences the\n                legibility of typography because using only uppercase letters\n                (all-caps) reduces legibility.\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n      {/* <RadioGroup label=\"Scrollbars\" value={scrollbars} onChange={setScrollbars}>\n        <Radio value=\"vertical\">Vertical</Radio>\n        <Radio value=\"horizontal\">Horizontal</Radio>\n        <Radio value=\"both\">Both</Radio>\n      </RadioGroup> */}\n    </div>\n  );\n}\n"}]
  },
  "demos/components/core/react/navigation/breadcrumb/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/navigation/breadcrumb/default")),
    code: [{"title":"default.tsx","code":"import { Breadcrumb, Breadcrumbs } from \"@/lib/components/core/default/react/navigation/breadcrumb\";\n\nexport default function BreadcrumbDemo() {\n  return (\n    <Breadcrumbs>\n      <Breadcrumb href=\"#\">Home</Breadcrumb>\n      <Breadcrumb href=\"#\">Components</Breadcrumb>\n      <Breadcrumb href=\"#\">Breadcrumbs</Breadcrumb>\n    </Breadcrumbs>\n  );\n}\n"}]
  },
  "demos/components/core/react/navigation/breadcrumb/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/navigation/breadcrumb/sizes")),
    code: [{"title":"sizes.tsx","code":"import { Breadcrumb, Breadcrumbs } from \"@/lib/components/core/default/react/navigation/breadcrumb\";\n\nexport default function BreadcrumbDemo() {\n    return (\n        <div className=\"flex flex-col gap-4\">\n            <Breadcrumbs size=\"sm\">\n                <Breadcrumb href=\"#\">Home</Breadcrumb>\n                <Breadcrumb href=\"#\">Components</Breadcrumb>\n                <Breadcrumb>Breadcrumbs</Breadcrumb>\n            </Breadcrumbs><Breadcrumbs size=\"md\">\n                <Breadcrumb href=\"#\">Home</Breadcrumb>\n                <Breadcrumb href=\"#\">Components</Breadcrumb>\n                <Breadcrumb>Breadcrumbs</Breadcrumb>\n            </Breadcrumbs><Breadcrumbs size=\"lg\">\n                <Breadcrumb href=\"#\">Home</Breadcrumb>\n                <Breadcrumb href=\"#\">Components</Breadcrumb>\n                <Breadcrumb>Breadcrumbs</Breadcrumb>\n            </Breadcrumbs>\n        </div>\n    );\n}\n"}]
  },
  "demos/components/core/react/navigation/breadcrumb/orientation": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/navigation/breadcrumb/orientation")),
    code: [{"title":"orientation.tsx","code":"import { Breadcrumb, Breadcrumbs } from \"@/lib/components/core/default/react/navigation/breadcrumb\";\n\nexport default function BreadcrumbDemo() {\n    return (\n        <div className=\"flex flex-col gap-4\">\n            <Breadcrumbs orientation=\"vertical\">\n                <Breadcrumb href=\"#\">Home</Breadcrumb>\n                <Breadcrumb href=\"#\">Components</Breadcrumb>\n                <Breadcrumb>Breadcrumbs</Breadcrumb>\n            </Breadcrumbs>\n            <Breadcrumbs orientation=\"horizontal\">\n                <Breadcrumb href=\"#\">Home</Breadcrumb>\n                <Breadcrumb href=\"#\">Components</Breadcrumb>\n                <Breadcrumb>Breadcrumbs</Breadcrumb>\n            </Breadcrumbs>\n        </div>\n    );\n}\n"}]
  },
  "demos/components/core/react/navigation/breadcrumb/separator": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/navigation/breadcrumb/separator")),
    code: [{"title":"separator.tsx","code":"import { Breadcrumb, Breadcrumbs } from \"@/lib/components/core/default/react/navigation/breadcrumb\";\nimport { X } from \"lucide-react\";\n\nexport default function BreadcrumbDemo() {\n  return (\n    <Breadcrumbs separatorIcon={<X/>}>\n      <Breadcrumb href=\"#\">Home</Breadcrumb>\n      <Breadcrumb href=\"#\">Components</Breadcrumb>\n      <Breadcrumb href=\"#\">Breadcrumbs</Breadcrumb>\n    </Breadcrumbs>\n  );\n}\n"}]
  },
  "demos/components/core/react/navigation/breadcrumb/disabled": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/navigation/breadcrumb/disabled")),
    code: [{"title":"disabled.tsx","code":"import { Breadcrumb, Breadcrumbs } from \"@/lib/components/core/default/react/navigation/breadcrumb\";\n\nexport default function BreadcrumbDemo() {\n    return (\n        <Breadcrumbs>\n            <Breadcrumb href=\"#\">Home</Breadcrumb>\n            <Breadcrumb href=\"#\">Components</Breadcrumb>\n            <Breadcrumb disabled>Breadcrumbs</Breadcrumb>\n        </Breadcrumbs>\n    );\n}\n"}]
  },
  "demos/components/core/react/navigation/breadcrumb/composition": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/navigation/breadcrumb/composition")),
    code: [{"title":"composition.tsx","code":"import { BreadcrumbItem, BreadcrumbLink, Breadcrumbs } from \"@/lib/components/core/default/react/navigation/breadcrumb\";\n\nexport default function BreadcrumbDemo() {\n    return (\n        <Breadcrumbs>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"#\">Home</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <BreadcrumbLink href=\"#\">Components</BreadcrumbLink>\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <BreadcrumbLink>Breadcrumbs</BreadcrumbLink>\n        </BreadcrumbItem>\n      </Breadcrumbs>\n    );\n}\n"}]
  },
  "demos/components/core/vue/buttons/button/default": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/default")),
    code: [{"title":"default.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\n</script>\n\n<template>\n  <Button>Button</Button>\n</template>"}]
  },
  "demos/components/core/vue/buttons/button/variants": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/variants")),
    code: [{"title":"variants.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\n\nconst variants = [\n  \"default\",\n  \"primary\",\n  \"secondary\",\n  \"outline\",\n  \"quiet\",\n  \"success\",\n  \"warning\",\n  \"danger\",\n] as const;\n</script>\n\n\n<template>\n  <div class=\"grid grid-cols-4 gap-2\">\n    <Button v-for=\"variant in variants\" :key=\"variant\" :variant=\"variant\">\n      {{ variant }}\n    </Button>\n  </div>\n</template>\n"}]
  },
  "demos/components/core/vue/buttons/button/sizes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/sizes")),
    code: [{"title":"sizes.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\n</script>\n\n<template>\n    <div className=\"flex w-full items-center justify-center gap-4\">\n      <Button size=\"sm\">Button</Button>\n      <Button size=\"md\">Button</Button>\n      <Button size=\"lg\">Button</Button>\n    </div>\n</template>"}]
  },
  "demos/components/core/vue/buttons/button/shapes": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/shapes")),
    code: [{"title":"shapes.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\nimport { UploadIcon } from \"@/lib/icons\";\n</script>\n\n<template>\n  <div className=\"flex items-center justify-center gap-4\">\n    <Button size=\"sm\" shape=\"square\" aria-label=\"upload\">\n      <UploadIcon />\n    </Button>\n    <Button size=\"md\" shape=\"square\" aria-label=\"upload\">\n      <UploadIcon />\n    </Button>\n    <Button size=\"lg\" shape=\"square\" aria-label=\"upload\">\n      <UploadIcon />\n    </Button>\n    <Button size=\"sm\" shape=\"circle\" aria-label=\"upload\">\n      <UploadIcon />\n    </Button>\n    <Button size=\"md\" shape=\"circle\" aria-label=\"upload\">\n      <UploadIcon />\n    </Button>\n    <Button size=\"lg\" shape=\"circle\" aria-label=\"upload\">\n      <UploadIcon />\n    </Button>\n  </div>\n</template>"}]
  },
  "demos/components/core/vue/buttons/button/prefix-and-suffix": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/prefix-and-suffix")),
    code: [{"title":"prefix-and-suffix.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\nimport { UploadIcon } from \"@/lib/icons\";\n</script>\n\n<template>\n  <div className=\"flex items-center gap-2\">\n    <Button :prefix=\"UploadIcon\">\n      Button\n    </Button>\n    <Button :suffix=\"UploadIcon\">\n      Button\n    </Button>\n  </div>\n</template>\n"}]
  },
  "demos/components/core/vue/buttons/button/loading": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/loading")),
    code: [{"title":"loading.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\nimport { ref } from 'vue';\nconst someVariable = ref(5);\n</script>\n\n<template>\n  <div className=\"flex w-full items-center justify-center gap-2\">\n    <Button size=\"sm\" :isLoading=\"someVariable === 5\">\n      Button\n    </Button>\n    <Button size=\"md\" isLoading>\n      Button\n    </Button>\n    <Button size=\"lg\" isLoading>\n      Button\n    </Button>\n  </div>\n</template>\n"}]
  },
  "demos/components/core/vue/buttons/button/disabled": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/disabled")),
    code: [{"title":"disabled.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\nimport { ref } from 'vue';\nconst someVariable = ref(5);\n</script>\n\n<template>\n  <Button :isDisabled=\"someVariable === 5\">Button</Button>\n</template>\n"}]
  },
  "demos/components/core/vue/buttons/button/link-button": {
    component: React.lazy(() => import("@/lib/demos/components/core/react/buttons/button/link-button")),
    code: [{"title":"link-button.vue","code":"<script setup lang=\"ts\">\nimport Button from '@/lib/components/core/default/vue/button.vue';\nimport { LinkIcon } from '@/lib/icons';\n</script>\n\n<template>\n  <Button href=\"/login\" target=\"_blank\" :prefix=\"LinkIcon\">\n    Login\n  </Button>\n</template>"}]
  },
};
