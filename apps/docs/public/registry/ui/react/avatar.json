{
  "name": "avatar",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/avatar.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { tv, type VariantProps } from \"tailwind-variants\";\r\n\r\nconst avatarStyles = tv({\r\n  slots: {\r\n    root: \"relative inline-flex align-middle shrink-0 overflow-hidden bg-bg\",\r\n    image: \"aspect-square w-full h-full\",\r\n    fallback:\r\n      \"flex w-full h-full select-none items-center justify-center bg-bg-muted\",\r\n    placeholder:\r\n      \"w-full h-fulll animate-pulse bg-bg-muted flex items-center justify-center\",\r\n  },\r\n  variants: {\r\n    size: {\r\n      sm: { root: \"w-8 h-8\" },\r\n      md: { root: \"w-10 h-10\" },\r\n      lg: { root: \"w-12 h-12\" },\r\n    },\r\n    shape: {\r\n      circle: { root: \"rounded-full\" },\r\n      square: { root: \"rounded-sm\" },\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    shape: \"circle\",\r\n    size: \"md\",\r\n  },\r\n});\r\n\r\ninterface AvatarProps\r\n  extends AvatarImageProps,\r\n    VariantProps<typeof avatarStyles> {\r\n  fallback?: React.ReactNode;\r\n}\r\nconst Avatar = ({\r\n  fallback,\r\n  className,\r\n  style,\r\n  size,\r\n  shape,\r\n  ...props\r\n}: AvatarProps) => {\r\n  return (\r\n    <AvatarRoot className={className} style={style} shape={shape} size={size}>\r\n      <AvatarImage {...props} />\r\n      <AvatarFallback>{fallback}</AvatarFallback>\r\n      <AvatarPlaceholder />\r\n    </AvatarRoot>\r\n  );\r\n};\r\n\r\ninterface AvatarRootProps\r\n  extends React.HTMLAttributes<HTMLSpanElement>,\r\n    VariantProps<typeof avatarStyles> {}\r\nconst AvatarRoot = ({ className, shape, size, ...props }: AvatarRootProps) => {\r\n  const { root } = avatarStyles({ shape, size });\r\n  const [status, setStatus] = React.useState<Status>(\"idle\");\r\n  return (\r\n    <AvatarContext.Provider value={{ status, onStatusChange: setStatus }}>\r\n      <span className={root({ className })} {...props} />\r\n    </AvatarContext.Provider>\r\n  );\r\n};\r\n\r\ninterface AvatarImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\r\n  onStatusChange?: (status: Status) => void;\r\n}\r\nconst AvatarImage = ({\r\n  src,\r\n  onStatusChange,\r\n  className,\r\n  ...props\r\n}: AvatarImageProps) => {\r\n  const { image } = avatarStyles();\r\n  const context = useAvatarContext();\r\n  const status = useImageLoadingStatus(src);\r\n  // TODO use useCallBackRef here\r\n  const handleStatusChange = React.useCallback(\r\n    (status: Status) => {\r\n      onStatusChange?.(status);\r\n      context.onStatusChange(status);\r\n    },\r\n    [onStatusChange, context],\r\n  );\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (status !== \"idle\") {\r\n      handleStatusChange(status);\r\n    }\r\n  }, [status, handleStatusChange]);\r\n\r\n  return status === \"success\" ? (\r\n    // eslint-disable-next-line jsx-a11y/alt-text\r\n    <img src={src} className={image({ className })} {...props} />\r\n  ) : null;\r\n};\r\n\r\ntype AvatarFallbackProps = React.HTMLAttributes<HTMLSpanElement>;\r\nconst AvatarFallback = ({ className, ...props }: AvatarFallbackProps) => {\r\n  const { fallback } = avatarStyles();\r\n  const context = useAvatarContext();\r\n\r\n  return context.status === \"error\" ? (\r\n    <span className={fallback({ className })} {...props} />\r\n  ) : null;\r\n};\r\n\r\ntype AvatarPlaceholderProps = React.HTMLAttributes<HTMLSpanElement>;\r\nconst AvatarPlaceholder = ({ className, ...props }: AvatarPlaceholderProps) => {\r\n  const { placeholder } = avatarStyles();\r\n  const context = useAvatarContext();\r\n\r\n  return [\"idle\", \"loading\"].includes(context.status) ? (\r\n    <span className={placeholder({ className })} {...props} />\r\n  ) : null;\r\n};\r\n\r\ntype AvatarContextValue = {\r\n  status: Status;\r\n  onStatusChange: (status: Status) => void;\r\n};\r\nconst AvatarContext = React.createContext<AvatarContextValue | null>(null);\r\nconst useAvatarContext = () => {\r\n  const context = React.useContext(AvatarContext);\r\n  if (!context) {\r\n    throw new Error(\"Avatar components must be rendered within the AvatarRoot\");\r\n  }\r\n  return context;\r\n};\r\n\r\ntype Status = \"idle\" | \"loading\" | \"success\" | \"error\";\r\nconst useImageLoadingStatus = (src?: string) => {\r\n  const [status, setStatus] = React.useState<Status>(\"idle\");\r\n\r\n  React.useLayoutEffect(() => {\r\n    if (!src) {\r\n      setStatus(\"error\");\r\n      return;\r\n    }\r\n    let isMounted = true;\r\n    const image = new window.Image();\r\n    const updateStatus = (status: Status) => () => {\r\n      if (!isMounted) return;\r\n      setStatus(status);\r\n    };\r\n    setStatus(\"loading\");\r\n    image.onload = updateStatus(\"success\");\r\n    image.onerror = updateStatus(\"error\");\r\n    image.src = src;\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [src]);\r\n\r\n  return status;\r\n};\r\n\r\nexport type {\r\n  AvatarProps,\r\n  AvatarRootProps,\r\n  AvatarImageProps,\r\n  AvatarFallbackProps,\r\n};\r\nexport {\r\n  Avatar,\r\n  AvatarRoot,\r\n  AvatarImage,\r\n  AvatarFallback,\r\n  AvatarPlaceholder,\r\n  avatarStyles,\r\n};\r\n",
      "type": "registry:ui",
      "target": "components/ui/avatar.tsx"
    }
  ]
}