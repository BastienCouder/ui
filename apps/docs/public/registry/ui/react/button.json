{
  "name": "button",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, tv } from \"tailwind-variants\";\nimport { Loader } from \"@/lib/icons\";\nimport { cn } from \"@/lib/utils\";\n\nconst buttonStyles = tv(\n  {\n    base: \"inline-flex gap-2 cursor-pointer items-center justify-center whitespace-nowrap rounded-md leading-normal text-sm shrink-0 font-medium ring-offset-background transition-colors disabled:cursor-default disabled:bg-disabled disabled:text-disabled-fg\",\n    variants: {\n      variant: {\n        default:\n          \"bg-neutral hover:bg-neutral-hover active:bg-neutral-active text-neutral-fg\",\n        primary:\n          \"bg-primary hover:bg-primary-hover active:bg-primary-active text-primary-fg\",\n        secondary:\n          \"bg-secondary hover:bg-secondary-hover active:bg-secondary-active text-secondary-fg\",\n        quiet:\n          \"bg-transparent hover:bg-neutral/10 active:bg-neutral/20 text-fg\",\n        link: \"bg-transparent hover:transparent underline active:underline text-fg\",\n        outline:\n          \"border border-border bg-transparent hover:bg-neutral/10 active:bg-neutral/20 text-fg disabled:border-disabled disabled:bg-transparent\",\n        success:\n          \"bg-success hover:bg-success-hover active:bg-success-active text-success-fg\",\n        warning:\n          \"bg-warning hover:bg-warning-hover active:bg-warning-active text-warning-fg\",\n        danger:\n          \"bg-danger hover:bg-danger-hover active:bg-danger-active text-danger-fg\",\n      },\n      size: {\n        sm: \"h-8 px-3 [&_svg]:w-4 [&_svg]:h-4\",\n        md: \"h-9 px-4 [&_svg]:w-4 [&_svg]:h-4\",\n        lg: \"h-10 px-5 [&_svg]:w-5 [&_svg]:h-5\",\n        icon: \"h-10 w-10\",\n      },\n      shape: {\n        rectangle: \"\",\n        square: \"\",\n        circle: \"rounded-full\",\n      },\n    },\n    compoundVariants: [\n      {\n        size: \"sm\",\n        shape: [\"square\", \"circle\"],\n        className: \"w-8 px-0\",\n      },\n      {\n        size: \"md\",\n        shape: [\"square\", \"circle\"],\n        className: \"w-9 px-0\",\n      },\n      {\n        size: \"lg\",\n        shape: [\"square\", \"circle\"],\n        className: \"w-10 px-0\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"md\",\n      shape: \"rectangle\",\n    },\n  },\n  {\n    responsiveVariants: [\"sm\", \"lg\"],\n  },\n);\n\nexport interface ButtonProps\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"prefix\">,\n    VariantProps<typeof buttonStyles> {\n  asChild?: boolean;\n  isLoading?: boolean;\n  isDisabled?: boolean;\n  children?: React.ReactNode;\n  suffix?: React.ReactNode;\n  href?: string;\n  target?: string;\n  prefix?: React.ReactNode;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      shape,\n      isLoading,\n      isDisabled,\n      children,\n      prefix,\n      suffix,\n      asChild = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const Element: React.ElementType = props.href ? \"a\" : Comp;\n\n    return (\n      <Element\n        className={cn(buttonStyles({ variant, size, shape }), className)}\n        ref={ref}\n        disabled={isDisabled || isLoading}\n        {...props}\n      >\n        {isLoading && <Loader aria-label=\"loading\" className=\"animate-spin\" />}\n        {prefix}\n        {typeof children === \"string\" ? (\n          <span className=\"truncate\">{children}</span>\n        ) : (\n          children\n        )}\n        {suffix}\n      </Element>\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonStyles };\n",
      "type": "registry:ui",
      "target": "components/ui/button.tsx"
    }
  ]
}