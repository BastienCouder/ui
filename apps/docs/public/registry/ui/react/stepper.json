{
  "name": "stepper",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/react/stepper.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Check, Loader2, X } from \"@/lib/icons\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/registry/ui/react/button\";\r\nimport {\r\n  Collapsible,\r\n  CollapsibleContent,\r\n} from \"@/registry/ui/react/collapsible\";\r\nimport { tv } from \"tailwind-variants\";\r\n\r\n// <---------- CONTEXT ---------->\r\n\r\ninterface StepperContextValue extends StepperProps {\r\n  clickable?: boolean;\r\n  isError?: boolean;\r\n  isLoading?: boolean;\r\n  isVertical?: boolean;\r\n  stepCount?: number;\r\n  expandVerticalSteps?: boolean;\r\n  activeStep: number;\r\n  initialStep: number;\r\n}\r\n\r\nconst StepperContext = React.createContext<\r\n  StepperContextValue & {\r\n    nextStep: () => void;\r\n    prevStep: () => void;\r\n    resetSteps: () => void;\r\n    setStep: (step: number) => void;\r\n  }\r\n>({\r\n  steps: [],\r\n  activeStep: 0,\r\n  initialStep: 0,\r\n  nextStep: () => {},\r\n  prevStep: () => {},\r\n  resetSteps: () => {},\r\n  setStep: () => {},\r\n});\r\n\r\ninterface StepperContextProviderProps {\r\n  value: Omit<StepperContextValue, \"activeStep\">;\r\n  children: React.ReactNode;\r\n}\r\n\r\nfunction StepperProvider({ value, children }: StepperContextProviderProps) {\r\n  const isError = value.state === \"error\";\r\n  const isLoading = value.state === \"loading\";\r\n\r\n  const [activeStep, setActiveStep] = React.useState(value.initialStep);\r\n\r\n  const nextStep = () => {\r\n    setActiveStep((prev) => prev + 1);\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setActiveStep((prev) => prev - 1);\r\n  };\r\n\r\n  const resetSteps = () => {\r\n    setActiveStep(value.initialStep);\r\n  };\r\n\r\n  const setStep = (step: number) => {\r\n    setActiveStep(step);\r\n  };\r\n\r\n  return (\r\n    <StepperContext.Provider\r\n      value={{\r\n        ...value,\r\n        isError,\r\n        isLoading,\r\n        activeStep,\r\n        nextStep,\r\n        prevStep,\r\n        resetSteps,\r\n        setStep,\r\n      }}\r\n    >\r\n      {children}\r\n    </StepperContext.Provider>\r\n  );\r\n}\r\n\r\n// <---------- HOOKS ---------->\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = React.useRef<T>();\r\n\r\n  React.useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n\r\n  return ref.current;\r\n}\r\n\r\nfunction useStepper() {\r\n  const context = React.useContext(StepperContext);\r\n\r\n  if (context === undefined)\r\n    throw new Error(\"useStepper must be used within a StepperProvider\");\r\n\r\n  const { children, className, ...rest } = context;\r\n\r\n  const isLastStep = context.activeStep === context.steps.length - 1;\r\n  const hasCompletedAllSteps = context.activeStep === context.steps.length;\r\n\r\n  const previousActiveStep = usePrevious(context.activeStep);\r\n\r\n  const currentStep = context.steps[context.activeStep];\r\n  const isOptionalStep = !!currentStep?.optional;\r\n\r\n  const isDisabledStep = context.activeStep === 0;\r\n\r\n  return {\r\n    ...rest,\r\n    isLastStep,\r\n    hasCompletedAllSteps,\r\n    isOptionalStep,\r\n    isDisabledStep,\r\n    currentStep,\r\n    previousActiveStep,\r\n  };\r\n}\r\n\r\nfunction useMediaQuery(query: string) {\r\n  const [value, setValue] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    function onChange(event: MediaQueryListEvent) {\r\n      setValue(event.matches);\r\n    }\r\n\r\n    const result = matchMedia(query);\r\n    result.addEventListener(\"change\", onChange);\r\n    setValue(result.matches);\r\n\r\n    return () => result.removeEventListener(\"change\", onChange);\r\n  }, [query]);\r\n\r\n  return value;\r\n}\r\n\r\n// <---------- STEPS ---------->\r\n\r\ninterface StepItem {\r\n  id?: string;\r\n  label?: string;\r\n  description?: string;\r\n  icon?: IconType;\r\n  optional?: boolean;\r\n}\r\n\r\ninterface StepOptions {\r\n  orientation?: \"vertical\" | \"horizontal\";\r\n  state?: \"loading\" | \"error\";\r\n  responsive?: boolean;\r\n  checkIcon?: IconType;\r\n  errorIcon?: IconType;\r\n  onClickStep?: (step: number, setStep: (step: number) => void) => void;\r\n  mobileBreakpoint?: string;\r\n  variant?: \"circle\" | \"circle-alt\" | \"line\";\r\n  expandVerticalSteps?: boolean;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  styles?: {\r\n    /** Styles for the main container */\r\n    \"main-container\"?: string;\r\n    /** Styles for the horizontal step */\r\n    \"horizontal-step\"?: string;\r\n    /** Styles for the horizontal step container (button and labels) */\r\n    \"horizontal-step-container\"?: string;\r\n    /** Styles for the vertical step */\r\n    \"vertical-step\"?: string;\r\n    /** Styles for the vertical step container (button and labels) */\r\n    \"vertical-step-container\"?: string;\r\n    /** Styles for the vertical step content */\r\n    \"vertical-step-content\"?: string;\r\n    /** Styles for the step button container */\r\n    \"step-button-container\"?: string;\r\n    /** Styles for the label and description container */\r\n    \"step-label-container\"?: string;\r\n    /** Styles for the step label */\r\n    \"step-label\"?: string;\r\n    /** Styles for the step description */\r\n    \"step-description\"?: string;\r\n  };\r\n  variables?: {\r\n    \"--step-icon-size\"?: string;\r\n    \"--step-gap\"?: string;\r\n  };\r\n  scrollTracking?: boolean;\r\n}\r\ninterface StepperProps extends StepOptions {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  initialStep: number;\r\n  steps: StepItem[];\r\n}\r\n\r\nconst VARIABLE_SIZES = {\r\n  sm: \"36px\",\r\n  md: \"40px\",\r\n  lg: \"44px\",\r\n};\r\n\r\nconst Stepper = React.forwardRef<HTMLDivElement, StepperProps>(\r\n  (props, ref: React.Ref<HTMLDivElement>) => {\r\n    const {\r\n      className,\r\n      children,\r\n      orientation: orientationProp,\r\n      state,\r\n      responsive,\r\n      checkIcon,\r\n      errorIcon,\r\n      onClickStep,\r\n      mobileBreakpoint,\r\n      expandVerticalSteps = false,\r\n      initialStep = 0,\r\n      size,\r\n      steps,\r\n      variant,\r\n      styles,\r\n      variables,\r\n      scrollTracking = false,\r\n      ...rest\r\n    } = props;\r\n\r\n    const childArr = React.Children.toArray(children);\r\n\r\n    const items = [] as React.ReactElement[];\r\n\r\n    const footer = childArr.map((child, _index) => {\r\n      if (!React.isValidElement(child))\r\n        throw new Error(\"Stepper children must be valid React elements.\");\r\n\r\n      if (child.type === Step) {\r\n        items.push(child);\r\n        return null;\r\n      }\r\n\r\n      return child;\r\n    });\r\n\r\n    const stepCount = items.length;\r\n\r\n    const isMobile = useMediaQuery(\r\n      `(max-width: ${mobileBreakpoint || \"768px\"})`,\r\n    );\r\n\r\n    const clickable = !!onClickStep;\r\n\r\n    const orientation = isMobile && responsive ? \"vertical\" : orientationProp;\r\n\r\n    const isVertical = orientation === \"vertical\";\r\n\r\n    return (\r\n      <StepperProvider\r\n        value={{\r\n          initialStep,\r\n          orientation,\r\n          state,\r\n          size,\r\n          responsive,\r\n          checkIcon,\r\n          errorIcon,\r\n          onClickStep,\r\n          clickable,\r\n          stepCount,\r\n          isVertical,\r\n          variant: variant || \"circle\",\r\n          expandVerticalSteps,\r\n          steps,\r\n          scrollTracking,\r\n          styles,\r\n        }}\r\n      >\r\n        <div\r\n          ref={ref}\r\n          className={cn(\r\n            \"stepper__main-container\",\r\n            \"flex w-full flex-wrap\",\r\n            stepCount === 1 ? \"justify-end\" : \"justify-between\",\r\n            orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\r\n            variant === \"line\" && orientation === \"horizontal\" && \"gap-4\",\r\n            className,\r\n            styles?.[\"main-container\"],\r\n          )}\r\n          style={\r\n            {\r\n              \"--step-icon-size\":\r\n                variables?.[\"--step-icon-size\"] ||\r\n                `${VARIABLE_SIZES[size || \"md\"]}`,\r\n              \"--step-gap\": variables?.[\"--step-gap\"] || \"8px\",\r\n            } as React.CSSProperties\r\n          }\r\n          {...rest}\r\n        >\r\n          <VerticalContent>{items}</VerticalContent>\r\n        </div>\r\n        {orientation === \"horizontal\" && (\r\n          <HorizontalContent>{items}</HorizontalContent>\r\n        )}\r\n        {footer}\r\n      </StepperProvider>\r\n    );\r\n  },\r\n);\r\n\r\nStepper.defaultProps = {\r\n  size: \"md\",\r\n  orientation: \"horizontal\",\r\n  responsive: true,\r\n};\r\n\r\nfunction VerticalContent({ children }: { children: React.ReactNode }) {\r\n  const { activeStep } = useStepper();\r\n\r\n  const childArr = React.Children.toArray(children);\r\n  const stepCount = childArr.length;\r\n\r\n  return (\r\n    <>\r\n      {React.Children.map(children, (child, i) => {\r\n        const isCompletedStep =\r\n          (React.isValidElement(child) &&\r\n            (child.props as any).isCompletedStep) ??\r\n          i < activeStep;\r\n        const isLastStep = i === stepCount - 1;\r\n        const isCurrentStep = i === activeStep;\r\n\r\n        const stepProps = {\r\n          index: i,\r\n          isCompletedStep,\r\n          isCurrentStep,\r\n          isLastStep,\r\n        };\r\n\r\n        if (React.isValidElement(child))\r\n          return React.cloneElement(child, stepProps);\r\n\r\n        return null;\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction HorizontalContent({ children }: { children: React.ReactNode }) {\r\n  const { activeStep } = useStepper();\r\n  const childArr = React.Children.toArray(children);\r\n\r\n  if (activeStep > childArr.length) return null;\r\n\r\n  return (\r\n    <>\r\n      {React.Children.map(childArr[activeStep], (node) => {\r\n        if (!React.isValidElement(node)) return null;\r\n\r\n        return React.Children.map(\r\n          node.props.children,\r\n          (childNode) => childNode,\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\n// <---------- STEP ---------->\r\n\r\ninterface StepProps extends React.HTMLAttributes<HTMLLIElement> {\r\n  label?: string | React.ReactNode;\r\n  description?: string;\r\n  icon?: IconType;\r\n  state?: \"loading\" | \"error\";\r\n  checkIcon?: IconType;\r\n  errorIcon?: IconType;\r\n  isCompletedStep?: boolean;\r\n  isKeepError?: boolean;\r\n  onClickStep?: (step: number, setStep: (step: number) => void) => void;\r\n}\r\n\r\ninterface StepSharedProps extends StepProps {\r\n  isLastStep?: boolean;\r\n  isCurrentStep?: boolean;\r\n  index?: number;\r\n  hasVisited: boolean | undefined;\r\n  isError?: boolean;\r\n  isLoading?: boolean;\r\n}\r\n\r\n// Props which shouldn't be passed to to the Step component from the user\r\ninterface StepInternalConfig {\r\n  index: number;\r\n  isCompletedStep?: boolean;\r\n  isCurrentStep?: boolean;\r\n  isLastStep?: boolean;\r\n}\r\n\r\ninterface FullStepProps extends StepProps, StepInternalConfig {}\r\n\r\nconst Step = React.forwardRef<HTMLLIElement, StepProps>(\r\n  (props, ref: React.Ref<any>) => {\r\n    const {\r\n      children,\r\n      description,\r\n      icon,\r\n      state,\r\n      checkIcon,\r\n      errorIcon,\r\n      index,\r\n      isCompletedStep,\r\n      isCurrentStep,\r\n      isLastStep,\r\n      isKeepError,\r\n      label,\r\n      onClickStep,\r\n    } = props as FullStepProps;\r\n\r\n    const { isVertical, isError, isLoading, clickable } = useStepper();\r\n\r\n    const hasVisited = isCurrentStep || isCompletedStep;\r\n\r\n    const sharedProps = {\r\n      isLastStep,\r\n      isCompletedStep,\r\n      isCurrentStep,\r\n      index,\r\n      isError,\r\n      isLoading,\r\n      clickable,\r\n      label,\r\n      description,\r\n      hasVisited,\r\n      icon,\r\n      isKeepError,\r\n      checkIcon,\r\n      state,\r\n      errorIcon,\r\n      onClickStep,\r\n    };\r\n\r\n    const renderStep = () => {\r\n      switch (isVertical) {\r\n        case true:\r\n          return (\r\n            <VerticalStep ref={ref} {...sharedProps}>\r\n              {children}\r\n            </VerticalStep>\r\n          );\r\n        default:\r\n          return <HorizontalStep ref={ref} {...sharedProps} />;\r\n      }\r\n    };\r\n\r\n    return renderStep();\r\n  },\r\n);\r\n\r\n// <---------- VERTICAL STEP ---------->\r\n\r\ntype VerticalStepProps = StepSharedProps & {\r\n  children?: React.ReactNode;\r\n};\r\n\r\nconst verticalStepVariants = tv({\r\n  base: [\r\n    \"flex flex-col relative transition-all duration-200\",\r\n    \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\r\n    \"data-[invalid=true]:[&:not(:last-child)]:after:bg-danger\",\r\n  ],\r\n  variants: {\r\n    variant: {\r\n      circle: cn(\r\n        \"[&:not(:last-child)]:gap-[var(--step-gap)] [&:not(:last-child)]:pb-[var(--step-gap)]\",\r\n        \"[&:not(:last-child)]:after:bg-border [&:not(:last-child)]:after:w-[2px] [&:not(:last-child)]:after:content-['']\",\r\n        \"[&:not(:last-child)]:after:inset-x-[calc(var(--step-icon-size)/2)]\",\r\n        \"[&:not(:last-child)]:after:absolute\",\r\n        \"[&:not(:last-child)]:after:top-[calc(var(--step-icon-size)+var(--step-gap))]\",\r\n        \"[&:not(:last-child)]:after:bottom-[var(--step-gap)]\",\r\n        \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\",\r\n      ),\r\n      line: \"flex-1 border-t-0 mb-4\",\r\n    },\r\n  },\r\n});\r\n\r\nconst VerticalStep = React.forwardRef<HTMLDivElement, VerticalStepProps>(\r\n  (props, ref) => {\r\n    const {\r\n      children,\r\n      index,\r\n      isCompletedStep,\r\n      isCurrentStep,\r\n      label,\r\n      description,\r\n      icon,\r\n      hasVisited,\r\n      state,\r\n      checkIcon: checkIconProp,\r\n      errorIcon: errorIconProp,\r\n      onClickStep,\r\n    } = props;\r\n\r\n    const {\r\n      checkIcon: checkIconContext,\r\n      errorIcon: errorIconContext,\r\n      isError,\r\n      isLoading,\r\n      variant,\r\n      onClickStep: onClickStepGeneral,\r\n      clickable,\r\n      expandVerticalSteps,\r\n      styles,\r\n      scrollTracking,\r\n      orientation,\r\n      steps,\r\n      setStep,\r\n      isLastStep: isLastStepCurrentStep,\r\n      previousActiveStep,\r\n    } = useStepper();\r\n\r\n    const opacity = hasVisited ? 1 : 0.8;\r\n    const localIsLoading = isLoading || state === \"loading\";\r\n    const localIsError = isError || state === \"error\";\r\n\r\n    const isLastStep = index === steps.length - 1;\r\n\r\n    const active =\r\n      variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep;\r\n    const checkIcon = checkIconProp || checkIconContext;\r\n    const errorIcon = errorIconProp || errorIconContext;\r\n\r\n    const renderChildren = () => {\r\n      if (!expandVerticalSteps) {\r\n        return (\r\n          <Collapsible open={isCurrentStep}>\r\n            <CollapsibleContent\r\n              ref={(node) => {\r\n                if (\r\n                  // If the step is the first step and the previous step\r\n                  // was the last step or if the step is not the first step\r\n                  // This prevents initial scrolling when the stepper\r\n                  // is located anywhere other than the top of the view.\r\n                  scrollTracking &&\r\n                  ((index === 0 &&\r\n                    previousActiveStep &&\r\n                    previousActiveStep === steps.length) ||\r\n                    (index && index > 0))\r\n                ) {\r\n                  node?.scrollIntoView({\r\n                    behavior: \"smooth\",\r\n                    block: \"center\",\r\n                  });\r\n                }\r\n              }}\r\n              className=\"data-[state=open]:animate-collapsible-down data-[state=closed]:animate-collapsible-up overflow-hidden\"\r\n            >\r\n              {children}\r\n            </CollapsibleContent>\r\n          </Collapsible>\r\n        );\r\n      }\r\n      return children;\r\n    };\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"stepper__vertical-step\",\r\n          verticalStepVariants({\r\n            variant: variant?.includes(\"circle\") ? \"circle\" : \"line\",\r\n          }),\r\n          isLastStepCurrentStep && \"gap-[var(--step-gap)]\",\r\n          styles?.[\"vertical-step\"],\r\n        )}\r\n        data-optional={steps[index || 0]?.optional}\r\n        data-completed={isCompletedStep}\r\n        data-active={active}\r\n        data-clickable={clickable || !!onClickStep}\r\n        data-invalid={localIsError}\r\n        onClick={() => {\r\n          if (onClickStep) onClickStep(index || 0, setStep);\r\n          else onClickStepGeneral?.(index || 0, setStep);\r\n        }}\r\n      >\r\n        <div\r\n          data-vertical\r\n          data-active={active}\r\n          className={cn(\r\n            \"stepper__vertical-step-container\",\r\n            \"flex items-center\",\r\n            variant === \"line\" &&\r\n              \"data-[active=true]:border-primary border-s-[3px] py-2 ps-3\",\r\n            styles?.[\"vertical-step-container\"],\r\n          )}\r\n        >\r\n          <StepButtonContainer\r\n            {...{ isLoading: localIsLoading, isError: localIsError, ...props }}\r\n          >\r\n            <StepIcon\r\n              {...{\r\n                index,\r\n                isError: localIsError,\r\n                isLoading: localIsLoading,\r\n                isCurrentStep,\r\n                isCompletedStep,\r\n              }}\r\n              icon={icon}\r\n              checkIcon={checkIcon}\r\n              errorIcon={errorIcon}\r\n            />\r\n          </StepButtonContainer>\r\n          <StepLabel\r\n            label={label}\r\n            description={description}\r\n            {...{ isCurrentStep, opacity }}\r\n          />\r\n        </div>\r\n        <div\r\n          className={cn(\r\n            \"stepper__vertical-step-content\",\r\n            !isLastStep && \"min-h-4\",\r\n            variant !== \"line\" && \"ps-[--step-icon-size]\",\r\n            variant === \"line\" && orientation === \"vertical\" && \"min-h-0\",\r\n            styles?.[\"vertical-step-content\"],\r\n          )}\r\n        >\r\n          {renderChildren()}\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\n// <---------- HORIZONTAL STEP ---------->\r\n\r\nconst HorizontalStep = React.forwardRef<HTMLDivElement, StepSharedProps>(\r\n  (props, ref) => {\r\n    const {\r\n      isError,\r\n      isLoading,\r\n      onClickStep,\r\n      variant,\r\n      clickable,\r\n      checkIcon: checkIconContext,\r\n      errorIcon: errorIconContext,\r\n      styles,\r\n      steps,\r\n      setStep,\r\n    } = useStepper();\r\n\r\n    const {\r\n      index,\r\n      isCompletedStep,\r\n      isCurrentStep,\r\n      hasVisited,\r\n      icon,\r\n      label,\r\n      description,\r\n      isKeepError,\r\n      state,\r\n      checkIcon: checkIconProp,\r\n      errorIcon: errorIconProp,\r\n    } = props;\r\n\r\n    const localIsLoading = isLoading || state === \"loading\";\r\n    const localIsError = isError || state === \"error\";\r\n\r\n    const opacity = hasVisited ? 1 : 0.8;\r\n\r\n    const active =\r\n      variant === \"line\" ? isCompletedStep || isCurrentStep : isCompletedStep;\r\n\r\n    const checkIcon = checkIconProp || checkIconContext;\r\n    const errorIcon = errorIconProp || errorIconContext;\r\n\r\n    return (\r\n      <div\r\n        aria-disabled={!hasVisited}\r\n        className={cn(\r\n          \"stepper__horizontal-step\",\r\n          \"relative flex items-center transition-all duration-200\",\r\n          \"[&:not(:last-child)]:flex-1\",\r\n          \"[&:not(:last-child)]:after:transition-all [&:not(:last-child)]:after:duration-200\",\r\n          \"[&:not(:last-child)]:after:bg-border [&:not(:last-child)]:after:h-[2px] [&:not(:last-child)]:after:content-['']\",\r\n          \"data-[completed=true]:[&:not(:last-child)]:after:bg-primary\",\r\n          \"data-[invalid=true]:[&:not(:last-child)]:after:bg-danger\",\r\n          variant === \"circle-alt\" &&\r\n            \"flex-1 flex-col justify-start [&:not(:last-child)]:after:relative [&:not(:last-child)]:after:end-[50%] [&:not(:last-child)]:after:start-[50%] [&:not(:last-child)]:after:top-[calc(var(--step-icon-size)/2)] [&:not(:last-child)]:after:-order-1 [&:not(:last-child)]:after:w-[calc((100%-var(--step-icon-size))-(var(--step-gap)))]\",\r\n          variant === \"circle\" &&\r\n            \"[&:not(:last-child)]:after:me-[var(--step-gap)] [&:not(:last-child)]:after:ms-[var(--step-gap)] [&:not(:last-child)]:after:flex-1\",\r\n          variant === \"line\" &&\r\n            \"data-[active=true]:border-primary flex-1 flex-col border-t-[3px]\",\r\n          styles?.[\"horizontal-step\"],\r\n        )}\r\n        data-optional={steps[index || 0]?.optional}\r\n        data-completed={isCompletedStep}\r\n        data-active={active}\r\n        data-invalid={localIsError}\r\n        data-clickable={clickable}\r\n        onClick={() => onClickStep?.(index || 0, setStep)}\r\n        ref={ref}\r\n      >\r\n        <div\r\n          className={cn(\r\n            \"stepper__horizontal-step-container\",\r\n            \"flex items-center\",\r\n            variant === \"circle-alt\" && \"flex-col justify-center gap-1\",\r\n            variant === \"line\" && \"w-full\",\r\n            styles?.[\"horizontal-step-container\"],\r\n          )}\r\n        >\r\n          <StepButtonContainer\r\n            {...{ ...props, isError: localIsError, isLoading: localIsLoading }}\r\n          >\r\n            <StepIcon\r\n              {...{\r\n                index,\r\n                isCompletedStep,\r\n                isCurrentStep,\r\n                isError: localIsError,\r\n                isKeepError,\r\n                isLoading: localIsLoading,\r\n              }}\r\n              icon={icon}\r\n              checkIcon={checkIcon}\r\n              errorIcon={errorIcon}\r\n            />\r\n          </StepButtonContainer>\r\n          <StepLabel\r\n            label={label}\r\n            description={description}\r\n            {...{ isCurrentStep, opacity }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\n// <---------- STEP BUTTON CONTAINER ---------->\r\n\r\ntype StepButtonContainerProps = StepSharedProps & {\r\n  children?: React.ReactNode;\r\n};\r\n\r\nfunction StepButtonContainer({\r\n  isCurrentStep,\r\n  isCompletedStep,\r\n  children,\r\n  isError,\r\n  isLoading: isLoadingProp,\r\n  onClickStep,\r\n}: StepButtonContainerProps) {\r\n  const {\r\n    clickable,\r\n    isLoading: isLoadingContext,\r\n    variant,\r\n    styles,\r\n  } = useStepper();\r\n\r\n  const currentStepClickable = clickable || !!onClickStep;\r\n\r\n  const isLoading = isLoadingProp || isLoadingContext;\r\n\r\n  if (variant === \"line\") return null;\r\n\r\n  return (\r\n    <Button\r\n      variant=\"quiet\"\r\n      tabIndex={currentStepClickable ? 0 : -1}\r\n      className={cn(\r\n        \"stepper__step-button-container\",\r\n        \"pointer-events-none rounded-full p-0\",\r\n        \"size-[var(--step-icon-size)]\",\r\n        \"flex items-center justify-center rounded-full border-2\",\r\n        \"data-[clickable=true]:pointer-events-auto\",\r\n        \"data-[active=true]:bg-primary data-[active=true]:border-primary data-[active=true]:text-primary-foreground\",\r\n        \"data-[current=true]:border-primary data-[current=true]:bg-secondary\",\r\n        \"data-[invalid=true]:bg-danger data-[invalid=true]:border-danger data-[invalid=true]:text-danger-foreground\",\r\n        styles?.[\"step-button-container\"],\r\n      )}\r\n      aria-current={isCurrentStep ? \"step\" : undefined}\r\n      data-current={isCurrentStep}\r\n      data-invalid={isError && (isCurrentStep || isCompletedStep)}\r\n      data-active={isCompletedStep}\r\n      data-clickable={currentStepClickable}\r\n      data-loading={isLoading && (isCurrentStep || isCompletedStep)}\r\n    >\r\n      {children}\r\n    </Button>\r\n  );\r\n}\r\n\r\n// <---------- STEP ICON ---------->\r\n\r\ntype IconType = React.ComponentType<any> | undefined;\r\n\r\nconst iconVariants = tv({\r\n  base: \"\",\r\n  variants: {\r\n    size: {\r\n      sm: \"w-4 h-4\",\r\n      md: \"w-4 h-4\",\r\n      lg: \"w-5 h-5\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"md\",\r\n  },\r\n});\r\n\r\ninterface StepIconProps {\r\n  isCompletedStep?: boolean;\r\n  isCurrentStep?: boolean;\r\n  isError?: boolean;\r\n  isLoading?: boolean;\r\n  isKeepError?: boolean;\r\n  icon?: IconType;\r\n  index?: number;\r\n  checkIcon?: IconType;\r\n  errorIcon?: IconType;\r\n}\r\n\r\nconst StepIcon = React.forwardRef<HTMLDivElement, StepIconProps>(\r\n  (props, ref): JSX.Element => {\r\n    const { size } = useStepper();\r\n\r\n    const {\r\n      isCompletedStep,\r\n      isCurrentStep,\r\n      isError,\r\n      isLoading,\r\n      isKeepError,\r\n      icon: CustomIcon,\r\n      index,\r\n      checkIcon: CustomCheckIcon,\r\n      errorIcon: CustomErrorIcon,\r\n    } = props;\r\n\r\n    const Icon = React.useMemo(() => CustomIcon || null, [CustomIcon]);\r\n    const ErrorIcon = React.useMemo(\r\n      () => CustomErrorIcon || null,\r\n      [CustomErrorIcon],\r\n    );\r\n    const CheckIcon = React.useMemo(\r\n      () => CustomCheckIcon || Check,\r\n      [CustomCheckIcon],\r\n    );\r\n\r\n    return React.useMemo(() => {\r\n      if (isCompletedStep) {\r\n        if (isError && isKeepError) {\r\n          return (\r\n            <div key=\"icon\">\r\n              <X className={cn(iconVariants({ size }))} />\r\n            </div>\r\n          );\r\n        }\r\n        return (\r\n          <div key=\"check-icon\">\r\n            <CheckIcon className={cn(iconVariants({ size }))} />\r\n          </div>\r\n        );\r\n      }\r\n      if (isCurrentStep) {\r\n        if (isError && ErrorIcon) {\r\n          return (\r\n            <div key=\"error-icon\">\r\n              <ErrorIcon className={cn(iconVariants({ size }))} />\r\n            </div>\r\n          );\r\n        }\r\n        if (isError) {\r\n          return (\r\n            <div key=\"icon\">\r\n              <X className={cn(iconVariants({ size }))} />\r\n            </div>\r\n          );\r\n        }\r\n        if (isLoading) {\r\n          return (\r\n            <Loader2 className={cn(iconVariants({ size }), \"animate-spin\")} />\r\n          );\r\n        }\r\n      }\r\n      if (Icon) {\r\n        return (\r\n          <div key=\"step-icon\">\r\n            <Icon className={cn(iconVariants({ size }))} />\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <span\r\n          ref={ref}\r\n          key=\"label\"\r\n          className={cn(\"text-md text-center font-medium\")}\r\n        >\r\n          {(index || 0) + 1}\r\n        </span>\r\n      );\r\n    }, [\r\n      isCompletedStep,\r\n      isCurrentStep,\r\n      isError,\r\n      isLoading,\r\n      Icon,\r\n      index,\r\n      CheckIcon,\r\n      ErrorIcon,\r\n      isKeepError,\r\n      ref,\r\n      size,\r\n    ]);\r\n  },\r\n);\r\n\r\n// <---------- STEP LABEL ---------->\r\n\r\ninterface StepLabelProps {\r\n  isCurrentStep?: boolean;\r\n  opacity: number;\r\n  label?: string | React.ReactNode;\r\n  description?: string | null;\r\n}\r\n\r\nconst labelVariants = tv({\r\n  base: \"\",\r\n  variants: {\r\n    size: {\r\n      sm: \"text-sm\",\r\n      md: \"text-sm\",\r\n      lg: \"text-base\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"md\",\r\n  },\r\n});\r\n\r\nconst descriptionVariants = tv({\r\n  base: \"\",\r\n  variants: {\r\n    size: {\r\n      sm: \"text-xs\",\r\n      md: \"text-xs\",\r\n      lg: \"text-sm\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"md\",\r\n  },\r\n});\r\n\r\nfunction StepLabel({\r\n  isCurrentStep,\r\n  opacity,\r\n  label,\r\n  description,\r\n}: StepLabelProps) {\r\n  const { variant, styles, size, orientation } = useStepper();\r\n  const shouldRender = !!label || !!description;\r\n\r\n  return shouldRender ? (\r\n    <div\r\n      aria-current={isCurrentStep ? \"step\" : undefined}\r\n      className={cn(\r\n        \"stepper__step-label-container\",\r\n        \"flex flex-col\",\r\n        variant !== \"line\" ? \"ms-2\" : orientation === \"horizontal\" && \"my-2\",\r\n        variant === \"circle-alt\" && \"text-center\",\r\n        variant === \"circle-alt\" && orientation === \"horizontal\" && \"ms-0\",\r\n        variant === \"circle-alt\" && orientation === \"vertical\" && \"text-start\",\r\n        styles?.[\"step-label-container\"],\r\n      )}\r\n      style={{\r\n        opacity,\r\n      }}\r\n    >\r\n      {!!label && (\r\n        <span\r\n          className={cn(\r\n            \"stepper__step-label\",\r\n            labelVariants({ size }),\r\n            styles?.[\"step-label\"],\r\n          )}\r\n        >\r\n          {label}\r\n        </span>\r\n      )}\r\n      {!!description && (\r\n        <span\r\n          className={cn(\r\n            \"stepper__step-description\",\r\n            \"text-muted-foreground\",\r\n            descriptionVariants({ size }),\r\n            styles?.[\"step-description\"],\r\n          )}\r\n        >\r\n          {description}\r\n        </span>\r\n      )}\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nexport { Stepper, Step, useStepper };\r\nexport type { StepProps, StepperProps, StepItem };\r\n",
      "type": "registry:ui",
      "target": "components/ui/stepper.tsx"
    }
  ]
}