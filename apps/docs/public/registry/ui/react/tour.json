{
  "name": "tour",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/tour.tsx",
      "content": "/* eslint-disable no-console */\r\n\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nexport interface TourContext<T extends string> {\r\n  nodes: Map<\r\n    string,\r\n    {\r\n      ref: HTMLElement;\r\n      render: React.ReactNode;\r\n      name: T;\r\n    }\r\n  >;\r\n  show: boolean;\r\n  current: number;\r\n  next: () => void;\r\n  previous: () => void;\r\n  close: () => void;\r\n  open: () => void;\r\n}\r\n\r\nexport interface TourProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport interface TourFocusProps<T extends string> {\r\n  children: React.ReactNode;\r\n  tourRender: React.ReactNode;\r\n  name: T;\r\n}\r\nexport function TourFactory<T extends string>(\r\n  order: T[],\r\n): {\r\n  TourProvider: React.FC<TourProps>;\r\n  context: React.Context<TourContext<T>>;\r\n  useContext: () => TourContext<T>;\r\n  TourFocus: React.FC<TourFocusProps<T>>;\r\n} {\r\n  const tourContext = createContext<TourContext<T>>({\r\n    nodes: new Map(),\r\n    show: false,\r\n    current: 0,\r\n    next: () => {\r\n      console.log(\"empty\");\r\n    },\r\n    previous: () => {\r\n      console.log(\"empty\");\r\n    },\r\n    close: () => {\r\n      console.log(\"empty\");\r\n    },\r\n    open: () => {\r\n      console.log(\"empty\");\r\n    },\r\n  });\r\n\r\n  function TourPortal() {\r\n    const ctx = useContext(tourContext);\r\n\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const [, forceUpdate] = React.useState({});\r\n\r\n    const currentElement = useMemo(\r\n      () => ctx.nodes.get(order[ctx.current] ?? \"\"), // Provide a default value to avoid undefined\r\n      [ctx],\r\n    );\r\n\r\n    useEffect(() => {\r\n      const handleResize = () => {\r\n        forceUpdate({});\r\n      };\r\n\r\n      window.addEventListener(\"resize\", handleResize);\r\n      window.addEventListener(\"scroll\", handleResize);\r\n\r\n      return () => {\r\n        window.removeEventListener(\"resize\", handleResize);\r\n        window.removeEventListener(\"scroll\", handleResize);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      if (ctx.show) forceUpdate({});\r\n    }, [ctx.show]);\r\n\r\n    if (!currentElement) return <></>;\r\n\r\n    const currentElementRect = currentElement.ref.getBoundingClientRect();\r\n\r\n    const height = ref.current?.getBoundingClientRect().height ?? 0;\r\n    const width = ref.current?.getBoundingClientRect().width ?? 0;\r\n\r\n    const closest = (): React.CSSProperties => {\r\n      const isCloseToTop = currentElementRect.top < height;\r\n      const isCloseToLeft = currentElementRect.left < width;\r\n      const isCloseToRight =\r\n        currentElementRect.right > window.innerWidth - width;\r\n\r\n      if (isCloseToLeft) {\r\n        return {\r\n          left: currentElementRect.x + currentElementRect.width,\r\n          top:\r\n            currentElementRect.y - height / 2 + currentElementRect.height / 2,\r\n        };\r\n      }\r\n\r\n      if (isCloseToRight) {\r\n        return {\r\n          left: currentElementRect.x - width,\r\n          top:\r\n            currentElementRect.y - height / 2 + currentElementRect.height / 2,\r\n        };\r\n      }\r\n\r\n      if (isCloseToTop) {\r\n        return {\r\n          left: currentElementRect.x - width / 2 + currentElementRect.width / 2,\r\n          top: currentElementRect.y + currentElementRect.height,\r\n        };\r\n      }\r\n\r\n      return {\r\n        left: currentElementRect.x - width / 2 + currentElementRect.width / 2,\r\n        top: currentElementRect.y - height,\r\n      };\r\n    };\r\n\r\n    return createPortal(\r\n      <div\r\n        id=\"tour\"\r\n        className={cn(\r\n          \"pointer-events-auto fixed left-0 top-0 h-screen w-screen transition-none\",\r\n          !ctx.show ? \"invisible\" : \"visible\",\r\n        )}\r\n      >\r\n        <div\r\n          ref={ref}\r\n          className={cn(\r\n            `absolute z-50 transition-all duration-500 ease-in-out`,\r\n          )}\r\n          style={{\r\n            ...closest(),\r\n          }}\r\n        >\r\n          {currentElement.render}\r\n        </div>\r\n        <div\r\n          className=\"absolute z-40 h-screen w-screen overflow-hidden opacity-80 shadow-[0_0_0_100vw_rgba(0,0,0,.99)] transition-all duration-500 ease-in-out\"\r\n          style={{\r\n            height: currentElementRect.height,\r\n            width: currentElementRect.width,\r\n            left: currentElementRect.x,\r\n            top: currentElementRect.y,\r\n          }}\r\n        />\r\n      </div>,\r\n      document.body,\r\n    );\r\n  }\r\n\r\n  return {\r\n    TourProvider: function TourProvider({ children }: TourProps) {\r\n      const nodes = useRef<TourContext<T>[\"nodes\"]>(new Map());\r\n\r\n      const [show, setShow] = useState(false);\r\n      const [current, setCurrent] = useState(0);\r\n\r\n      const getNextIndex = (currIndex: number, nextDiff: number): number => {\r\n        const lookAheadIndex = currIndex + nextDiff;\r\n\r\n        if (lookAheadIndex >= order.length || lookAheadIndex < 0)\r\n          return currIndex;\r\n\r\n        const nextKey = order[lookAheadIndex];\r\n\r\n        if (nextKey && nodes.current.has(nextKey)) {\r\n          return lookAheadIndex;\r\n        }\r\n\r\n        return getNextIndex(lookAheadIndex, nextDiff);\r\n      };\r\n\r\n      return (\r\n        <tourContext.Provider\r\n          value={{\r\n            nodes: nodes.current,\r\n            current,\r\n            show,\r\n            next: () => {\r\n              setCurrent((state) =>\r\n                Math.min(getNextIndex(state, 1), order.length - 1),\r\n              );\r\n            },\r\n            previous: () => {\r\n              setCurrent((state) => Math.max(getNextIndex(state, -1), 0));\r\n            },\r\n            close: () => {\r\n              setShow(false);\r\n            },\r\n            open: () => {\r\n              setShow(true);\r\n            },\r\n          }}\r\n        >\r\n          <TourPortal />\r\n          {children}\r\n        </tourContext.Provider>\r\n      );\r\n    },\r\n    context: tourContext,\r\n    useContext: () => useContext(tourContext),\r\n    TourFocus: function TourFocus({\r\n      children,\r\n      tourRender,\r\n      name,\r\n    }: TourFocusProps<T>) {\r\n      const ctx = useContext(tourContext);\r\n      return (\r\n        <div\r\n          ref={(divRef) => {\r\n            if (divRef && !ctx.nodes.has(name)) {\r\n              ctx.nodes.set(name, {\r\n                ref: divRef,\r\n                render: tourRender,\r\n                name: name,\r\n              });\r\n            }\r\n          }}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n    },\r\n  };\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/ui/tour.tsx"
    }
  ]
}