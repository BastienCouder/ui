{
  "name": "tooltip",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/tooltip.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { tv } from \"tailwind-variants\";\r\n\r\nconst tooltipVariants = tv({\r\n  base: \"overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n  variants: {\r\n    variant: {\r\n      default: \"bg-primary text-primary-fg\",\r\n      outline: \"border bg-bg text-fg\",\r\n      secondary: \"bg-secondary text-secondary-fg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"secondary\",\r\n  },\r\n});\r\n\r\nconst TooltipProvider = TooltipPrimitive.Provider;\r\n\r\ninterface TooltipProps {\r\n  children: React.ReactNode | string;\r\n  content?: React.ReactNode;\r\n  variant?: \"default\" | \"outline\" | \"secondary\";\r\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\r\n  offset?: number;\r\n  delay?: number;\r\n  shouldFlip?: boolean;\r\n  arrow?: boolean;\r\n}\r\n\r\nconst Tooltip: React.FC<TooltipProps> = ({\r\n  children,\r\n  content,\r\n  variant,\r\n  placement = \"top\",\r\n  offset = 10,\r\n  delay = 0,\r\n  shouldFlip = true,\r\n  arrow = false,\r\n  ...props\r\n}) => {\r\n  const wrappedChildren =\r\n    typeof children === \"string\" || typeof children === \"number\" ? (\r\n      <>{children}</>\r\n    ) : (\r\n      children\r\n    );\r\n\r\n  return (\r\n    <TooltipProvider>\r\n      <TooltipPrimitive.Root delayDuration={delay} {...props}>\r\n        {content ? (\r\n          <>\r\n            <TooltipTrigger asChild>{wrappedChildren}</TooltipTrigger>\r\n            <TooltipContent\r\n              variant={variant}\r\n              placement={placement}\r\n              offset={offset}\r\n              shouldFlip={shouldFlip}\r\n              arrow={arrow}\r\n            >\r\n              {content}\r\n            </TooltipContent>\r\n          </>\r\n        ) : (\r\n          wrappedChildren\r\n        )}\r\n      </TooltipPrimitive.Root>\r\n    </TooltipProvider>\r\n  );\r\n};\r\n\r\nconst TooltipTrigger = TooltipPrimitive.Trigger;\r\n\r\ninterface TooltipContentProps\r\n  extends React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> {\r\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\r\n  offset?: number;\r\n  shouldFlip?: boolean;\r\n  arrow?: boolean;\r\n  variant?: \"default\" | \"outline\" | \"secondary\";\r\n}\r\n\r\nconst TooltipContent = React.forwardRef<\r\n  React.ElementRef<typeof TooltipPrimitive.Content>,\r\n  TooltipContentProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      placement = \"top\",\r\n      offset = 2,\r\n      shouldFlip = true,\r\n      arrow = false,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => (\r\n    <TooltipPrimitive.Content\r\n      ref={ref}\r\n      side={placement}\r\n      sideOffset={offset}\r\n      avoidCollisions={shouldFlip}\r\n      className={cn(tooltipVariants({ variant, className }))}\r\n      {...props}\r\n    >\r\n      {props.children}\r\n      {arrow && (\r\n        <TooltipPrimitive.Arrow className=\"fill-current text-popover\" />\r\n      )}\r\n    </TooltipPrimitive.Content>\r\n  ),\r\n);\r\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\r\nconst TooltipArrow = TooltipPrimitive.TooltipArrow;\r\n\r\nconst TooltipRoot: React.FC<{ children: React.ReactNode; delay?: number }> = ({\r\n  children,\r\n  delay,\r\n}) => {\r\n  return (\r\n    <TooltipProvider>\r\n      <TooltipPrimitive.Root delayDuration={delay}>\r\n        {children}\r\n      </TooltipPrimitive.Root>\r\n    </TooltipProvider>\r\n  );\r\n};\r\n\r\nexport {\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipRoot,\r\n  TooltipArrow,\r\n};\r\n",
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx"
    }
  ]
}