{
  "name": "popover",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-popover"
  ],
  "files": [
    {
      "path": "ui/react/popover.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface PopoverProps {\r\n  children: React.ReactNode | string;\r\n  content?: React.ReactNode;\r\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\r\n  offset?: number;\r\n  delay?: number;\r\n  shouldFlip?: boolean;\r\n  arrow?: boolean;\r\n  className?: string;\r\n  flexContent?: \"start\" | \"center\" | \"end\";\r\n  open?: any;\r\n  onOpenChange?: any;\r\n}\r\n\r\nconst Popover: React.FC<PopoverProps> = ({\r\n  children,\r\n  content,\r\n  className,\r\n  placement = \"bottom\",\r\n  offset = 10,\r\n  delay = 0,\r\n  shouldFlip = true,\r\n  arrow = false,\r\n  flexContent = \"center\",\r\n  ...props\r\n}) => {\r\n  const wrappedChildren =\r\n    typeof children === \"string\" || typeof children === \"number\" ? (\r\n      <>{children}</>\r\n    ) : (\r\n      children\r\n    );\r\n\r\n  return (\r\n    <PopoverPrimitive.Root {...props}>\r\n      {content ? (\r\n        <>\r\n          <PopoverTrigger asChild>{wrappedChildren}</PopoverTrigger>\r\n          <PopoverContent\r\n            placement={placement}\r\n            offset={offset}\r\n            shouldFlip={shouldFlip}\r\n            arrow={arrow}\r\n            delay={delay}\r\n            flexContent={flexContent}\r\n            className={className}\r\n          >\r\n            {content}\r\n          </PopoverContent>\r\n        </>\r\n      ) : (\r\n        wrappedChildren\r\n      )}\r\n    </PopoverPrimitive.Root>\r\n  );\r\n};\r\n\r\nconst PopoverTrigger = PopoverPrimitive.Trigger;\r\n\r\ninterface PopoverContentProps\r\n  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> {\r\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\r\n  offset?: number;\r\n  shouldFlip?: boolean;\r\n  arrow?: boolean;\r\n  delay?: number;\r\n  flexContent?: \"start\" | \"center\" | \"end\";\r\n}\r\n\r\nconst PopoverContent = React.forwardRef<\r\n  React.ElementRef<typeof PopoverPrimitive.Content>,\r\n  PopoverContentProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      placement = \"bottom\",\r\n      offset = 10,\r\n      shouldFlip = false,\r\n      arrow = false,\r\n      delay = 0,\r\n      flexContent = \"center\",\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => (\r\n    <PopoverPrimitive.Portal>\r\n      <PopoverPrimitive.Content\r\n        ref={ref}\r\n        side={placement}\r\n        sideOffset={offset}\r\n        avoidCollisions={shouldFlip}\r\n        onOpenAutoFocus={(event) => {\r\n          if (delay > 0) {\r\n            event.preventDefault();\r\n            setTimeout(() => {\r\n              if (event.target instanceof HTMLElement) {\r\n                event.target.focus();\r\n              }\r\n            }, delay);\r\n          }\r\n        }}\r\n        className={cn(\r\n          \"flex z-50 w-full px-4 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n          flexContent === \"start\" && \"justify-start\",\r\n          flexContent === \"center\" && \"justify-center\",\r\n          flexContent === \"end\" && \"justify-end\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {props.children}\r\n        {arrow && (\r\n          <PopoverPrimitive.Arrow className=\"fill-current text-popover\" />\r\n        )}\r\n      </PopoverPrimitive.Content>\r\n    </PopoverPrimitive.Portal>\r\n  ),\r\n);\r\n\r\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent };\r\n",
      "type": "registry:ui",
      "target": "components/ui/popover.tsx"
    }
  ]
}