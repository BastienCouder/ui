{
  "name": "timeline",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/timeline.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport type { VariantProps } from \"class-variance-authority\";\r\nimport { Check, Circle, X } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { tv } from \"tailwind-variants\";\r\n\r\nconst timelineVariants = tv({\r\n  base: \"grid\",\r\n  variants: {\r\n    positions: {\r\n      left: \"[&>li]:grid-cols-[0_min-content_1fr]\",\r\n      right: \"[&>li]:grid-cols-[1fr_min-content]\",\r\n      center: \"[&>li]:grid-cols-[1fr_min-content_1fr]\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    positions: \"left\",\r\n  },\r\n});\r\n\r\ninterface TimelineProps\r\n  extends React.HTMLAttributes<HTMLUListElement>,\r\n    VariantProps<typeof timelineVariants> {}\r\n\r\nconst Timeline = React.forwardRef<HTMLUListElement, TimelineProps>(\r\n  ({ children, className, positions, ...props }, ref) => {\r\n    return (\r\n      <ul\r\n        className={cn(timelineVariants({ positions }), className)}\r\n        ref={ref}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </ul>\r\n    );\r\n  },\r\n);\r\nTimeline.displayName = \"Timeline\";\r\n\r\nconst timelineItemVariants = tv({\r\n  base: \"grid items-center gap-x-2 text-muted-foreground\",\r\n  variants: {\r\n    status: {\r\n      done: \"text-primary\",\r\n      default: \"text-muted-foreground\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    status: \"default\",\r\n  },\r\n});\r\n\r\ninterface TimelineItemProps\r\n  extends React.HTMLAttributes<HTMLLIElement>,\r\n    VariantProps<typeof timelineItemVariants> {}\r\n\r\nconst TimelineItem = React.forwardRef<HTMLLIElement, TimelineItemProps>(\r\n  ({ className, status, ...props }, ref) => (\r\n    <li\r\n      className={cn(timelineItemVariants({ status }), className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nTimelineItem.displayName = \"TimelineItem\";\r\n\r\nconst timelineDotVariants = tv({\r\n  base: \"col-start-2 col-end-3 row-start-1 row-end-1 flex w-4 h-4 items-center justify-center rounded-full border border-current\",\r\n  variants: {\r\n    status: {\r\n      default: \"[&>*]:hidden\",\r\n      current:\r\n        \"[&>*:not(.lucide-circle)]:hidden [&>.lucide-circle]:fill-current [&>.lucide-circle]:text-current\",\r\n      done: \"bg-primary [&>*:not(.lucide-check)]:hidden [&>.lucide-check]:text-background\",\r\n      error:\r\n        \"border-danger bg-danger [&>*:not(.lucide-x)]:hidden [&>.lucide-x]:text-background\",\r\n      custom: \"[&>*:not(:nth-child(4))]:hidden [&>*:nth-child(4)]:block\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    status: \"default\",\r\n  },\r\n});\r\ninterface TimelineDotProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof timelineDotVariants> {\r\n  customIcon?: React.ReactNode;\r\n}\r\n\r\nconst TimelineDot = React.forwardRef<HTMLDivElement, TimelineDotProps>(\r\n  ({ className, status, customIcon, ...props }, ref) => (\r\n    <div\r\n      role=\"status\"\r\n      className={cn(\"timeline-dot\", timelineDotVariants({ status }), className)}\r\n      ref={ref}\r\n      {...props}\r\n    >\r\n      <Circle className=\"w-2.5 h-2.5\" />\r\n      <Check className=\"h-3 w-3\" />\r\n      <X className=\"w-3 h-3\" />\r\n      {customIcon}\r\n    </div>\r\n  ),\r\n);\r\nTimelineDot.displayName = \"TimelineDot\";\r\n\r\nconst timelineContentVariants = tv({\r\n  base: \"row-start-2 row-end-2 pb-8 text-foreground/80\",\r\n  variants: {\r\n    side: {\r\n      right: \"col-start-3 col-end-4 mr-auto text-left\",\r\n      left: \"col-start-1 col-end-2 ml-auto text-right\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    side: \"right\",\r\n  },\r\n});\r\n\r\ninterface TimelineContentProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof timelineContentVariants> {\r\n  status?: \"done\" | \"default\";\r\n}\r\n\r\nconst TimelineContent = React.forwardRef<HTMLDivElement, TimelineContentProps>(\r\n  ({ className, status, side, ...props }, ref) => {\r\n    const textClass =\r\n      status === \"done\" ? \"text-foreground\" : \"text-muted-foreground\";\r\n\r\n    return (\r\n      <div\r\n        className={cn(timelineContentVariants({ side }), textClass, className)}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nTimelineContent.displayName = \"TimelineContent\";\r\n\r\nconst timelineHeadingVariants = tv({\r\n  base: \"row-start-1 row-end-1 line-clamp-1 max-w-full truncate\",\r\n  variants: {\r\n    side: {\r\n      right: \"col-start-3 col-end-4 mr-auto text-left\",\r\n      left: \"col-start-1 col-end-2 ml-auto text-right\",\r\n    },\r\n    variant: {\r\n      neutral: \"text-sm font-medium text-foreground\",\r\n      primary: \"text-sm font-medium text-primary\",\r\n      secondary: \"text-sm font-light text-muted-foreground\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    side: \"right\",\r\n    variant: \"neutral\",\r\n  },\r\n});\r\n\r\ninterface TimelineHeadingProps\r\n  extends React.HTMLAttributes<HTMLParagraphElement>,\r\n    VariantProps<typeof timelineHeadingVariants> {}\r\n\r\nconst TimelineHeading = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  TimelineHeadingProps\r\n>(({ className, side, variant, ...props }, ref) => (\r\n  <p\r\n    role=\"heading\"\r\n    aria-level={variant === \"primary\" ? 2 : 3}\r\n    className={cn(timelineHeadingVariants({ side, variant }), className)}\r\n    ref={ref}\r\n    {...props}\r\n  />\r\n));\r\nTimelineHeading.displayName = \"TimelineHeading\";\r\n\r\ninterface TimelineLineProps extends React.HTMLAttributes<HTMLHRElement> {\r\n  done?: boolean;\r\n}\r\n\r\nconst TimelineLine = React.forwardRef<HTMLHRElement, TimelineLineProps>(\r\n  ({ className, done = false, ...props }, ref) => {\r\n    return (\r\n      <hr\r\n        role=\"separator\"\r\n        aria-orientation=\"vertical\"\r\n        className={cn(\r\n          \"col-start-2 col-end-3 row-start-2 row-end-2 mx-auto flex h-full min-h-16 w-0.5 justify-center rounded-full\",\r\n          done ? \"bg-primary\" : \"bg-muted\",\r\n          className,\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nTimelineLine.displayName = \"TimelineLine\";\r\n\r\nexport {\r\n  Timeline,\r\n  TimelineDot,\r\n  TimelineItem,\r\n  TimelineContent,\r\n  TimelineHeading,\r\n  TimelineLine,\r\n};\r\n",
      "type": "registry:ui",
      "target": "components/ui/timeline.tsx"
    }
  ]
}