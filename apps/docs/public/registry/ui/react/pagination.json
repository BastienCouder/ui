{
  "name": "pagination",
  "dependencies": [
    "@radix-ui/react-popover"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "pagination.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ButtonProps, buttonStyles } from \"@/registry/ui/react/button\";\r\n\r\ntype PaginationProps = {\r\n  totalPages: number;\r\n  initialPage?: number;\r\n  onChange?: (page: number) => void;\r\n  children?: React.ReactNode;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  onePage?: boolean;\r\n  lastPage?: boolean;\r\n};\r\n\r\nconst Paginations: React.FC<PaginationProps> = ({\r\n  totalPages,\r\n  initialPage = 1,\r\n  onChange,\r\n  size = \"md\",\r\n  onePage = false,\r\n  lastPage = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [currentPage, setCurrentPage] = React.useState(initialPage);\r\n\r\n  const handlePageChange = (page: number) => {\r\n    if (page > 0 && page <= totalPages) {\r\n      setCurrentPage(page);\r\n      if (onChange) {\r\n        onChange(page);\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderChildren = () => {\r\n    if (React.Children.count(children) > 0) {\r\n      return React.Children.map(children, (child) => {\r\n        if (React.isValidElement(child) && child.type === PaginationLink) {\r\n          return React.cloneElement(child, {\r\n            onClick: () => handlePageChange(Number(child.props.children)),\r\n          } as React.Attributes & { onClick: () => void });\r\n        }\r\n        return child;\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Pagination {...props}>\r\n      <PaginationContent>\r\n        <PaginationItem>\r\n          <PaginationPrevious\r\n            onClick={() => handlePageChange(currentPage - 1)}\r\n            disabled={currentPage === 1}\r\n          />\r\n        </PaginationItem>\r\n\r\n        {currentPage === 1 && totalPages > 1 && (\r\n          <>\r\n            <PaginationItem>\r\n              <PaginationLink isActive size={size}>\r\n                1\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n            {totalPages >= 2 && (\r\n              <PaginationItem>\r\n                <PaginationLink size={size} onClick={() => handlePageChange(2)}>\r\n                  2\r\n                </PaginationLink>\r\n              </PaginationItem>\r\n            )}\r\n            {totalPages >= 3 && (\r\n              <PaginationItem>\r\n                <PaginationLink size={size} onClick={() => handlePageChange(3)}>\r\n                  3\r\n                </PaginationLink>\r\n              </PaginationItem>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {currentPage === totalPages && totalPages > 1 && (\r\n          <>\r\n            {totalPages - 2 > 0 && (\r\n              <PaginationItem>\r\n                <PaginationLink\r\n                  size={size}\r\n                  onClick={() => handlePageChange(totalPages - 2)}\r\n                >\r\n                  {totalPages - 2}\r\n                </PaginationLink>\r\n              </PaginationItem>\r\n            )}\r\n            {totalPages - 1 > 0 && (\r\n              <PaginationItem>\r\n                <PaginationLink\r\n                  size={size}\r\n                  onClick={() => handlePageChange(totalPages - 1)}\r\n                >\r\n                  {totalPages - 1}\r\n                </PaginationLink>\r\n              </PaginationItem>\r\n            )}\r\n            <PaginationItem>\r\n              <PaginationLink isActive size={size}>\r\n                {totalPages}\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n          </>\r\n        )}\r\n        {onePage && currentPage > 2 && (\r\n          <>\r\n            <PaginationItem>\r\n              <PaginationLink size={size} onClick={() => handlePageChange(1)}>\r\n                1\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n            {currentPage > 2 && <PaginationEllipsis />}\r\n          </>\r\n        )}\r\n\r\n        {currentPage > 1 && currentPage < totalPages && (\r\n          <>\r\n            <PaginationItem>\r\n              <PaginationLink\r\n                size={size}\r\n                onClick={() => handlePageChange(currentPage - 1)}\r\n              >\r\n                {currentPage - 1}\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n              <PaginationLink isActive size={size}>\r\n                {currentPage}\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n            {currentPage + 1 <= totalPages && (\r\n              <PaginationItem>\r\n                <PaginationLink\r\n                  size={size}\r\n                  onClick={() => handlePageChange(currentPage + 1)}\r\n                >\r\n                  {currentPage + 1}\r\n                </PaginationLink>\r\n              </PaginationItem>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {currentPage + 1 < totalPages && lastPage && currentPage > 2 && (\r\n          <>\r\n            {currentPage > 2 && <PaginationEllipsis />}\r\n            <PaginationItem>\r\n              <PaginationLink\r\n                size={size}\r\n                onClick={() => handlePageChange(totalPages)}\r\n              >\r\n                {totalPages}\r\n              </PaginationLink>\r\n            </PaginationItem>\r\n          </>\r\n        )}\r\n\r\n        <PaginationItem>\r\n          <PaginationNext\r\n            onClick={() => handlePageChange(currentPage + 1)}\r\n            disabled={currentPage === totalPages} // Disable if on the last page\r\n          />\r\n        </PaginationItem>\r\n\r\n        {/* Render children directly here */}\r\n        {renderChildren()}\r\n      </PaginationContent>\r\n    </Pagination>\r\n  );\r\n};\r\n\r\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\r\n  <nav\r\n    role=\"navigation\"\r\n    aria-label=\"pagination\"\r\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\r\n    {...props}\r\n  />\r\n);\r\nPagination.displayName = \"Pagination\";\r\n\r\nconst PaginationContent = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.ComponentProps<\"ul\">\r\n>(({ className, ...props }, ref) => (\r\n  <ul\r\n    ref={ref}\r\n    className={cn(\"flex flex-row items-center gap-1\", className)}\r\n    {...props}\r\n  />\r\n));\r\nPaginationContent.displayName = \"PaginationContent\";\r\n\r\nconst PaginationItem = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.ComponentProps<\"li\">\r\n>(({ className, ...props }, ref) => (\r\n  <li ref={ref} className={cn(\"\", className)} {...props} />\r\n));\r\nPaginationItem.displayName = \"PaginationItem\";\r\n\r\ntype PaginationLinkProps = {\r\n  isActive?: boolean;\r\n} & Pick<ButtonProps, \"size\"> &\r\n  React.ComponentProps<\"a\">;\r\n\r\nconst PaginationLink = ({\r\n  className,\r\n  isActive,\r\n  size = \"icon\",\r\n  ...props\r\n}: PaginationLinkProps) => (\r\n  <a\r\n    aria-current={isActive ? \"page\" : undefined}\r\n    className={cn(\r\n      buttonStyles({\r\n        variant: isActive ? \"outline\" : \"quiet\",\r\n        size,\r\n      }),\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n);\r\nPaginationLink.displayName = \"PaginationLink\";\r\n\r\nconst PaginationPrevious = ({\r\n  className,\r\n  disabled,\r\n  previousText = \"Previous\",\r\n  ...props\r\n}: React.ComponentProps<typeof PaginationLink> & {\r\n  disabled?: boolean;\r\n  previousText?: string;\r\n}) => (\r\n  <PaginationLink\r\n    aria-label=\"Go to previous page\"\r\n    size=\"md\"\r\n    className={cn(\r\n      \"gap-1 pl-2.5\",\r\n      className,\r\n      disabled && \"cursor-not-allowed opacity-50\",\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronLeft className=\"h-4 w-4\" />\r\n    <span>{previousText}</span>\r\n  </PaginationLink>\r\n);\r\nPaginationPrevious.displayName = \"PaginationPrevious\";\r\n\r\nconst PaginationNext = ({\r\n  className,\r\n  disabled,\r\n  nextText = \"Next\",\r\n  ...props\r\n}: React.ComponentProps<typeof PaginationLink> & {\r\n  disabled?: boolean;\r\n  nextText?: string;\r\n}) => (\r\n  <PaginationLink\r\n    aria-label=\"Go to next page\"\r\n    size=\"md\"\r\n    className={cn(\r\n      \"gap-1 pr-2.5\",\r\n      className,\r\n      disabled && \"cursor-not-allowed opacity-50\",\r\n    )}\r\n    {...props}\r\n  >\r\n    <span>{nextText}</span>\r\n    <ChevronRight className=\"h-4 w-4\" />\r\n  </PaginationLink>\r\n);\r\nPaginationNext.displayName = \"PaginationNext\";\r\n\r\nconst PaginationEllipsis = ({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<\"span\">) => (\r\n  <span\r\n    aria-hidden\r\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\r\n    {...props}\r\n  >\r\n    <MoreHorizontal className=\"h-4 w-4\" />\r\n    <span className=\"sr-only\">More pages</span>\r\n  </span>\r\n);\r\nPaginationEllipsis.displayName = \"PaginationEllipsis\";\r\n\r\nexport {\r\n  Paginations,\r\n  Pagination,\r\n  PaginationContent,\r\n  PaginationEllipsis,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  PaginationNext,\r\n  PaginationPrevious,\r\n};\r\n"
    }
  ],
  "type": "components:ui"
}