{
  "name": "tooltip",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/tooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { tv } from \"tailwind-variants\";\n\nconst tooltipVariants = tv({\n  base: \"overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n  variants: {\n    variant: {\n      default: \"bg-primary text-primary-foreground\",\n      outline: \"border bg-background text-foreground\",\n      secondary: \"bg-secondary text-secondary-foreground\",\n    },\n  },\n  defaultVariants: {\n    variant: \"secondary\",\n  },\n});\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\ninterface TooltipProps {\n  children: React.ReactNode | string;\n  content?: React.ReactNode;\n  variant?: \"default\" | \"outline\" | \"secondary\";\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  offset?: number;\n  delay?: number;\n  shouldFlip?: boolean;\n  arrow?: boolean;\n}\n\nconst Tooltip: React.FC<TooltipProps> = ({\n  children,\n  content,\n  variant,\n  placement = \"top\",\n  offset = 10,\n  delay = 0,\n  shouldFlip = true,\n  arrow = false,\n  ...props\n}) => {\n  const wrappedChildren =\n    typeof children === \"string\" || typeof children === \"number\" ? (\n      <>{children}</>\n    ) : (\n      children\n    );\n\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root delayDuration={delay} {...props}>\n        {content ? (\n          <>\n            <TooltipTrigger asChild>{wrappedChildren}</TooltipTrigger>\n            <TooltipContent\n              variant={variant}\n              placement={placement}\n              offset={offset}\n              shouldFlip={shouldFlip}\n              arrow={arrow}\n            >\n              {content}\n            </TooltipContent>\n          </>\n        ) : (\n          wrappedChildren\n        )}\n      </TooltipPrimitive.Root>\n    </TooltipProvider>\n  );\n};\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\ninterface TooltipContentProps\n  extends React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> {\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  offset?: number;\n  shouldFlip?: boolean;\n  arrow?: boolean;\n  variant?: \"default\" | \"outline\" | \"secondary\";\n}\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  TooltipContentProps\n>(\n  (\n    {\n      className,\n      variant,\n      placement = \"top\",\n      offset = 2,\n      shouldFlip = true,\n      arrow = false,\n      ...props\n    },\n    ref,\n  ) => (\n    <TooltipPrimitive.Content\n      ref={ref}\n      side={placement}\n      sideOffset={offset}\n      avoidCollisions={shouldFlip}\n      className={cn(tooltipVariants({ variant, className }))}\n      {...props}\n    >\n      {props.children}\n      {arrow && (\n        <TooltipPrimitive.Arrow className=\"fill-current text-popover\" />\n      )}\n    </TooltipPrimitive.Content>\n  ),\n);\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\nconst TooltipArrow = TooltipPrimitive.TooltipArrow;\n\nconst TooltipRoot: React.FC<{ children: React.ReactNode; delay?: number }> = ({\n  children,\n  delay,\n}) => {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root delayDuration={delay}>\n        {children}\n      </TooltipPrimitive.Root>\n    </TooltipProvider>\n  );\n};\n\nexport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipProvider,\n  TooltipRoot,\n  TooltipArrow,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/tooltip.tsx"
    }
  ]
}