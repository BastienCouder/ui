{
  "name": "text-field",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/text-field.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { Loader, HelpCircle } from \"@/lib/icons\";\nimport { Tooltip } from \"@/registry/ui/react/tooltip\";\n\nconst inputStyles = tv({\n  base: \"w-full max-w-96 rounded-md text-sm ring-offset-background transition-colors focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n  variants: {\n    variant: {\n      default:\n        \"bg-background hover:bg-input-background-hover focus:bg-input-background-active text-input-foreground border border-input-border\",\n      primary:\n        \"bg-primary hover:bg-primary-hover focus:bg-primary-active text-primary-foreground border border-primary-border\",\n      secondary:\n        \"bg-secondary hover:bg-secondary-hover focus:bg-secondary-active text-secondary-foreground border border-secondary-border\",\n      outline:\n        \"bg-transparent border border-input-border hover:bg-input-background-hover focus:bg-input-background-active text-input-foreground\",\n      quiet: \"bg-transparent text-input-foreground\",\n    },\n    inputSize: {\n      sm: \"h-8 text-sm px-2\",\n      md: \"h-10 text-base px-4\",\n      lg: \"h-12 text-lg px-4\",\n    },\n    shape: {\n      rectangle: \"rounded-md\",\n      square: \"rounded-none\",\n      circle: \"rounded-full\",\n    },\n    invalid: {\n      true: \"border-destructive bg-background text-destructive-foreground focus-visible:ring-destructive\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    inputSize: \"md\",\n    shape: \"rectangle\",\n  },\n});\n\ntype TextFieldProps = Omit<InputProps, \"children\" | \"prefix\" | \"suffix\"> &\n  VariantProps<typeof inputStyles> & {\n    label?: string;\n    description?: string;\n    prefix?: React.ReactNode;\n    suffix?: React.ReactNode;\n    isInvalid?: boolean;\n    errorMessage?: string;\n    isLoading?: boolean;\n    loaderPosition?: \"prefix\" | \"suffix\";\n    placeholder?: string;\n    contextualHelp?: React.ReactNode;\n    inputSize?: \"sm\" | \"md\" | \"lg\";\n  };\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  (\n    {\n      label,\n      description,\n      className,\n      type = \"text\",\n      prefix,\n      suffix,\n      isInvalid,\n      errorMessage,\n      contextualHelp,\n      inputSize,\n      shape,\n      isLoading,\n      loaderPosition = \"prefix\",\n      ...props\n    },\n    ref,\n  ) => {\n    const renderPrefix =\n      isLoading && loaderPosition === \"prefix\" ? (\n        <Loader className=\"mr-2 animate-rotate\" />\n      ) : (\n        prefix\n      );\n\n    const renderSuffix =\n      isLoading && loaderPosition === \"suffix\" ? (\n        <Loader className=\"ml-2\" />\n      ) : (\n        suffix\n      );\n\n    return (\n      <div className={cn(\"w-full max-w-96\", className)}>\n        {label ||\n          (contextualHelp && (\n            <label className=\"text-sm font-medium flex items-center gap-1 mb-1\">\n              {label}\n              {contextualHelp && (\n                <Tooltip content={contextualHelp} offset={5}>\n                  <HelpCircle className=\"h-4 w-4\" />\n                </Tooltip>\n              )}\n            </label>\n          ))}\n        <div className=\"relative flex items-center gap-x-2\">\n          {renderPrefix && (\n            <span className=\"absolute left-3 inset-y-0 flex items-center z-40 text-gray-400 w-5\">\n              {renderPrefix}\n            </span>\n          )}\n          <input\n            type={type}\n            className={cn(\n              inputStyles({ invalid: isInvalid, inputSize, shape }),\n              className,\n              {\n                \"pl-11\": renderPrefix,\n                \"pr-10\": renderSuffix,\n              },\n            )}\n            ref={ref}\n            {...props}\n          />\n          {renderSuffix && (\n            <span className=\"absolute right-3 inset-y-0 flex z-20 items-center text-gray-400 w-5\">\n              {renderSuffix}\n            </span>\n          )}\n        </div>\n        {isInvalid && errorMessage && (\n          <p className=\"text-xs text-destructive mt-1\">{errorMessage}</p>\n        )}\n        {!isInvalid && description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n      </div>\n    );\n  },\n);\n\nTextField.displayName = \"TextField\";\n\nexport type { TextFieldProps };\nexport { TextField };\n",
      "type": "registry:ui",
      "target": "components/ui/text-field.tsx"
    }
  ]
}