{
  "name": "timeline",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/timeline.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport { Check, Circle, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { tv } from \"tailwind-variants\";\n\nconst timelineVariants = tv({\n  base: \"grid\",\n  variants: {\n    positions: {\n      left: \"[&>li]:grid-cols-[0_min-content_1fr]\",\n      right: \"[&>li]:grid-cols-[1fr_min-content]\",\n      center: \"[&>li]:grid-cols-[1fr_min-content_1fr]\",\n    },\n  },\n  defaultVariants: {\n    positions: \"left\",\n  },\n});\n\ninterface TimelineProps\n  extends React.HTMLAttributes<HTMLUListElement>,\n    VariantProps<typeof timelineVariants> {}\n\nconst Timeline = React.forwardRef<HTMLUListElement, TimelineProps>(\n  ({ children, className, positions, ...props }, ref) => {\n    return (\n      <ul\n        className={cn(timelineVariants({ positions }), className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </ul>\n    );\n  },\n);\nTimeline.displayName = \"Timeline\";\n\nconst timelineItemVariants = tv({\n  base: \"grid items-center gap-x-2 text-muted-fg\",\n  variants: {\n    status: {\n      done: \"text-primary\",\n      default: \"text-muted-fg\",\n    },\n  },\n  defaultVariants: {\n    status: \"default\",\n  },\n});\n\ninterface TimelineItemProps\n  extends React.HTMLAttributes<HTMLLIElement>,\n    VariantProps<typeof timelineItemVariants> {}\n\nconst TimelineItem = React.forwardRef<HTMLLIElement, TimelineItemProps>(\n  ({ className, status, ...props }, ref) => (\n    <li\n      className={cn(timelineItemVariants({ status }), className)}\n      ref={ref}\n      {...props}\n    />\n  ),\n);\nTimelineItem.displayName = \"TimelineItem\";\n\nconst timelineDotVariants = tv({\n  base: \"col-start-2 col-end-3 row-start-1 row-end-1 flex w-4 h-4 items-center justify-center rounded-full border border-current\",\n  variants: {\n    status: {\n      default: \"[&>*]:hidden\",\n      current:\n        \"[&>*:not(.lucide-circle)]:hidden [&>.lucide-circle]:fill-current [&>.lucide-circle]:text-current\",\n      done: \"bg-primary [&>*:not(.lucide-check)]:hidden [&>.lucide-check]:text-bg\",\n      error:\n        \"border-danger bg-danger [&>*:not(.lucide-x)]:hidden [&>.lucide-x]:text-bg\",\n      custom: \"[&>*:not(:nth-child(4))]:hidden [&>*:nth-child(4)]:block\",\n    },\n  },\n  defaultVariants: {\n    status: \"default\",\n  },\n});\ninterface TimelineDotProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof timelineDotVariants> {\n  customIcon?: React.ReactNode;\n}\n\nconst TimelineDot = React.forwardRef<HTMLDivElement, TimelineDotProps>(\n  ({ className, status, customIcon, ...props }, ref) => (\n    <div\n      role=\"status\"\n      className={cn(\"timeline-dot\", timelineDotVariants({ status }), className)}\n      ref={ref}\n      {...props}\n    >\n      <Circle className=\"w-2.5 h-2.5\" />\n      <Check className=\"h-3 w-3\" />\n      <X className=\"w-3 h-3\" />\n      {customIcon}\n    </div>\n  ),\n);\nTimelineDot.displayName = \"TimelineDot\";\n\nconst timelineContentVariants = tv({\n  base: \"row-start-2 row-end-2 pb-8 text-fg/80\",\n  variants: {\n    side: {\n      right: \"col-start-3 col-end-4 mr-auto text-left\",\n      left: \"col-start-1 col-end-2 ml-auto text-right\",\n    },\n  },\n  defaultVariants: {\n    side: \"right\",\n  },\n});\n\ninterface TimelineContentProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof timelineContentVariants> {\n  status?: \"done\" | \"default\";\n}\n\nconst TimelineContent = React.forwardRef<HTMLDivElement, TimelineContentProps>(\n  ({ className, status, side, ...props }, ref) => {\n    const textClass = status === \"done\" ? \"text-fg\" : \"text-muted-fg\";\n\n    return (\n      <div\n        className={cn(timelineContentVariants({ side }), textClass, className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTimelineContent.displayName = \"TimelineContent\";\n\nconst timelineHeadingVariants = tv({\n  base: \"row-start-1 row-end-1 line-clamp-1 max-w-full truncate\",\n  variants: {\n    side: {\n      right: \"col-start-3 col-end-4 mr-auto text-left\",\n      left: \"col-start-1 col-end-2 ml-auto text-right\",\n    },\n    variant: {\n      neutral: \"text-sm font-medium text-fg\",\n      primary: \"text-sm font-medium text-primary\",\n      secondary: \"text-sm font-light text-muted-fg\",\n    },\n  },\n  defaultVariants: {\n    side: \"right\",\n    variant: \"neutral\",\n  },\n});\n\ninterface TimelineHeadingProps\n  extends React.HTMLAttributes<HTMLParagraphElement>,\n    VariantProps<typeof timelineHeadingVariants> {}\n\nconst TimelineHeading = React.forwardRef<\n  HTMLParagraphElement,\n  TimelineHeadingProps\n>(({ className, side, variant, ...props }, ref) => (\n  <p\n    role=\"heading\"\n    aria-level={variant === \"primary\" ? 2 : 3}\n    className={cn(timelineHeadingVariants({ side, variant }), className)}\n    ref={ref}\n    {...props}\n  />\n));\nTimelineHeading.displayName = \"TimelineHeading\";\n\ninterface TimelineLineProps extends React.HTMLAttributes<HTMLHRElement> {\n  done?: boolean;\n}\n\nconst TimelineLine = React.forwardRef<HTMLHRElement, TimelineLineProps>(\n  ({ className, done = false, ...props }, ref) => {\n    return (\n      <hr\n        role=\"separator\"\n        aria-orientation=\"vertical\"\n        className={cn(\n          \"col-start-2 col-end-3 row-start-2 row-end-2 mx-auto flex h-full min-h-16 w-0.5 justify-center rounded-full\",\n          done ? \"bg-primary\" : \"bg-muted\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTimelineLine.displayName = \"TimelineLine\";\n\nexport {\n  Timeline,\n  TimelineDot,\n  TimelineItem,\n  TimelineContent,\n  TimelineHeading,\n  TimelineLine,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/timeline.tsx"
    }
  ]
}