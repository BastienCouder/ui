{
  "name": "select",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/select.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\r\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { tv } from \"tailwind-variants\";\r\n\r\nconst selectStyles = tv({\r\n  variants: {\r\n    size: {\r\n      sm: \"h-8 px-2 text-sm\",\r\n      md: \"h-10 px-3 text-base\",\r\n      lg: \"h-12 px-4 text-lg\",\r\n    },\r\n    shape: {\r\n      rounded: \"rounded-md\",\r\n      square: \"rounded-none\",\r\n      circle: \"rounded-full\",\r\n    },\r\n    variant: {\r\n      primary:\r\n        \"border-primary bg-primary text-primary-foreground hover:bg-primary-hover active:bg-primary-active\",\r\n      secondary:\r\n        \"border-secondary bg-secondary text-secondary-foreground hover:bg-secondary-hover active:bg-secondary-active\",\r\n      outline:\r\n        \"border-muted-foreground bg-transparent text-foreground hover:bg-muted/50\",\r\n      neutral:\r\n        \"border-neutral bg-neutral text-foreground hover:bg-neutral-hover active:bg-neutral-active\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"md\",\r\n    shape: \"rounded\",\r\n    variant: \"outline\",\r\n  },\r\n});\r\n\r\ninterface SelectProps {\r\n  children?: React.ReactNode;\r\n  options?: Array<{ label: string; value: string }>; // Pour utilisation comme avec `Sheet`\r\n  label?: string;\r\n  className?: string;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  shape?: \"rounded\" | \"square\" | \"circle\";\r\n  variant?: \"primary\" | \"secondary\" | \"outline\" | \"neutral\";\r\n  withRing?: boolean;\r\n  onValueChange?: (value: string) => void;\r\n  value?: string;\r\n}\r\n\r\nconst Select: React.FC<SelectProps> = ({\r\n  children,\r\n  options,\r\n  label,\r\n  size = \"md\",\r\n  shape = \"rounded\",\r\n  variant = \"outline\",\r\n  withRing = false,\r\n  className,\r\n  onValueChange,\r\n  value,\r\n  ...props\r\n}) => {\r\n  const wrappedChildren =\r\n    typeof children === \"string\" || typeof children === \"number\" ? (\r\n      <>{children}</>\r\n    ) : (\r\n      children\r\n    );\r\n\r\n  return (\r\n    <SelectPrimitive.Root\r\n      {...props}\r\n      onValueChange={onValueChange}\r\n      value={value}\r\n    >\r\n      {options ? (\r\n        <>\r\n          <SelectTrigger\r\n            size={size}\r\n            shape={shape}\r\n            variant={variant}\r\n            withRing={withRing}\r\n            className={className}\r\n          >\r\n            {wrappedChildren}\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectGroup>\r\n              {label && <SelectLabel>{label}</SelectLabel>}\r\n              {options.map((option) => (\r\n                <SelectItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectGroup>\r\n          </SelectContent>\r\n        </>\r\n      ) : (\r\n        wrappedChildren\r\n      )}\r\n    </SelectPrimitive.Root>\r\n  );\r\n};\r\n\r\nconst SelectGroup = SelectPrimitive.Group;\r\nconst SelectValue = SelectPrimitive.Value;\r\n\r\nconst SelectTrigger = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> & {\r\n    size?: \"sm\" | \"md\" | \"lg\";\r\n    shape?: \"rounded\" | \"square\" | \"circle\";\r\n    variant?: \"primary\" | \"secondary\" | \"outline\" | \"neutral\";\r\n    withRing?: boolean;\r\n  }\r\n>(\r\n  (\r\n    { className, children, size, shape, variant, withRing = false, ...props },\r\n    ref,\r\n  ) => (\r\n    <SelectPrimitive.Trigger\r\n      ref={ref}\r\n      className={cn(\r\n        selectStyles({ size, shape, variant }),\r\n        withRing\r\n          ? \"ring-offset-background focus:ring-ring focus:ring-2 focus:ring-offset-2\"\r\n          : \"\",\r\n        \"flex w-full items-center justify-between border px-3 py-2 gap-2 text-left text-sm focus:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <SelectPrimitive.Icon asChild>\r\n        <ChevronDown className=\"w-4 h-4 shrink-0 opacity-50\" />\r\n      </SelectPrimitive.Icon>\r\n    </SelectPrimitive.Trigger>\r\n  ),\r\n);\r\nSelectTrigger.displayName = \"SelectTrigger\";\r\n\r\nconst SelectScrollUpButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollUpButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronUp className=\"w-4 h-4\" />\r\n  </SelectPrimitive.ScrollUpButton>\r\n));\r\nSelectScrollUpButton.displayName = \"SelectScrollUpButton\";\r\n\r\nconst SelectScrollDownButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollDownButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronDown className=\"w-4 h-4\" />\r\n  </SelectPrimitive.ScrollDownButton>\r\n));\r\nSelectScrollDownButton.displayName = \"SelectScrollDownButton\";\r\n\r\nconst SelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\r\n>(({ className, children, position = \"popper\", ...props }, ref) => (\r\n  <SelectPrimitive.Portal>\r\n    <SelectPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"bg-popover text-popover-foreground relative z-50 max-h-96 min-w-32 overflow-hidden rounded-md border shadow-md\",\r\n        position === \"popper\" &&\r\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n        className,\r\n      )}\r\n      position={position}\r\n      {...props}\r\n    >\r\n      <SelectScrollUpButton />\r\n      <SelectPrimitive.Viewport className=\"p-1\">\r\n        {children}\r\n      </SelectPrimitive.Viewport>\r\n      <SelectScrollDownButton />\r\n    </SelectPrimitive.Content>\r\n  </SelectPrimitive.Portal>\r\n));\r\nSelectContent.displayName = \"SelectContent\";\r\n\r\nconst SelectLabel = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\r\n    {...props}\r\n  />\r\n));\r\nSelectLabel.displayName = \"SelectLabel\";\r\n\r\nconst SelectItem = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"focus:bg-accent focus:text-accent-foreground relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex w-3.5 h-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <Check className=\"w-4 h-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n));\r\nSelectItem.displayName = \"SelectItem\";\r\n\r\nconst SelectSeparator = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"bg-muted -mx-1 my-1 h-px\", className)}\r\n    {...props}\r\n  />\r\n));\r\nSelectSeparator.displayName = \"SelectSeparator\";\r\n\r\n// Exportation compl√®te\r\nexport {\r\n  Select,\r\n  SelectGroup,\r\n  SelectValue,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectLabel,\r\n  SelectItem,\r\n  SelectSeparator,\r\n  SelectScrollUpButton,\r\n  SelectScrollDownButton,\r\n};\r\n",
      "type": "registry:ui",
      "target": "components/ui/select.tsx"
    }
  ]
}