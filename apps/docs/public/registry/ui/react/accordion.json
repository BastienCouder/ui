{
  "name": "accordion",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/accordion.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { tv } from \"tailwind-variants\";\n\nconst accordionStyles = tv({\n  slots: {\n    root: \"border-b\",\n    trigger: [\n      \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n    ],\n    content: [\n      \"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n    ],\n  },\n});\n\nconst Accordion = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> & {\n    gap?: string;\n  }\n>(({ className, gap, children, ...props }, ref) => (\n  <AccordionPrimitive.Root\n    ref={ref}\n    className={cn(className, gap && `flex flex-col gap-${gap}`)}\n    {...props}\n  >\n    {children}\n  </AccordionPrimitive.Root>\n));\nAccordion.displayName = AccordionPrimitive.Root.displayName;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> & {\n    disabled?: boolean;\n    variant?: string;\n  }\n>(({ className, disabled, variant = \"default\", ...props }, ref) => {\n  const { root } = accordionStyles({ variant });\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={root({\n        className: className,\n        \"opacity-50 cursor-not-allowed\": disabled ? \"true\" : undefined,\n      })}\n      {...props}\n    />\n  );\n});\n\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {\n    disabled?: boolean;\n    variant?: string;\n  }\n  // eslint-disable-next-line unused-imports/no-unused-vars\n>(({ className, children, disabled, variant = \"default\", ...props }, ref) => {\n  const { trigger } = accordionStyles({ variant });\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={ref}\n        className={trigger({ className })}\n        {...props}\n      >\n        {children}\n        <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n});\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const { content } = accordionStyles();\n  return (\n    <AccordionPrimitive.Content\n      ref={ref}\n      className={content({ className })}\n      {...props}\n    >\n      <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  );\n});\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n/*\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> & { disabled?: boolean; variant?: string }\n>(({ className, disabled, variant = \"default\", ...props }, ref) => {\n  const { root } = accordionStyles({ variant });\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn(root, className, { \"opacity-50 cursor-not-allowed\": disabled })}\n      {...props}\n      data-disabled={disabled ? \"\" : undefined}\n    />\n  );\n});\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & { disabled?: boolean; variant?: string }\n>(({ className, children, disabled, variant = \"default\", ...props }, ref) => {\n  const { trigger } = accordionStyles({ variant });\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={ref}\n        className={cn(trigger, className, { \"opacity-50 cursor-not-allowed\": disabled })}\n        {...props}\n        disabled={disabled}\n        aria-disabled={disabled ? true : undefined}\n      >\n        {children}\n        <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n});\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const { content } = accordionStyles();\n  return (\n    <AccordionPrimitive.Content\n      ref={ref}\n      className={cn(content, className)}\n      {...props}\n    >\n      <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  );\n})\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }*/\n",
      "type": "registry:ui",
      "target": "components/ui/accordion.tsx"
    }
  ]
}