{
  "name": "accordion",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/accordion.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\r\nimport { ChevronDown } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { tv } from \"tailwind-variants\";\r\n\r\nconst accordionStyles = tv({\r\n  slots: {\r\n    root: \"border-b\",\r\n    trigger: [\r\n      \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\r\n    ],\r\n    content: [\r\n      \"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\r\n    ],\r\n  },\r\n});\r\n\r\nconst Accordion = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> & {\r\n    gap?: string;\r\n  }\r\n>(({ className, gap, children, ...props }, ref) => (\r\n  <AccordionPrimitive.Root\r\n    ref={ref}\r\n    className={cn(className, gap && `flex flex-col gap-${gap}`)}\r\n    {...props}\r\n  >\r\n    {children}\r\n  </AccordionPrimitive.Root>\r\n));\r\nAccordion.displayName = AccordionPrimitive.Root.displayName;\r\n\r\nconst AccordionItem = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> & {\r\n    disabled?: boolean;\r\n    variant?: string;\r\n  }\r\n>(({ className, disabled, variant = \"default\", ...props }, ref) => {\r\n  const { root } = accordionStyles({ variant });\r\n  return (\r\n    <AccordionPrimitive.Item\r\n      ref={ref}\r\n      className={root({\r\n        className: className,\r\n        \"opacity-50 cursor-not-allowed\": disabled ? \"true\" : undefined,\r\n      })}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\n\r\nAccordionItem.displayName = \"AccordionItem\";\r\n\r\nconst AccordionTrigger = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {\r\n    disabled?: boolean;\r\n    variant?: string;\r\n  }\r\n  // eslint-disable-next-line unused-imports/no-unused-vars\r\n>(({ className, children, disabled, variant = \"default\", ...props }, ref) => {\r\n  const { trigger } = accordionStyles({ variant });\r\n  return (\r\n    <AccordionPrimitive.Header className=\"flex\">\r\n      <AccordionPrimitive.Trigger\r\n        ref={ref}\r\n        className={trigger({ className })}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\r\n      </AccordionPrimitive.Trigger>\r\n    </AccordionPrimitive.Header>\r\n  );\r\n});\r\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\r\n\r\nconst AccordionContent = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { content } = accordionStyles();\r\n  return (\r\n    <AccordionPrimitive.Content\r\n      ref={ref}\r\n      className={content({ className })}\r\n      {...props}\r\n    >\r\n      <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\r\n    </AccordionPrimitive.Content>\r\n  );\r\n});\r\n\r\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\r\n",
      "type": "registry:ui",
      "target": "components/ui/accordion.tsx"
    }
  ]
}