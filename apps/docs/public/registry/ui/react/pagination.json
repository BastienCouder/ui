{
  "name": "pagination",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/react/pagination.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { ButtonProps, buttonStyles } from \"@/registry/ui/react/button\";\n\ntype PaginationProps = {\n  totalPages: number;\n  initialPage?: number;\n  onChange?: (page: number) => void;\n  children?: React.ReactNode;\n  size?: \"sm\" | \"md\" | \"lg\";\n  onePage?: boolean;\n  lastPage?: boolean;\n};\n\nconst Paginations: React.FC<PaginationProps> = ({\n  totalPages,\n  initialPage = 1,\n  onChange,\n  size = \"md\",\n  onePage = false,\n  lastPage = false,\n  children,\n  ...props\n}) => {\n  const [currentPage, setCurrentPage] = React.useState(initialPage);\n\n  const handlePageChange = (page: number) => {\n    if (page > 0 && page <= totalPages) {\n      setCurrentPage(page);\n      if (onChange) {\n        onChange(page);\n      }\n    }\n  };\n\n  const renderChildren = () => {\n    if (React.Children.count(children) > 0) {\n      return React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === PaginationLink) {\n          return React.cloneElement(child, {\n            onClick: () => handlePageChange(Number(child.props.children)),\n          } as React.Attributes & { onClick: () => void });\n        }\n        return child;\n      });\n    }\n\n    return null;\n  };\n\n  return (\n    <Pagination {...props}>\n      <PaginationContent>\n        <PaginationItem>\n          <PaginationPrevious\n            onClick={() => handlePageChange(currentPage - 1)}\n            disabled={currentPage === 1}\n          />\n        </PaginationItem>\n\n        {currentPage === 1 && totalPages > 1 && (\n          <>\n            <PaginationItem>\n              <PaginationLink isActive size={size}>\n                1\n              </PaginationLink>\n            </PaginationItem>\n            {totalPages >= 2 && (\n              <PaginationItem>\n                <PaginationLink size={size} onClick={() => handlePageChange(2)}>\n                  2\n                </PaginationLink>\n              </PaginationItem>\n            )}\n            {totalPages >= 3 && (\n              <PaginationItem>\n                <PaginationLink size={size} onClick={() => handlePageChange(3)}>\n                  3\n                </PaginationLink>\n              </PaginationItem>\n            )}\n          </>\n        )}\n\n        {currentPage === totalPages && totalPages > 1 && (\n          <>\n            {totalPages - 2 > 0 && (\n              <PaginationItem>\n                <PaginationLink\n                  size={size}\n                  onClick={() => handlePageChange(totalPages - 2)}\n                >\n                  {totalPages - 2}\n                </PaginationLink>\n              </PaginationItem>\n            )}\n            {totalPages - 1 > 0 && (\n              <PaginationItem>\n                <PaginationLink\n                  size={size}\n                  onClick={() => handlePageChange(totalPages - 1)}\n                >\n                  {totalPages - 1}\n                </PaginationLink>\n              </PaginationItem>\n            )}\n            <PaginationItem>\n              <PaginationLink isActive size={size}>\n                {totalPages}\n              </PaginationLink>\n            </PaginationItem>\n          </>\n        )}\n        {onePage && currentPage > 2 && (\n          <>\n            <PaginationItem>\n              <PaginationLink size={size} onClick={() => handlePageChange(1)}>\n                1\n              </PaginationLink>\n            </PaginationItem>\n            {currentPage > 2 && <PaginationEllipsis />}\n          </>\n        )}\n\n        {currentPage > 1 && currentPage < totalPages && (\n          <>\n            <PaginationItem>\n              <PaginationLink\n                size={size}\n                onClick={() => handlePageChange(currentPage - 1)}\n              >\n                {currentPage - 1}\n              </PaginationLink>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink isActive size={size}>\n                {currentPage}\n              </PaginationLink>\n            </PaginationItem>\n            {currentPage + 1 <= totalPages && (\n              <PaginationItem>\n                <PaginationLink\n                  size={size}\n                  onClick={() => handlePageChange(currentPage + 1)}\n                >\n                  {currentPage + 1}\n                </PaginationLink>\n              </PaginationItem>\n            )}\n          </>\n        )}\n\n        {currentPage + 1 < totalPages && lastPage && currentPage > 2 && (\n          <>\n            {currentPage > 2 && <PaginationEllipsis />}\n            <PaginationItem>\n              <PaginationLink\n                size={size}\n                onClick={() => handlePageChange(totalPages)}\n              >\n                {totalPages}\n              </PaginationLink>\n            </PaginationItem>\n          </>\n        )}\n\n        <PaginationItem>\n          <PaginationNext\n            onClick={() => handlePageChange(currentPage + 1)}\n            disabled={currentPage === totalPages} // Disable if on the last page\n          />\n        </PaginationItem>\n\n        {/* Render children directly here */}\n        {renderChildren()}\n      </PaginationContent>\n    </Pagination>\n  );\n};\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n);\nPagination.displayName = \"Pagination\";\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n));\nPaginationContent.displayName = \"PaginationContent\";\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n));\nPaginationItem.displayName = \"PaginationItem\";\n\ntype PaginationLinkProps = {\n  isActive?: boolean;\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">;\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonStyles({\n        variant: isActive ? \"outline\" : \"quiet\",\n        size,\n      }),\n      className,\n    )}\n    {...props}\n  />\n);\nPaginationLink.displayName = \"PaginationLink\";\n\nconst PaginationPrevious = ({\n  className,\n  disabled,\n  previousText = \"Previous\",\n  ...props\n}: React.ComponentProps<typeof PaginationLink> & {\n  disabled?: boolean;\n  previousText?: string;\n}) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"md\"\n    className={cn(\n      \"gap-1 pl-2.5\",\n      className,\n      disabled && \"cursor-not-allowed opacity-50\",\n    )}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>{previousText}</span>\n  </PaginationLink>\n);\nPaginationPrevious.displayName = \"PaginationPrevious\";\n\nconst PaginationNext = ({\n  className,\n  disabled,\n  nextText = \"Next\",\n  ...props\n}: React.ComponentProps<typeof PaginationLink> & {\n  disabled?: boolean;\n  nextText?: string;\n}) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"md\"\n    className={cn(\n      \"gap-1 pr-2.5\",\n      className,\n      disabled && \"cursor-not-allowed opacity-50\",\n    )}\n    {...props}\n  >\n    <span>{nextText}</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n);\nPaginationNext.displayName = \"PaginationNext\";\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n);\nPaginationEllipsis.displayName = \"PaginationEllipsis\";\n\nexport {\n  Paginations,\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/pagination.tsx"
    }
  ]
}