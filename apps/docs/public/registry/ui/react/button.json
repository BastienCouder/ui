{
  "name": "button",
  "files": [
    {
      "name": "button.tsx",
      "content": "import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { type VariantProps, tv } from \"tailwind-variants\";\r\nimport { Loader } from \"@/lib/icons\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst buttonStyles = tv(\r\n  {\r\n    base: \"inline-flex gap-2 cursor-pointer items-center justify-center whitespace-nowrap rounded-md leading-normal text-sm shrink-0 font-medium ring-offset-background transition-colors disabled:cursor-default disabled:bg-disabled disabled:text-disabled-fg\",\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"bg-neutral hover:bg-neutral-hover active:bg-neutral-active text-neutral-fg\",\r\n        primary:\r\n          \"bg-primary hover:bg-primary-hover active:bg-primary-active text-primary-fg\",\r\n        secondary:\r\n          \"bg-secondary hover:bg-secondary-hover active:bg-secondary-active text-secondary-fg\",\r\n        quiet:\r\n          \"bg-transparent hover:bg-neutral/10 active:bg-neutral/20 text-fg\",\r\n         link:\r\n          \"bg-transparent hover:transparent underline active:underline text-fg\",\r\n        outline:\r\n          \"border border-border bg-transparent hover:bg-neutral/10 active:bg-neutral/20 text-fg disabled:border-disabled disabled:bg-transparent\",\r\n        success:\r\n          \"bg-success hover:bg-success-hover active:bg-success-active text-success-fg\",\r\n        warning:\r\n          \"bg-warning hover:bg-warning-hover active:bg-warning-active text-warning-fg\",\r\n        danger:\r\n          \"bg-danger hover:bg-danger-hover active:bg-danger-active text-danger-fg\",\r\n      },\r\n      size: {\r\n        sm: \"h-8 px-3 [&_svg]:w-4 [&_svg]:h-4\",\r\n        md: \"h-9 px-4 [&_svg]:w-4 [&_svg]:h-4\",\r\n        lg: \"h-10 px-5 [&_svg]:w-5 [&_svg]:h-5\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n      shape: {\r\n        rectangle: \"\",\r\n        square: \"\",\r\n        circle: \"rounded-full\",\r\n      },\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        size: \"sm\",\r\n        shape: [\"square\", \"circle\"],\r\n        className: \"w-8 px-0\",\r\n      },\r\n      {\r\n        size: \"md\",\r\n        shape: [\"square\", \"circle\"],\r\n        className: \"w-9 px-0\",\r\n      },\r\n      {\r\n        size: \"lg\",\r\n        shape: [\"square\", \"circle\"],\r\n        className: \"w-10 px-0\",\r\n      },\r\n    ],\r\n    defaultVariants: {\r\n      variant: \"primary\",\r\n      size: \"md\",\r\n      shape: \"rectangle\",\r\n    },\r\n  },\r\n  {\r\n    responsiveVariants: [\"sm\", \"lg\"],\r\n  },\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"prefix\">,\r\n    VariantProps<typeof buttonStyles> {\r\n  asChild?: boolean;\r\n  isLoading?: boolean;\r\n  isDisabled?: boolean;\r\n  children?: React.ReactNode;\r\n  suffix?: React.ReactNode;\r\n  href?: string;\r\n  target?: string;\r\n  prefix?: React.ReactNode;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      size,\r\n      shape,\r\n      isLoading,\r\n      isDisabled,\r\n      children,\r\n      prefix,\r\n      suffix,\r\n      asChild = false,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const Comp = asChild ? Slot : \"button\";\r\n    const Element: React.ElementType = props.href ? \"a\" : Comp;\r\n\r\n    return (\r\n      <Element\r\n        className={cn(buttonStyles({ variant, size, shape }), className)}\r\n        ref={ref}\r\n        disabled={isDisabled || isLoading}\r\n        {...props}\r\n      >\r\n        {isLoading && (\r\n          <Loader aria-label=\"loading\" className=\"animate-spin\" />\r\n        )}\r\n        {prefix}\r\n        {typeof children === \"string\" ? (\r\n          <span className=\"truncate\">{children}</span>\r\n        ) : (\r\n          children\r\n        )}\r\n        {suffix}\r\n      </Element>\r\n    );\r\n  },\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button, buttonStyles };"
    }
  ],
  "type": "components:ui"
}