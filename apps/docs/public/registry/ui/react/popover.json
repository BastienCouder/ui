{
  "name": "popover",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/popover.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PopoverProps {\n  children: React.ReactNode | string;\n  content?: React.ReactNode;\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  offset?: number;\n  shouldFlip?: boolean;\n  arrow?: boolean;\n  className?: string;\n  flexContent?: \"start\" | \"center\" | \"end\";\n  open?: any;\n  onOpenChange?: any;\n}\n\nconst Popover: React.FC<PopoverProps> = ({\n  children,\n  content,\n  className,\n  placement = \"bottom\",\n  offset = 10,\n  shouldFlip = true,\n  arrow = false,\n  flexContent = \"center\",\n  ...props\n}) => {\n  const wrappedChildren =\n    typeof children === \"string\" || typeof children === \"number\" ? (\n      <>{children}</>\n    ) : (\n      children\n    );\n\n  return (\n    <PopoverPrimitive.Root {...props}>\n      {content ? (\n        <>\n          <PopoverTrigger asChild>{wrappedChildren}</PopoverTrigger>\n          <PopoverContent\n            placement={placement}\n            offset={offset}\n            shouldFlip={shouldFlip}\n            arrow={arrow}\n            flexContent={flexContent}\n            className={className}\n          >\n            {content}\n          </PopoverContent>\n        </>\n      ) : (\n        wrappedChildren\n      )}\n    </PopoverPrimitive.Root>\n  );\n};\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\ninterface PopoverContentProps\n  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> {\n  placement?: \"top\" | \"right\" | \"bottom\" | \"left\";\n  offset?: number;\n  shouldFlip?: boolean;\n  arrow?: boolean;\n  flexContent?: \"start\" | \"center\" | \"end\";\n}\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  PopoverContentProps\n>(\n  (\n    {\n      className,\n      placement = \"bottom\",\n      offset = 10,\n      shouldFlip = false,\n      arrow = false,\n      flexContent = \"center\",\n      ...props\n    },\n    ref,\n  ) => (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        ref={ref}\n        side={placement}\n        sideOffset={offset}\n        avoidCollisions={shouldFlip}\n        className={cn(\n          \"flex z-50 w-full px-4 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out\",\n          flexContent === \"start\" && \"justify-start\",\n          flexContent === \"center\" && \"justify-center\",\n          flexContent === \"end\" && \"justify-end\",\n          className,\n        )}\n        {...props}\n      >\n        {props.children}\n        {arrow && (\n          <PopoverPrimitive.Arrow className=\"fill-current text-popover\" />\n        )}\n      </PopoverPrimitive.Content>\n    </PopoverPrimitive.Portal>\n  ),\n);\n\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent };\n",
      "type": "registry:ui",
      "target": "components/ui/popover.tsx"
    }
  ]
}