{
  "name": "tree",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/tree.tsx",
      "content": "\"use client\";\r\n\r\nimport React, {\r\n  createContext,\r\n  forwardRef,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\r\nimport { FileIcon, FolderIcon, FolderOpenIcon } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/registry/ui/react/button\";\r\nimport { ScrollArea } from \"@/registry/ui/react/scroll-area\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface TreeViewElement {\r\n  id: string;\r\n  name: string;\r\n  isSelectable?: boolean;\r\n  children?: TreeViewElement[];\r\n}\r\n\r\ninterface TreeContextProps {\r\n  selectedId: string | undefined;\r\n  expandedItems: string[] | undefined;\r\n  indicator: boolean;\r\n  handleExpand: (id: string) => void;\r\n  selectItem: (id: string) => void;\r\n  setExpandedItems?: React.Dispatch<React.SetStateAction<string[] | undefined>>;\r\n  openIcon?: React.ReactNode;\r\n  closeIcon?: React.ReactNode;\r\n  direction: \"rtl\" | \"ltr\";\r\n}\r\n\r\nconst TreeContext = createContext<TreeContextProps | null>(null);\r\n\r\nfunction useTree() {\r\n  const context = useContext(TreeContext);\r\n  if (!context) {\r\n    throw new Error(\"useTree must be used within a TreeProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\ninterface TreeViewComponentProps extends React.HTMLAttributes<HTMLDivElement> {}\r\n\r\ntype Direction = \"rtl\" | \"ltr\" | undefined;\r\n\r\ntype TreeViewProps = {\r\n  initialSelectedId?: string;\r\n  indicator?: boolean;\r\n  elements?: TreeViewElement[];\r\n  initialExpandedItems?: string[];\r\n  openIcon?: React.ReactNode;\r\n  closeIcon?: React.ReactNode;\r\n} & TreeViewComponentProps;\r\n\r\nconst Tree = forwardRef<HTMLDivElement, TreeViewProps>(\r\n  (\r\n    {\r\n      className,\r\n      elements,\r\n      initialSelectedId,\r\n      initialExpandedItems,\r\n      children,\r\n      indicator = true,\r\n      openIcon,\r\n      closeIcon,\r\n      dir,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [selectedId, setSelectedId] = useState<string | undefined>(\r\n      initialSelectedId,\r\n    );\r\n    const [expandedItems, setExpandedItems] = useState<string[] | undefined>(\r\n      initialExpandedItems,\r\n    );\r\n\r\n    const selectItem = useCallback((id: string) => {\r\n      setSelectedId(id);\r\n    }, []);\r\n\r\n    const handleExpand = useCallback((id: string) => {\r\n      setExpandedItems((prev) => {\r\n        if (prev?.includes(id)) {\r\n          return prev.filter((item) => item !== id);\r\n        }\r\n        return [...(prev ?? []), id];\r\n      });\r\n    }, []);\r\n\r\n    const expandSpecificTargetedElements = useCallback(\r\n      (elements?: TreeViewElement[], selectId?: string) => {\r\n        if (!elements || !selectId) return;\r\n        const findParent = (\r\n          currentElement: TreeViewElement,\r\n          currentPath: string[] = [],\r\n        ) => {\r\n          const isSelectable = currentElement.isSelectable ?? true;\r\n          const newPath = [...currentPath, currentElement.id];\r\n          if (currentElement.id === selectId) {\r\n            if (isSelectable) {\r\n              setExpandedItems((prev) => [...(prev ?? []), ...newPath]);\r\n            } else {\r\n              if (newPath.includes(currentElement.id)) {\r\n                newPath.pop();\r\n                setExpandedItems((prev) => [...(prev ?? []), ...newPath]);\r\n              }\r\n            }\r\n            return;\r\n          }\r\n          if (\r\n            isSelectable &&\r\n            currentElement.children &&\r\n            currentElement.children.length > 0\r\n          ) {\r\n            currentElement.children.forEach((child) => {\r\n              findParent(child, newPath);\r\n            });\r\n          }\r\n        };\r\n        elements.forEach((element) => {\r\n          findParent(element);\r\n        });\r\n      },\r\n      [],\r\n    );\r\n\r\n    useEffect(() => {\r\n      if (initialSelectedId) {\r\n        expandSpecificTargetedElements(elements, initialSelectedId);\r\n      }\r\n    }, [initialSelectedId, elements]);\r\n\r\n    const direction = dir === \"rtl\" ? \"rtl\" : \"ltr\";\r\n\r\n    return (\r\n      <TreeContext.Provider\r\n        value={{\r\n          selectedId,\r\n          expandedItems,\r\n          handleExpand,\r\n          selectItem,\r\n          setExpandedItems,\r\n          indicator,\r\n          openIcon,\r\n          closeIcon,\r\n          direction,\r\n        }}\r\n      >\r\n        <div className={cn(\"size-full\", className)}>\r\n          <ScrollArea\r\n            ref={ref}\r\n            className=\"relative h-full px-2\"\r\n            dir={dir as Direction}\r\n          >\r\n            <AccordionPrimitive.Root\r\n              {...props}\r\n              type=\"multiple\"\r\n              defaultValue={expandedItems}\r\n              value={expandedItems}\r\n              className=\"flex flex-col gap-1\"\r\n              onValueChange={(value) =>\r\n                setExpandedItems((prev) =>\r\n                  value[0] ? [...(prev ?? []), value[0]] : prev,\r\n                )\r\n              }\r\n              dir={dir as Direction}\r\n            >\r\n              {children}\r\n            </AccordionPrimitive.Root>\r\n          </ScrollArea>\r\n        </div>\r\n      </TreeContext.Provider>\r\n    );\r\n  },\r\n);\r\n\r\nTree.displayName = \"Tree\";\r\n\r\nconst TreeIndicator = forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { direction } = useTree();\r\n\r\n  return (\r\n    <div\r\n      dir={direction}\r\n      ref={ref}\r\n      className={cn(\r\n        \"bg-muted absolute left-1.5 h-full w-px rounded-md py-3 duration-300 ease-in-out hover:bg-slate-300 rtl:right-1.5\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\n\r\nTreeIndicator.displayName = \"TreeIndicator\";\r\n\r\ninterface FolderComponentProps\r\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {}\r\n\r\ntype FolderProps = {\r\n  expandedItems?: string[];\r\n  element: string;\r\n  isSelectable?: boolean;\r\n  isSelect?: boolean;\r\n} & FolderComponentProps;\r\n\r\nconst Folder = forwardRef<\r\n  HTMLDivElement,\r\n  FolderProps & React.HTMLAttributes<HTMLDivElement>\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      element,\r\n      value,\r\n      isSelectable = true,\r\n      isSelect,\r\n      children,\r\n      ...props\r\n    },\r\n    _ref,\r\n  ) => {\r\n    const {\r\n      direction,\r\n      handleExpand,\r\n      expandedItems,\r\n      indicator,\r\n      setExpandedItems,\r\n      openIcon,\r\n      closeIcon,\r\n    } = useTree();\r\n\r\n    return (\r\n      <AccordionPrimitive.Item\r\n        {...props}\r\n        value={value}\r\n        className=\"relative h-full overflow-hidden \"\r\n      >\r\n        <AccordionPrimitive.Trigger\r\n          className={cn(\r\n            `flex items-center gap-1 rounded-md text-sm`,\r\n            className,\r\n            {\r\n              \"bg-muted rounded-md\": isSelect && isSelectable,\r\n              \"cursor-pointer\": isSelectable,\r\n              \"cursor-not-allowed opacity-50\": !isSelectable,\r\n            },\r\n          )}\r\n          disabled={!isSelectable}\r\n          onClick={() => handleExpand(value)}\r\n        >\r\n          {expandedItems?.includes(value)\r\n            ? (openIcon ?? <FolderOpenIcon className=\"size-4\" />)\r\n            : (closeIcon ?? <FolderIcon className=\"size-4\" />)}\r\n          <span>{element}</span>\r\n        </AccordionPrimitive.Trigger>\r\n        <AccordionPrimitive.Content className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down relative h-full overflow-hidden text-sm\">\r\n          {element && indicator && <TreeIndicator aria-hidden=\"true\" />}\r\n          <AccordionPrimitive.Root\r\n            dir={direction}\r\n            type=\"multiple\"\r\n            className=\"ml-5 flex flex-col gap-1 py-1 rtl:mr-5 \"\r\n            defaultValue={expandedItems}\r\n            value={expandedItems}\r\n            onValueChange={(value) => {\r\n              setExpandedItems?.((prev) =>\r\n                value[0] ? [...(prev ?? []), value[0]] : prev,\r\n              );\r\n            }}\r\n          >\r\n            {children}\r\n          </AccordionPrimitive.Root>\r\n        </AccordionPrimitive.Content>\r\n      </AccordionPrimitive.Item>\r\n    );\r\n  },\r\n);\r\n\r\nFolder.displayName = \"Folder\";\r\n\r\nconst File = forwardRef<\r\n  HTMLButtonElement,\r\n  {\r\n    value: string;\r\n    handleSelect?: (id: string) => void;\r\n    isSelectable?: boolean;\r\n    isSelect?: boolean;\r\n    fileIcon?: React.ReactNode;\r\n  } & React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\r\n>(\r\n  (\r\n    {\r\n      value,\r\n      className,\r\n      handleSelect,\r\n      isSelectable = true,\r\n      isSelect,\r\n      fileIcon,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const { direction, selectedId, selectItem } = useTree();\r\n    const isSelected = isSelect ?? selectedId === value;\r\n    return (\r\n      <AccordionPrimitive.Item value={value} className=\"relative\">\r\n        <AccordionPrimitive.Trigger\r\n          ref={ref}\r\n          {...props}\r\n          dir={direction}\r\n          disabled={!isSelectable}\r\n          aria-label=\"File\"\r\n          className={cn(\r\n            \"flex cursor-pointer items-center gap-1 rounded-md pr-1 text-sm duration-200 ease-in-out  rtl:pl-1 rtl:pr-0\",\r\n            {\r\n              \"bg-muted\": isSelected && isSelectable,\r\n            },\r\n            isSelectable ? \"cursor-pointer\" : \"cursor-not-allowed opacity-50\",\r\n            className,\r\n          )}\r\n          onClick={() => selectItem(value)}\r\n        >\r\n          {fileIcon ?? <FileIcon className=\"size-4\" />}\r\n          {children}\r\n        </AccordionPrimitive.Trigger>\r\n      </AccordionPrimitive.Item>\r\n    );\r\n  },\r\n);\r\n\r\nFile.displayName = \"File\";\r\n\r\nconst CollapseButton = forwardRef<\r\n  HTMLButtonElement,\r\n  {\r\n    elements: TreeViewElement[];\r\n    expandAll?: boolean;\r\n  } & React.HTMLAttributes<HTMLButtonElement>\r\n>(({ className, elements, expandAll = false, children, ...props }, ref) => {\r\n  const { expandedItems, setExpandedItems } = useTree();\r\n\r\n  const expendAllTree = useCallback((elements: TreeViewElement[]) => {\r\n    const expandTree = (element: TreeViewElement) => {\r\n      const isSelectable = element.isSelectable ?? true;\r\n      if (isSelectable && element.children && element.children.length > 0) {\r\n        setExpandedItems?.((prev) => [...(prev ?? []), element.id]);\r\n        element.children.forEach(expandTree);\r\n      }\r\n    };\r\n\r\n    elements.forEach(expandTree);\r\n  }, []);\r\n\r\n  const closeAll = useCallback(() => {\r\n    setExpandedItems?.([]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line no-console\r\n    console.log(expandAll);\r\n    if (expandAll) {\r\n      expendAllTree(elements);\r\n    }\r\n  }, [expandAll]);\r\n\r\n  return (\r\n    <Button\r\n      variant=\"quiet\"\r\n      className=\"absolute bottom-1 right-2 h-8 w-fit p-1\"\r\n      onClick={\r\n        expandedItems && expandedItems.length > 0\r\n          ? closeAll\r\n          : () => expendAllTree(elements)\r\n      }\r\n      ref={ref}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <span className=\"sr-only\">Toggle</span>\r\n    </Button>\r\n  );\r\n});\r\n\r\nCollapseButton.displayName = \"CollapseButton\";\r\n\r\nexport { CollapseButton, File, Folder, Tree, type TreeViewElement };\r\n",
      "type": "registry:ui",
      "target": "components/ui/tree.tsx"
    }
  ]
}