{
  "name": "star-rating",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/star-rating.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport type { LucideIcon, LucideProps } from \"lucide-react\";\r\nimport { StarIcon } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst starStyles = {\r\n  base: \"h-6 w-6 transition-transform duration-300 hover:scale-110\",\r\n  variants: {\r\n    variant: {\r\n      default: \"text-yellow-500 fill-yellow-500\",\r\n      primary: \"text-primary fill-primary\",\r\n      secondary: \"text-secondary fill-secondary\",\r\n      success: \"text-success fill-success\",\r\n      warning: \"text-warning fill-warning\",\r\n      danger: \"text-danger fill-danger\",\r\n    },\r\n    size: {\r\n      sm: \"h-4 w-4\",\r\n      md: \"h-6 w-6\",\r\n      lg: \"h-8 w-8\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n    size: \"md\",\r\n  },\r\n};\r\n\r\ninterface StarRatingProps {\r\n  numStars?: number;\r\n  icon?: LucideIcon;\r\n  disabled?: boolean;\r\n  wrapperProps?: React.HTMLAttributes<HTMLDivElement>;\r\n  iconProps?: LucideProps;\r\n  showcase?: boolean;\r\n  defaultValue?: number;\r\n  variant?: keyof (typeof starStyles)[\"variants\"][\"variant\"];\r\n  size?: keyof (typeof starStyles)[\"variants\"][\"size\"];\r\n  onChange?: (value: number) => void;\r\n  onClick?: (value: number) => void;\r\n}\r\n\r\nfunction StarRating({\r\n  numStars = 5,\r\n  icon: IconComponent = StarIcon,\r\n  disabled = false,\r\n  showcase = false,\r\n  iconProps = {},\r\n  wrapperProps = {},\r\n  defaultValue = 0,\r\n  variant,\r\n  size,\r\n  onChange,\r\n  onClick,\r\n}: StarRatingProps) {\r\n  const [value, setValue] = React.useState<number>(defaultValue);\r\n\r\n  const { className: wrapperClassName, ...restWrapperProps } = wrapperProps;\r\n  const { className: iconClassName, ...restIconProps } = iconProps;\r\n\r\n  const appliedVariant = variant || starStyles.defaultVariants.variant;\r\n  const appliedSize = size || starStyles.defaultVariants.size;\r\n\r\n  const variantClassName =\r\n    starStyles.variants.variant[\r\n      appliedVariant as keyof typeof starStyles.variants.variant\r\n    ];\r\n  const sizeClassName =\r\n    starStyles.variants.size[\r\n      appliedSize as keyof typeof starStyles.variants.size\r\n    ];\r\n\r\n  const handleMouseEnter = (index: number) => {\r\n    if (!showcase && !disabled) {\r\n      setValue(index + 1);\r\n    }\r\n  };\r\n\r\n  const handleClick = (index: number) => {\r\n    if (!disabled) {\r\n      const newValue = index + 1;\r\n      setValue(newValue);\r\n\r\n      if (onChange) {\r\n        onChange(newValue);\r\n      }\r\n\r\n      if (onClick) {\r\n        onClick(newValue);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"flex items-center cursor-pointer gap-1\", wrapperClassName)}\r\n      {...restWrapperProps}\r\n    >\r\n      {Array.from({ length: numStars }, (_, i) => {\r\n        const isRated = i < Math.floor(value);\r\n        const fractionalPart =\r\n          i === Math.floor(value) ? value % 1 : i < value ? 1 : 0;\r\n\r\n        return (\r\n          <div\r\n            key={i}\r\n            className={cn(\r\n              \"relative\",\r\n              {\r\n                \"pointer-events-none\": disabled,\r\n              },\r\n              sizeClassName,\r\n            )}\r\n            onMouseEnter={() => handleMouseEnter(i)}\r\n            onClick={() => handleClick(i)}\r\n          >\r\n            <IconComponent\r\n              className={cn(\r\n                starStyles.base,\r\n                \"fill-gray-300 text-gray-300\",\r\n                iconClassName,\r\n              )}\r\n              {...restIconProps}\r\n            />\r\n            {(isRated || fractionalPart > 0) && (\r\n              <div\r\n                className=\"absolute top-0 left-0 overflow-hidden\"\r\n                style={{ width: `${fractionalPart * 100}%` }}\r\n              >\r\n                <IconComponent\r\n                  className={cn(\r\n                    starStyles.base,\r\n                    \"text-yellow-500\",\r\n                    variantClassName,\r\n                    iconClassName,\r\n                  )}\r\n                  {...restIconProps}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { StarRating };\r\n",
      "type": "registry:ui",
      "target": "components/ui/star-rating.tsx"
    }
  ]
}