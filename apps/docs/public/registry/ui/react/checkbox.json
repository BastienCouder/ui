{
  "name": "checkbox",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/checkbox.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { Check } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { tv } from \"tailwind-variants\";\n\nconst checkedStyles = tv({\n  base: \"ring-offset-background focus-visible:ring-ring peer shrink-0 rounded-sm border focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n  variants: {\n    variant: {\n      neutral:\n        \"border-foreground data-[state=checked]:bg-foreground data-[state=checked]:text-background\",\n      primary:\n        \"border-primary data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      secondary:\n        \"border-secondary data-[state=checked]:bg-secondary data-[state=checked]:text-secondary-foreground\",\n    },\n    size: {\n      sm: \"h-4 w-4\",\n      md: \"h-4 w-4\",\n      lg: \"h-5 w-5\",\n    },\n    shape: {\n      rectangle: \"rounded-sm\",\n      square: \"rounded-none\",\n      circle: \"rounded-full\",\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n    size: \"md\",\n    shape: \"rectangle\",\n  },\n});\n\nconst textStyles = tv({\n  variants: {\n    size: {\n      sm: \"text-xs\",\n      md: \"text-sm\",\n      lg: \"text-base\",\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\ntype CheckboxProps = React.ComponentPropsWithoutRef<\n  typeof CheckboxPrimitive.Root\n> & {\n  children?: React.ReactNode;\n  labelPosition?: \"left\" | \"right\";\n  description?: string;\n  disabled?: boolean;\n  card?: boolean;\n  cardClassName?: string;\n  readOnly?: boolean;\n  defaultChecked?: boolean;\n  variant?: \"neutral\" | \"primary\" | \"secondary\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  shape?: \"rectangle\" | \"square\" | \"circle\";\n};\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  CheckboxProps\n>(\n  (\n    {\n      className,\n      children,\n      variant,\n      size,\n      shape,\n      labelPosition = \"right\",\n      description,\n      disabled = false,\n      card = false,\n      cardClassName,\n      readOnly = false,\n      defaultChecked = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const [checked, setChecked] = React.useState(defaultChecked);\n\n    const handleCardClick = () => {\n      if (!disabled && !readOnly) {\n        setChecked(!checked);\n        props.onCheckedChange?.(!checked);\n      }\n    };\n\n    const content = (\n      <div\n        className={cn(\n          \"flex items-center\",\n          labelPosition === \"left\" ? \"flex-row-reverse\" : \"flex-row\",\n          disabled && \"opacity-50 cursor-not-allowed\",\n        )}\n      >\n        <CheckboxPrimitive.Root\n          ref={ref}\n          className={cn(checkedStyles({ variant, size, shape }), className)}\n          disabled={disabled}\n          checked={checked}\n          onCheckedChange={(checked) =>\n            !readOnly &&\n            setChecked(checked === \"indeterminate\" ? false : checked)\n          }\n          {...props}\n        >\n          <CheckboxPrimitive.Indicator\n            className={cn(\"flex items-center justify-center text-current\")}\n          >\n            <Check className=\"w-4 h-4\" />\n          </CheckboxPrimitive.Indicator>\n        </CheckboxPrimitive.Root>\n        <div className={cn(\"ml-2\", labelPosition === \"left\" ? \"mr-2\" : \"ml-2\")}>\n          {children && (\n            <span className={cn(textStyles({ size }))}>{children}</span>\n          )}\n          {description && (\n            <p className=\"text-sm text-muted-foreground\">{description}</p>\n          )}\n        </div>\n      </div>\n    );\n\n    if (card) {\n      return (\n        <div\n          onClick={handleCardClick}\n          className={cn(\n            \"inline-block p-4 border rounded-lg cursor-pointer transition-colors\",\n            \"data-[state=checked]:bg-neutral/20\",\n            cardClassName,\n          )}\n          style={{ width: \"auto\" }}\n          data-state={checked ? \"checked\" : \"unchecked\"}\n        >\n          {content}\n        </div>\n      );\n    }\n\n    return content;\n  },\n);\n\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };\n",
      "type": "registry:ui",
      "target": "components/ui/checkbox.tsx"
    }
  ]
}