{
  "name": "star-rating",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/react/star-rating.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport type { LucideIcon, LucideProps } from \"lucide-react\";\nimport { StarIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst starStyles = {\n  base: \"h-6 w-6 transition-transform duration-300 hover:scale-110\",\n  variants: {\n    variant: {\n      default: \"text-yellow-500 fill-yellow-500\",\n      primary: \"text-primary fill-primary\",\n      secondary: \"text-secondary fill-secondary\",\n      success: \"text-success fill-success\",\n      warning: \"text-warning fill-warning\",\n      danger: \"text-danger fill-danger\",\n    },\n    size: {\n      sm: \"h-4 w-4\",\n      md: \"h-6 w-6\",\n      lg: \"h-8 w-8\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n  },\n};\n\ninterface StarRatingProps {\n  numStars?: number;\n  icon?: LucideIcon;\n  disabled?: boolean;\n  wrapperProps?: React.HTMLAttributes<HTMLDivElement>;\n  iconProps?: LucideProps;\n  showcase?: boolean;\n  defaultValue?: number;\n  variant?: keyof (typeof starStyles)[\"variants\"][\"variant\"];\n  size?: keyof (typeof starStyles)[\"variants\"][\"size\"];\n  onChange?: (value: number) => void;\n  onClick?: (value: number) => void;\n}\n\nfunction StarRating({\n  numStars = 5,\n  icon: IconComponent = StarIcon,\n  disabled = false,\n  showcase = false,\n  iconProps = {},\n  wrapperProps = {},\n  defaultValue = 0,\n  variant,\n  size,\n  onChange,\n  onClick,\n}: StarRatingProps): JSX.Element {\n  const [value, setValue] = React.useState<number>(defaultValue);\n\n  const { className: wrapperClassName, ...restWrapperProps } = wrapperProps;\n  const { className: iconClassName, ...restIconProps } = iconProps;\n\n  const appliedVariant = variant || starStyles.defaultVariants.variant;\n  const appliedSize = size || starStyles.defaultVariants.size;\n\n  const variantClassName =\n    starStyles.variants.variant[\n      appliedVariant as keyof typeof starStyles.variants.variant\n    ];\n  const sizeClassName =\n    starStyles.variants.size[\n      appliedSize as keyof typeof starStyles.variants.size\n    ];\n\n  const handleMouseEnter = (index: number) => {\n    if (!showcase && !disabled) {\n      setValue(index + 1);\n    }\n  };\n\n  const handleClick = (index: number) => {\n    if (!disabled) {\n      const newValue = index + 1;\n      setValue(newValue);\n\n      if (onChange) {\n        onChange(newValue);\n      }\n\n      if (onClick) {\n        onClick(newValue);\n      }\n    }\n  };\n\n  return (\n    <div\n      className={cn(\"flex items-center cursor-pointer gap-1\", wrapperClassName)}\n      {...restWrapperProps}\n    >\n      {Array.from({ length: numStars }, (_, i) => {\n        const isRated = i < Math.floor(value);\n        const fractionalPart =\n          i === Math.floor(value) ? value % 1 : i < value ? 1 : 0;\n\n        return (\n          <div\n            key={i}\n            className={cn(\n              \"relative\",\n              {\n                \"pointer-events-none\": disabled,\n              },\n              sizeClassName,\n            )}\n            onMouseEnter={() => handleMouseEnter(i)}\n            onClick={() => handleClick(i)}\n          >\n            <IconComponent\n              className={cn(\n                starStyles.base,\n                \"fill-gray-300 text-gray-300\",\n                iconClassName,\n              )}\n              {...restIconProps}\n            />\n            {(isRated || fractionalPart > 0) && (\n              <div\n                className=\"absolute top-0 left-0 overflow-hidden\"\n                style={{ width: `${fractionalPart * 100}%` }}\n              >\n                <IconComponent\n                  className={cn(\n                    starStyles.base,\n                    \"text-yellow-500\",\n                    variantClassName,\n                    iconClassName,\n                  )}\n                  {...restIconProps}\n                />\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport { StarRating };\n",
      "type": "registry:ui",
      "target": "components/ui/star-rating.tsx"
    }
  ]
}